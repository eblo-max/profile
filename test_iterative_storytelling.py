#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏—Ç–µ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞ storytelling
–≠—Ç–∞–ø 1: –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
–≠—Ç–∞–ø 2: Storytelling narrative
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, str(Path(__file__).parent))

from app.services.ai_service import AIService

async def test_iterative_storytelling():
    """–¢–µ—Å—Ç –∏—Ç–µ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ storytelling –ø–æ–¥—Ö–æ–¥–∞"""
    
    print("üöÄ –¢–ï–°–¢ –ò–¢–ï–†–ê–¢–ò–í–ù–û–ì–û STORYTELLING –ü–û–î–•–û–î–ê")
    print("=" * 60)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_answers = [
        {
            "question": "–ö–∞–∫ –≤–∞—à –ø–∞—Ä—Ç–Ω–µ—Ä —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –∫—Ä–∏—Ç–∏–∫—É?",
            "answer": "–û–Ω –æ—á–µ–Ω—å –∑–ª–∏—Ç—Å—è –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç –∫—Ä–∏—á–∞—Ç—å. –ì–æ–≤–æ—Ä–∏—Ç, —á—Ç–æ —è –≤—Å–µ–≥–¥–∞ –≤—Å—ë –¥–µ–ª–∞—é –Ω–µ —Ç–∞–∫.",
            "question_id": 1
        },
        {
            "question": "–ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç –ª–∏ –æ–Ω –≤–∞—à–∏ —Ñ–∏–Ω–∞–Ω—Å—ã?",
            "answer": "–î–∞, –æ–Ω –∑–∞–±–∏—Ä–∞–µ—Ç –≤—Å—é –∑–∞—Ä–ø–ª–∞—Ç—É –∏ –¥–∞–µ—Ç –º–Ω–µ —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–∞–º–æ–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ.",
            "question_id": 2
        },
        {
            "question": "–ö–∞–∫ –æ–Ω –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –≤–∞—à–∏–º –¥—Ä—É–∑—å—è–º?",
            "answer": "–û–Ω –≥–æ–≤–æ—Ä–∏—Ç, —á—Ç–æ –æ–Ω–∏ –ø–ª–æ—Ö–æ –≤–ª–∏—è—é—Ç –Ω–∞ –º–µ–Ω—è, –∏ —è –ø–æ—á—Ç–∏ –Ω–µ –æ–±—â–∞—é—Å—å —Å –Ω–∏–º–∏.",
            "question_id": 3
        },
        {
            "question": "–ò–∑–≤–∏–Ω—è–µ—Ç—Å—è –ª–∏ –æ–Ω –ø–æ—Å–ª–µ —Å—Å–æ—Ä?",
            "answer": "–ù–∏–∫–æ–≥–¥–∞. –ì–æ–≤–æ—Ä–∏—Ç, —á—Ç–æ —ç—Ç–æ —è –≤–∏–Ω–æ–≤–∞—Ç–∞ –≤–æ –≤—Å–µ–º.",
            "question_id": 4
        },
        {
            "question": "–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–∏ –æ–Ω –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω?",
            "answer": "–ü–æ—Å—Ç–æ—è–Ω–Ω–æ. –ß–∏—Ç–∞–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Ç—Ä–µ–±—É–µ—Ç –æ–±—ä—è—Å–Ω–µ–Ω–∏–π.",
            "question_id": 5
        }
    ]
    
    ai_service = AIService()
    
    try:
        print("üîÑ –ó–∞–ø—É—Å–∫–∞—é –∏—Ç–µ—Ä–∞—Ç–∏–≤–Ω—ã–π storytelling...")
        print("   –≠—Ç–∞–ø 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        print("   –≠—Ç–∞–ø 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è storytelling narrative")
        print()
        
        result = await ai_service.profile_partner_advanced(
            answers=test_answers,
            user_id=999,
            partner_name="–ú–∏—Ö–∞–∏–ª",
            partner_description="–ü–∞—Ä—Ç–Ω–µ—Ä, 32 –≥–æ–¥–∞",
            technique="storytelling",
            use_cache=False
        )
        
        print("‚úÖ –ò–¢–ï–†–ê–¢–ò–í–ù–´–ô –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù!")
        print("=" * 60)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        print(f"üìä –ú–ï–¢–ê–î–ê–ù–ù–´–ï:")
        print(f"   –ú–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {result.get('generation_method', 'unknown')}")
        print(f"   –°–∏–º–≤–æ–ª–æ–≤ –≤ narrative: {result.get('narrative_length', 0)}")
        print(f"   –°–ª–æ–≤ –≤ narrative: {result.get('narrative_words', 0)}")
        print(f"   Red flags: {len(result.get('red_flags', []))}")
        print(f"   –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã: {len(result.get('personalized_insights', []))}")
        print()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if 'structured_analysis' in result:
            structured = result['structured_analysis']
            print(f"üèóÔ∏è –°–¢–†–£–ö–¢–£–†–ò–†–û–í–ê–ù–ù–´–ï –î–ê–ù–ù–´–ï:")
            print(f"   –¢–∏–ø –ª–∏—á–Ω–æ—Å—Ç–∏: {structured.get('personality_type', 'N/A')}")
            print(f"   –†–∏—Å–∫ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–π: {structured.get('manipulation_risk', 'N/A')}")
            print(f"   –£—Ä–æ–≤–µ–Ω—å —Å—Ä–æ—á–Ω–æ—Å—Ç–∏: {structured.get('urgency_level', 'N/A')}")
            print()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º storytelling –∫–æ–Ω—Ç–µ–Ω—Ç
        profile_text = result.get('psychological_profile', '')
        word_count = len(profile_text.split())
        
        print(f"üìñ STORYTELLING –ê–ù–ê–õ–ò–ó:")
        print(f"   –°–∏–º–≤–æ–ª–æ–≤: {len(profile_text)}")
        print(f"   –°–ª–æ–≤: {word_count}")
        print(f"   –¶–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: 1500+ —Å–ª–æ–≤")
        print(f"   –ö–∞—á–µ—Å—Ç–≤–æ: {'‚úÖ –û–¢–õ–ò–ß–ù–û' if word_count >= 1500 else '‚ö†Ô∏è –ú–ê–õ–û' if word_count >= 1000 else '‚ùå –ü–õ–û–•–û'}")
        print()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã storytelling
        has_partner_name = '–ú–∏—Ö–∞–∏–ª' in profile_text
        has_dialogues = profile_text.count('**') >= 4 and ':' in profile_text
        has_scenarios = any(word in profile_text.lower() for word in ['—Å—Ü–µ–Ω–∞—Ä–∏–π', '–∏—Å—Ç–æ—Ä–∏—è', '—Å–∏—Ç—É–∞—Ü–∏—è', '–ø—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ'])
        has_emotions = any(word in profile_text.lower() for word in ['—á—É–≤—Å—Ç–≤—É–µ—Ç–µ', '—ç–º–æ—Ü–∏', '–ø–µ—Ä–µ–∂–∏–≤–∞–µ—Ç–µ', '–æ—â—É—â–∞–µ—Ç–µ'])
        has_details = any(word in profile_text.lower() for word in ['–¥–µ—Ç–∞–ª–∏', '–∫–æ–Ω–∫—Ä–µ—Ç–Ω', '–Ω–∞–ø—Ä–∏–º–µ—Ä', '–º–∏–º–∏–∫–∞', '–∂–µ—Å—Ç—ã'])
        
        print(f"üé≠ –ö–ê–ß–ï–°–¢–í–û STORYTELLING:")
        print(f"   üë§ –ò–º—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞ (–ú–∏—Ö–∞–∏–ª): {'‚úÖ' if has_partner_name else '‚ùå'}")
        print(f"   üí¨ –î–∏–∞–ª–æ–≥–∏ –∏ —Ü–∏—Ç–∞—Ç—ã: {'‚úÖ' if has_dialogues else '‚ùå'}")
        print(f"   üé¨ –°—Ü–µ–Ω–∞—Ä–∏–∏ –∏ –∏—Å—Ç–æ—Ä–∏–∏: {'‚úÖ' if has_scenarios else '‚ùå'}")
        print(f"   üòä –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è: {'‚úÖ' if has_emotions else '‚ùå'}")
        print(f"   üîç –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è: {'‚úÖ' if has_details else '‚ùå'}")
        print()
        
        quality_score = sum([has_partner_name, has_dialogues, has_scenarios, has_emotions, has_details])
        print(f"üéØ –û–ë–©–ê–Ø –û–¶–ï–ù–ö–ê: {quality_score}/5")
        
        if quality_score >= 4:
            print("üèÜ –û–¢–õ–ò–ß–ù–û! –ò—Ç–µ—Ä–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        elif quality_score >= 3:
            print("‚úÖ –•–û–†–û–®–û! –ï—Å—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è")
        else:
            print("‚ùå –ü–õ–û–•–û! –ù—É–∂–Ω—ã –¥–æ—Ä–∞–±–æ—Ç–∫–∏")
        
        print()
        print("üìñ –ü–†–ï–í–¨–Æ STORYTELLING –¢–ï–ö–°–¢–ê:")
        print("-" * 60)
        print(profile_text[:1000])
        if len(profile_text) > 1000:
            print("...")
            print()
            print("(–ü–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤)")
        print("-" * 60)
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏
        print()
        print("üìä –°–†–ê–í–ù–ï–ù–ò–ï –° –¢–†–ï–ë–û–í–ê–ù–ò–Ø–ú–ò:")
        print(f"   –¢—Ä–µ–±—É–µ—Ç—Å—è: 1500+ —Å–ª–æ–≤")
        print(f"   –ü–æ–ª—É—á–µ–Ω–æ: {word_count} —Å–ª–æ–≤")
        print(f"   –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {round(word_count/1500*100, 1)}%")
        
        if word_count >= 1500:
            print("üéâ –¶–ï–õ–¨ –î–û–°–¢–ò–ì–ù–£–¢–ê! –ò—Ç–µ—Ä–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥ —Ä–µ—à–∏–ª –ø—Ä–æ–±–ª–µ–º—É —Å –æ–±—ä–µ–º–æ–º!")
        else:
            print("‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –æ–±—ä–µ–º–∞")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(test_iterative_storytelling()) 
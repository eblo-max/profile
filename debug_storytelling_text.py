#!/usr/bin/env python3
"""
–û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ storytelling
"""

import asyncio
from app.services.ai_service import ai_service

async def debug_storytelling_text():
    """–û—Ç–ª–∞–¥–∫–∞ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ storytelling"""
    
    try:
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_answers = [
            {"question": "–ö–∞–∫ –ø–∞—Ä—Ç–Ω–µ—Ä —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –≤–∞—à–∏ —É—Å–ø–µ—Ö–∏?", "answer": "–ú–∏—Ö–∞–∏–ª –≤—Å–µ–≥–¥–∞ –Ω–∞—Ö–æ–¥–∏—Ç —Å–ø–æ—Å–æ–± –ø—Ä–∏–Ω–∏–∑–∏—Ç—å –º–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è. –ö–æ–≥–¥–∞ —è –ø–æ–ª—É—á–∏–ª–∞ –ø–æ–≤—ã—à–µ–Ω–∏–µ, –æ–Ω —Å–∫–∞–∑–∞–ª: '–ù—É –∫–æ–Ω–µ—á–Ω–æ, —Ç–µ–±–µ –ø—Ä–æ—Å—Ç–æ –ø–æ–≤–µ–∑–ª–æ'. –ê –∫–æ–≥–¥–∞ —è –≤—ã–∏–≥—Ä–∞–ª–∞ –∫–æ–Ω–∫—É—Ä—Å, –æ–Ω –æ—Ç–æ–∑–≤–∞–ª—Å—è: '–ù–∞–≤–µ—Ä–Ω–æ–µ, –∂—é—Ä–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–∂–∞–ª–µ–ª–æ —Ç–µ–±—è'."},
            {"question": "–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–∏ –æ–Ω –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω?", "answer": "–î–∞, –ø–æ—Å—Ç–æ—è–Ω–Ω–æ. –û–Ω –≥–æ–≤–æ—Ä–∏—Ç, —á—Ç–æ —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –ø–∞—Ä, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–≤–µ—Ä—è—é—Ç –¥—Ä—É–≥ –¥—Ä—É–≥—É. –ù–æ –µ—Å–ª–∏ —è –æ—Ç–∫–∞–∑—ã–≤–∞—é—Å—å –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω, –æ–Ω –Ω–∞—á–∏–Ω–∞–µ—Ç –∫—Ä–∏—á–∞—Ç—å –∏ –æ–±–≤–∏–Ω—è—Ç—å –º–µ–Ω—è –≤ –∏–∑–º–µ–Ω–µ."},
            {"question": "–ö–∞–∫ –æ–Ω –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç —Ñ–∏–Ω–∞–Ω—Å—ã?", "answer": "–û–Ω –∑–∞–±—Ä–∞–ª –º–æ—é –∫–∞—Ä—Ç—É –∏ –≥–æ–≤–æ—Ä–∏—Ç, —á—Ç–æ –±—É–¥–µ—Ç —Å–∞–º —Ä–∞—Å–ø–æ—Ä—è–∂–∞—Ç—å—Å—è –¥–µ–Ω—å–≥–∞–º–∏. –ù–∞ –∫–∞–∂–¥—É—é –ø–æ–∫—É–ø–∫—É –Ω—É–∂–Ω–æ –µ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ. –î–∞–∂–µ –∑–∞ –ø—Ä–æ–¥—É–∫—Ç—ã –Ω–µ –º–æ–≥—É –ø–æ–π—Ç–∏ –æ–¥–Ω–∞ - –æ–Ω –¥–∞–µ—Ç —Ç–æ—á–Ω—É—é —Å—É–º–º—É –∏ —Ç—Ä–µ–±—É–µ—Ç —á–µ–∫."},
            {"question": "–ò–∑–æ–ª–∏—Ä—É–µ—Ç –ª–∏ –æ–Ω –≤–∞—Å –æ—Ç –¥—Ä—É–∑–µ–π?", "answer": "–ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —è –ø–µ—Ä–µ—Å—Ç–∞–ª–∞ –≤–∏–¥–µ—Ç—å—Å—è —Å –¥—Ä—É–∑—å—è–º–∏. –ú–∏—Ö–∞–∏–ª –≤—Å–µ–≥–¥–∞ –Ω–∞—Ö–æ–¥–∏–ª –ø–æ–≤–æ–¥ –Ω–µ –æ—Ç–ø—É—Å–∫–∞—Ç—å: —Ç–æ —É –Ω–µ–≥–æ –±—ã–ª–∏ –ø–ª–∞–Ω—ã, —Ç–æ –º–æ–∏ –ø–æ–¥—Ä—É–≥–∏ '–ø–ª–æ—Ö–æ –Ω–∞ –º–µ–Ω—è –≤–ª–∏—è—é—Ç'. –¢–µ–ø–µ—Ä—å —è –ø–æ—á—Ç–∏ –Ω–∏–∫–æ–≥–æ –Ω–µ –≤–∏–∂—É."},
            {"question": "–ö–∞–∫ –æ–Ω —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –∫—Ä–∏—Ç–∏–∫—É?", "answer": "–û—á–µ–Ω—å –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ. –ï—Å–ª–∏ —è –ø—ã—Ç–∞—é—Å—å –≤—ã—Å–∫–∞–∑–∞—Ç—å –Ω–µ–¥–æ–≤–æ–ª—å—Å—Ç–≤–æ, –æ–Ω –∫—Ä–∏—á–∏—Ç, —á—Ç–æ —è –Ω–µ–±–ª–∞–≥–æ–¥–∞—Ä–Ω–∞—è, —á—Ç–æ –≤—Å–µ –∂–µ–Ω—â–∏–Ω—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ. –ú–æ–∂–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –Ω–µ —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞—Ç—å –∏–ª–∏ —É–π—Ç–∏ –∏–∑ –¥–æ–º–∞."}
        ]
        
        print("üöÄ –û–¢–õ–ê–î–ö–ê STORYTELLING –¢–ï–ö–°–¢–ê")
        print("=" * 60)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
        print("üì° –ó–∞–ø—É—Å–∫–∞—é –∞–Ω–∞–ª–∏–∑...")
        result = await ai_service.profile_partner_advanced(
            answers=test_answers,
            user_id=999,
            partner_name="–ú–∏—Ö–∞–∏–ª",
            technique="storytelling"
        )
        
        print("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        
        # –í—ã–≤–æ–¥–∏–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç
        storytelling_text = result.get("psychological_profile", "")
        print(f"üìñ –ü–û–õ–ù–´–ô STORYTELLING –¢–ï–ö–°–¢:")
        print("-" * 60)
        print(storytelling_text)
        print("-" * 60)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        print(f"\nüìä –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´:")
        print(f"   –°–∏–º–≤–æ–ª–æ–≤: {len(storytelling_text)}")
        print(f"   –°–ª–æ–≤: {len(storytelling_text.split())}")
        double_newline = '\n\n'
        print(f"   –ê–±–∑–∞—Ü–µ–≤: {len(storytelling_text.split(double_newline))}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        has_dialogues = "‚Äì" in storytelling_text or ":" in storytelling_text
        has_emotions = any(word in storytelling_text.lower() for word in ["—á—É–≤—Å—Ç–≤—É–µ—Ç", "–ø–µ—Ä–µ–∂–∏–≤–∞–µ—Ç", "–±–æ–∏—Ç—Å—è", "–≤–æ–ª–Ω—É–µ—Ç"])
        has_scenarios = any(word in storytelling_text.lower() for word in ["—É—Ç—Ä–æ–º", "–≤–µ—á–µ—Ä–æ–º", "–∫–æ–≥–¥–∞", "—Å–∏—Ç—É–∞—Ü–∏—è"])
        has_name = "–ú–∏—Ö–∞–∏–ª" in storytelling_text
        
        print(f"\nüé≠ –ö–ê–ß–ï–°–¢–í–ï–ù–ù–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò:")
        print(f"   –î–∏–∞–ª–æ–≥–∏: {'‚úÖ' if has_dialogues else '‚ùå'}")
        print(f"   –≠–º–æ—Ü–∏–∏: {'‚úÖ' if has_emotions else '‚ùå'}")
        print(f"   –°—Ü–µ–Ω–∞—Ä–∏–∏: {'‚úÖ' if has_scenarios else '‚ùå'}")
        print(f"   –ò–º—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞: {'‚úÖ' if has_name else '‚ùå'}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º red flags
        red_flags = result.get("red_flags", [])
        print(f"\nüö® RED FLAGS: {len(red_flags)}")
        for i, flag in enumerate(red_flags, 1):
            print(f"   {i}. {flag}")
        
        # –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã
        insights = result.get("personalized_insights", [])
        print(f"\nüí° –ü–ï–†–°–û–ù–ê–õ–¨–ù–´–ï –ò–ù–°–ê–ô–¢–´: {len(insights)}")
        for i, insight in enumerate(insights, 1):
            print(f"   {i}. {insight}")
            
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(debug_storytelling_text()) 
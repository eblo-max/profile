#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ–≥–æ –±–æ—Ç–∞ PsychoDetective
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç –Ω–∞—á–∞–ª–∞ –¥–æ –∫–æ–Ω—Ü–∞
"""

import asyncio
import json
import os
import time
from datetime import datetime
from typing import Dict, Any, List

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
os.environ["TESTING"] = "true"
os.environ["LOG_LEVEL"] = "INFO"

# –ò–º–ø–æ—Ä—Ç—ã
from app.core.config import settings
from app.core.database import init_db
from app.services.ai_service import AIService  
from app.services.html_pdf_service import HTMLPDFService
from app.services.profile_service import ProfileService
from app.services.user_service import UserService
from app.models.user import User
from app.utils.enums import AnalysisType
from loguru import logger

class BotTester:
    """–ö–ª–∞—Å—Å –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞"""
    
    def __init__(self):
        self.test_user_id = 99999
        self.test_results = {
            "timestamp": datetime.now().isoformat(),
            "tests": {},
            "overall_success": False,
            "errors": [],
            "performance": {}
        }
        self.services = {}
        
    async def initialize_services(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        print("üîß –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –°–ï–†–í–ò–°–û–í")
        print("=" * 50)
        
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            print("üì¶ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
            await init_db()
            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞")
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–±—Ä–∏–∫–∏ —Å–µ—Å—Å–∏–π
            from app.core.database import AsyncSessionLocal
            self.session_factory = AsyncSessionLocal
            print("üîó –§–∞–±—Ä–∏–∫–∞ —Å–µ—Å—Å–∏–π —Å–æ–∑–¥–∞–Ω–∞")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤ –±–µ–∑ —Å–µ—Å—Å–∏–∏ (–±—É–¥–µ–º —Å–æ–∑–¥–∞–≤–∞—Ç—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞)
            print("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI —Å–µ—Ä–≤–∏—Å–∞...")
            self.services['ai'] = AIService()
            print("‚úÖ AI —Å–µ—Ä–≤–∏—Å –≥–æ—Ç–æ–≤")
            
            print("üìÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è HTML/PDF —Å–µ—Ä–≤–∏—Å–∞...")
            self.services['html_pdf'] = HTMLPDFService()
            print("‚úÖ HTML/PDF —Å–µ—Ä–≤–∏—Å –≥–æ—Ç–æ–≤")
            
            self.test_results["tests"]["service_initialization"] = {
                "success": True,
                "message": "–í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ"
            }
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤: {e}"
            print(f"‚ùå {error_msg}")
            self.test_results["tests"]["service_initialization"] = {
                "success": False,
                "error": error_msg
            }
            self.test_results["errors"].append(error_msg)
            
    async def test_user_management(self):
        """–¢–µ—Å—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
        print("\nüë§ –¢–ï–°–¢ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò")
        print("=" * 50)
        
        try:
            async with self.session_factory() as session:
                user_service = UserService(session)
                
                # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                print("üîß –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
                user = await user_service.get_or_create_user(
                    telegram_id=self.test_user_id,
                    username="test_user",
                    first_name="–¢–µ—Å—Ç",
                    last_name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                )
                print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω")
                
                # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                print("üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
                user = await user_service.get_user_by_telegram_id(self.test_user_id)
                if user:
                    print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: {user.first_name} {user.last_name}")
                else:
                    raise Exception("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
            self.test_results["tests"]["user_management"] = {
                "success": True,
                "message": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç"
            }
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏: {e}"
            print(f"‚ùå {error_msg}")
            self.test_results["tests"]["user_management"] = {
                "success": False,
                "error": error_msg
            }
            self.test_results["errors"].append(error_msg)
            
    async def test_text_analysis(self):
        """–¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞"""
        print("\nüìù –¢–ï–°–¢ –ê–ù–ê–õ–ò–ó–ê –¢–ï–ö–°–¢–ê")
        print("=" * 50)
        
        try:
            # –¢–µ—Å—Ç–æ–≤–∞—è –ø–µ—Ä–µ–ø–∏—Å–∫–∞
            test_text = """
            –û–Ω: –û–ø—è—Ç—å —Å–æ —Å–≤–æ–∏–º–∏ –ø–æ–¥—Ä—É–≥–∞–º–∏ –≤—Å—Ç—Ä–µ—á–∞–µ—à—å—Å—è? –°–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≥–æ–≤–æ—Ä–∏–ª - –æ–Ω–∏ —Ç–µ–±—è –ø—Ä–æ—Ç–∏–≤ –º–µ–Ω—è –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—é—Ç!
            –Ø: –ú—ã –ø—Ä–æ—Å—Ç–æ –ø–∏–ª–∏ –∫–æ—Ñ–µ...
            –û–Ω: "–ü—Ä–æ—Å—Ç–æ –ø–∏–ª–∏ –∫–æ—Ñ–µ"... –ê –æ —á–µ–º –±–æ–ª—Ç–∞–ª–∏? –ù–∞–≤–µ—Ä–Ω—è–∫–∞ –æ–±–æ –º–Ω–µ! –û–Ω–∏ –∑–∞–≤–∏–¥—É—é—Ç –Ω–∞—à–∏–º –æ—Ç–Ω–æ—à–µ–Ω–∏—è–º!
            –Ø: –ù–µ –∑–∞–≤–∏–¥—É—é—Ç, –º—ã –≥–æ–≤–æ—Ä–∏–ª–∏ –æ —Ä–∞–±–æ—Ç–µ...
            –û–Ω: –ù–µ –≤—Ä–∏ –º–Ω–µ! –Ø –≤—Å–µ –≤–∏–∂—É! –ï—Å–ª–∏ –µ—â–µ —Ä–∞–∑ –≤—Å—Ç—Ä–µ—Ç–∏—à—å—Å—è —Å –Ω–∏–º–∏ –±–µ–∑ –º–æ–µ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è - –ø–æ–∂–∞–ª–µ–µ—à—å!
            """
            
            print("ü§ñ –ê–Ω–∞–ª–∏–∑ —Ç–µ—Å—Ç–æ–≤–æ–π –ø–µ—Ä–µ–ø–∏—Å–∫–∏...")
            start_time = time.time()
            
            analysis = await self.services['ai'].analyze_text_advanced(
                text=test_text,
                user_id=self.test_user_id,
                context="–ø–µ—Ä–µ–ø–∏—Å–∫–∞ —Å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º",
                technique="chain_of_thought"
            )
            
            analysis_time = time.time() - start_time
            
            print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {analysis_time:.2f} —Å–µ–∫")
            print(f"üìä –¢–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å: {analysis.get('toxicity_score', 0)}/10")
            print(f"üö® –£—Ä–æ–≤–µ–Ω—å —Å—Ä–æ—á–Ω–æ—Å—Ç–∏: {analysis.get('urgency_level', 'UNKNOWN')}")
            print(f"üö© –ö—Ä–∞—Å–Ω—ã–µ —Ñ–ª–∞–≥–∏ –Ω–∞–π–¥–µ–Ω—ã: {len(analysis.get('red_flags', []))}")
            
            self.test_results["tests"]["text_analysis"] = {
                "success": True,
                "message": "–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç",
                "performance": {
                    "analysis_time": analysis_time,
                    "toxicity_score": analysis.get('toxicity_score', 0),
                    "red_flags_count": len(analysis.get('red_flags', []))
                }
            }
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞: {e}"
            print(f"‚ùå {error_msg}")
            self.test_results["tests"]["text_analysis"] = {
                "success": False,
                "error": error_msg
            }
            self.test_results["errors"].append(error_msg)
            
    async def test_partner_profiling(self):
        """–¢–µ—Å—Ç –ø—Ä–æ—Ñ–∞–π–ª–∏–Ω–≥–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞"""
        print("\nüîç –¢–ï–°–¢ –ü–†–û–§–ê–ô–õ–ò–ù–ì–ê –ü–ê–†–¢–ù–ï–†–ê")
        print("=" * 50)
        
        try:
            # –¢–µ—Å—Ç–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
            test_answers = [
                {"question_id": "narcissism_q1", "question": "–ö–∞–∫ –≤–∞—à –ø–∞—Ä—Ç–Ω–µ—Ä —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –∫—Ä–∏—Ç–∏–∫—É?", "answer": "–ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ –æ—Ç–≤–µ—Ä–≥–∞–µ—Ç –∫—Ä–∏—Ç–∏–∫—É –∏ –æ–±–≤–∏–Ω—è–µ—Ç –≤ –æ—Ç–≤–µ—Ç"},
                {"question_id": "narcissism_q2", "question": "–ö–∞–∫ –ø–∞—Ä—Ç–Ω–µ—Ä –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —á—É–∂–∏–º —É—Å–ø–µ—Ö–∞–º?", "answer": "–ó–ª–∏—Ç—Å—è –∏ —Å—á–∏—Ç–∞–µ—Ç, —á—Ç–æ –µ–º—É –≤–µ–∑–µ—Ç –º–µ–Ω—å—à–µ"},
                {"question_id": "control_q1", "question": "–ö–∞–∫ –ø–∞—Ä—Ç–Ω–µ—Ä —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –≤–∞—à–∏ –ø–ª–∞–Ω—ã —Å –¥—Ä—É–∑—å—è–º–∏?", "answer": "–ö–∞—Ç–µ–≥–æ—Ä–∏—á–µ—Å–∫–∏ –ø—Ä–æ—Ç–∏–≤, –∑–∞–ø—Ä–µ—â–∞–µ—Ç –≤—Å—Ç—Ä–µ—á–∏"},
                {"question_id": "control_q2", "question": "–ö–∞–∫ –ø–∞—Ä—Ç–Ω–µ—Ä –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –≤–∞—à–∏–º –ª–∏—á–Ω—ã–º –≤–µ—â–∞–º?", "answer": "–ü–æ—Å—Ç–æ—è–Ω–Ω–æ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç –≤—Å–µ –º–æ–∏ –≤–µ—â–∏ –∏ –¥–µ–π—Å—Ç–≤–∏—è"},
                {"question_id": "gaslighting_q1", "question": "–ö–∞–∫ –ø–∞—Ä—Ç–Ω–µ—Ä –≤–µ–¥–µ—Ç —Å–µ–±—è –≤ —Å–ø–æ—Ä–∞—Ö?", "answer": "–û—Ç—Ä–∏—Ü–∞–µ—Ç –æ—á–µ–≤–∏–¥–Ω—ã–µ —Ñ–∞–∫—Ç—ã –∏ –∑–∞—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–º–Ω–µ–≤–∞—Ç—å—Å—è –≤ —Å–µ–±–µ"},
                {"question_id": "emotion_q1", "question": "–ö–∞–∫ –ø–∞—Ä—Ç–Ω–µ—Ä –≤—ã—Ä–∞–∂–∞–µ—Ç –≥–Ω–µ–≤?", "answer": "–ö—Ä–∏—á–∏—Ç, —É–≥—Ä–æ–∂–∞–µ—Ç, –º–æ–∂–µ—Ç —Ç–æ–ª–∫–Ω—É—Ç—å –∏–ª–∏ —É–¥–∞—Ä–∏—Ç—å"},
                {"question_id": "intimacy_q1", "question": "–ö–∞–∫ –ø–∞—Ä—Ç–Ω–µ—Ä –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –±–ª–∏–∑–æ—Å—Ç–∏?", "answer": "–ü—Ä–∏–Ω—É–∂–¥–∞–µ—Ç –∫ –±–ª–∏–∑–æ—Å—Ç–∏, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –æ—Ç–∫–∞–∑—ã"},
                {"question_id": "social_q1", "question": "–ö–∞–∫ –ø–∞—Ä—Ç–Ω–µ—Ä –≤–µ–¥–µ—Ç —Å–µ–±—è –≤ –æ–±—â–µ—Å—Ç–≤–µ?", "answer": "–£–Ω–∏–∂–∞–µ—Ç –º–µ–Ω—è –ø—Ä–∏ –¥—Ä—É–≥–∏—Ö, –¥–µ–ª–∞–µ—Ç –Ω–µ–ø—Ä–∏—è—Ç–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏"}
            ]
            
            print("ü§ñ –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞...")
            start_time = time.time()
            
            profile_analysis = await self.services['ai'].profile_partner_advanced(
                answers=test_answers,
                user_id=self.test_user_id,
                partner_name="–î–º–∏—Ç—Ä–∏–π –¢–µ—Å—Ç–æ–≤",
                partner_description="–ü–∞—Ä—Ç–Ω–µ—Ä —Å –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—é—â–∏–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ–º",
                technique="tree_of_thoughts"
            )
            
            analysis_time = time.time() - start_time
            
            print(f"‚úÖ –ü—Ä–æ—Ñ–∞–π–ª–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {analysis_time:.2f} —Å–µ–∫")
            print(f"üìä –†–∏—Å–∫ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–π: {profile_analysis.get('manipulation_risk', 0):.1f}/10")
            print(f"üö® –£—Ä–æ–≤–µ–Ω—å —Å—Ä–æ—á–Ω–æ—Å—Ç–∏: {profile_analysis.get('urgency_level', 'UNKNOWN')}")
            print(f"üö© –ö—Ä–∞—Å–Ω—ã–µ —Ñ–ª–∞–≥–∏: {len(profile_analysis.get('red_flags', []))}")
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
            print("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
            async with self.session_factory() as session:
                profile_service = ProfileService(session)
                await profile_service.create_profile_from_profiler(
                    user_id=self.test_user_id,
                    partner_name="–î–º–∏—Ç—Ä–∏–π –¢–µ—Å—Ç–æ–≤",
                    partner_description="–ü–∞—Ä—Ç–Ω–µ—Ä —Å –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—é—â–∏–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ–º",
                    partner_basic_info="32 –≥–æ–¥–∞, –º–µ–Ω–µ–¥–∂–µ—Ä, –≤—Å—Ç—Ä–µ—á–∞–µ–º—Å—è 2 –≥–æ–¥–∞",
                    questions=test_answers,
                    answers={answer['question_id']: 4 for answer in test_answers},  # –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫
                    analysis_result=profile_analysis
                )
            print("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
            
            self.test_results["tests"]["partner_profiling"] = {
                "success": True,
                "message": "–ü—Ä–æ—Ñ–∞–π–ª–∏–Ω–≥ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç",
                "performance": {
                    "analysis_time": analysis_time,
                    "manipulation_risk": profile_analysis.get('manipulation_risk', 0),
                    "red_flags_count": len(profile_analysis.get('red_flags', []))
                }
            }
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–æ—Ñ–∞–π–ª–∏–Ω–≥–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞: {e}"
            print(f"‚ùå {error_msg}")
            self.test_results["tests"]["partner_profiling"] = {
                "success": False,
                "error": error_msg
            }
            self.test_results["errors"].append(error_msg)
            
    async def test_pdf_generation(self):
        """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF –æ—Ç—á–µ—Ç–æ–≤"""
        print("\nüìÑ –¢–ï–°–¢ –ì–ï–ù–ï–†–ê–¶–ò–ò PDF –û–¢–ß–ï–¢–û–í")
        print("=" * 50)
        
        try:
            # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á–µ—Ç–∞
            test_analysis = {
                "psychological_profile": "–¢–µ—Å—Ç–æ–≤—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ —Å –≤—ã—Å–æ–∫–∏–º —É—Ä–æ–≤–Ω–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—è",
                "manipulation_risk": 8.5,
                "urgency_level": "HIGH",
                "red_flags": ["–ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—é—â–µ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ", "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –Ω–∞—Å–∏–ª–∏–µ", "–°–æ—Ü–∏–∞–ª—å–Ω–∞—è –∏–∑–æ–ª—è—Ü–∏—è"],
                "positive_traits": ["–£–º–µ–µ—Ç –≥–æ—Ç–æ–≤–∏—Ç—å", "–ò–º–µ–µ—Ç —Ä–∞–±–æ—Ç—É"],
                "relationship_advice": "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å –∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞–Ω–∏—Ü",
                "survival_guide": ["–°–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", "–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∑–∞ –ø–æ–º–æ—â—å—é"],
                "dark_triad": {"narcissism": 8.0, "machiavellianism": 7.5, "psychopathy": 6.0}
            }
            
            print("üìÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –æ—Ç—á–µ—Ç–∞...")
            start_time = time.time()
            
            pdf_bytes = await self.services['html_pdf'].generate_partner_report_html(
                analysis_data=test_analysis,
                user_id=self.test_user_id,
                partner_name="–î–º–∏—Ç—Ä–∏–π –¢–µ—Å—Ç–æ–≤"
            )
            
            generation_time = time.time() - start_time
            
            if pdf_bytes and len(pdf_bytes) > 0:
                print(f"‚úÖ PDF –æ—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∑–∞ {generation_time:.2f} —Å–µ–∫")
                print(f"üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {len(pdf_bytes)} –±–∞–π—Ç")
                
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ PDF
                with open("test_report.pdf", "wb") as f:
                    f.write(pdf_bytes)
                print("üíæ –¢–µ—Å—Ç–æ–≤—ã–π PDF —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ test_report.pdf")
                
            else:
                raise Exception("PDF –Ω–µ –±—ã–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
            
            self.test_results["tests"]["pdf_generation"] = {
                "success": True,
                "message": "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF —Ä–∞–±–æ—Ç–∞–µ—Ç",
                "performance": {
                    "generation_time": generation_time,
                    "file_size": len(pdf_bytes)
                }
            }
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF: {e}"
            print(f"‚ùå {error_msg}")
            self.test_results["tests"]["pdf_generation"] = {
                "success": False,
                "error": error_msg
            }
            self.test_results["errors"].append(error_msg)
            
    async def test_database_operations(self):
        """–¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        print("\nüóÑÔ∏è –¢–ï–°–¢ –û–ü–ï–†–ê–¶–ò–ô –° –ë–ê–ó–û–ô –î–ê–ù–ù–´–•")
        print("=" * 50)
        
        try:
            async with self.session_factory() as session:
                profile_service = ProfileService(session)
                
                # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                print("üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
                profiles = await profile_service.get_user_profiles(self.test_user_id)
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ—Ñ–∏–ª–µ–π: {len(profiles)}")
                
                if profiles:
                    profile = profiles[0]
                    print(f"üìä –ü–µ—Ä–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å: {profile.partner_name}, —Ä–∏—Å–∫: {profile.manipulation_risk:.1f}/10")
                    
                    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ñ–∏–ª–µ
                    print("üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏...")
                    detailed_profile = await profile_service.get_profile_by_id(profile.id, self.test_user_id)
                    if detailed_profile:
                        print("‚úÖ –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞")
                    else:
                        raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")
            
            self.test_results["tests"]["database_operations"] = {
                "success": True,
                "message": "–û–ø–µ—Ä–∞—Ü–∏–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞—é—Ç",
                "data": {
                    "profiles_count": len(profiles)
                }
            }
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ë–î: {e}"
            print(f"‚ùå {error_msg}")
            self.test_results["tests"]["database_operations"] = {
                "success": False,
                "error": error_msg
            }
            self.test_results["errors"].append(error_msg)
            
    async def test_bot_handlers(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –±–æ—Ç–∞ (—Å–∏–º—É–ª—è—Ü–∏—è)"""
        print("\nü§ñ –¢–ï–°–¢ –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í –ë–û–¢–ê")
        print("=" * 50)
        
        try:
            # –°–∏–º—É–ª—è—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
            print("üîß –°–∏–º—É–ª—è—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤...")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–º–ø—Ç–æ–≤
            from app.prompts.profiler_full_questions import get_all_questions, QUESTION_ORDER
            questions = get_all_questions()
            print(f"üìù –ó–∞–≥—Ä—É–∂–µ–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {len(questions)}")
            print(f"üìã –ü–æ—Ä—è–¥–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤: {len(QUESTION_ORDER)}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä
            from app.bot.keyboards.inline import profiler_menu_kb, get_profiler_question_keyboard
            menu_kb = profiler_menu_kb()
            print("‚å®Ô∏è –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            test_keyboard = get_profiler_question_keyboard(
                "test_question",
                ["–í–∞—Ä–∏–∞–Ω—Ç 1", "–í–∞—Ä–∏–∞–Ω—Ç 2", "–í–∞—Ä–∏–∞–Ω—Ç 3"]
            )
            print("‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞")
            
            self.test_results["tests"]["bot_handlers"] = {
                "success": True,
                "message": "–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–æ—Ç–∞ —Ä–∞–±–æ—Ç–∞—é—Ç",
                "data": {
                    "questions_loaded": len(questions),
                    "question_order": len(QUESTION_ORDER)
                }
            }
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –±–æ—Ç–∞: {e}"
            print(f"‚ùå {error_msg}")
            self.test_results["tests"]["bot_handlers"] = {
                "success": False,
                "error": error_msg
            }
            self.test_results["errors"].append(error_msg)
            
    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤"""
        print("\nüßπ –û–ß–ò–°–¢–ö–ê –ü–û–°–õ–ï –¢–ï–°–¢–û–í")
        print("=" * 50)
        
        try:
            # –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            print("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
            
            async with self.session_factory() as session:
                profile_service = ProfileService(session)
                
                # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–π
                profiles = await profile_service.get_user_profiles(self.test_user_id)
                for profile in profiles:
                    await profile_service.delete_profile(profile.id, self.test_user_id)
                print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ –ø—Ä–æ—Ñ–∏–ª–µ–π: {len(profiles)}")
            
            # –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ PDF
            if os.path.exists("test_report.pdf"):
                os.remove("test_report.pdf")
                print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π PDF —É–¥–∞–ª–µ–Ω")
            
            print("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")
            
    async def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üöÄ –ó–ê–ü–£–°–ö –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ê –ë–û–¢–ê")
        print("=" * 80)
        print(f"üìÖ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"üîß –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {self.test_user_id}")
        print("=" * 80)
        
        start_time = time.time()
        
        # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
        await self.initialize_services()
        await self.test_user_management()
        await self.test_text_analysis()
        await self.test_partner_profiling()
        await self.test_pdf_generation()
        await self.test_database_operations()
        await self.test_bot_handlers()
        await self.cleanup()
        
        total_time = time.time() - start_time
        
        # –ü–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        successful_tests = sum(1 for test in self.test_results["tests"].values() if test["success"])
        total_tests = len(self.test_results["tests"])
        success_rate = (successful_tests / total_tests) * 100 if total_tests > 0 else 0
        
        self.test_results["overall_success"] = success_rate == 100
        self.test_results["performance"]["total_time"] = total_time
        self.test_results["performance"]["success_rate"] = success_rate
        
        # –í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤
        print("\nüéØ –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 80)
        print(f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.2f} —Å–µ–∫")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {successful_tests}/{total_tests}")
        print(f"üìä –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
        
        if self.test_results["overall_success"]:
            print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        else:
            print("‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´")
            print("\nüêõ –û—à–∏–±–∫–∏:")
            for error in self.test_results["errors"]:
                print(f"   ‚Ä¢ {error}")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        with open("bot_test_results.json", "w", encoding="utf-8") as f:
            json.dump(self.test_results, f, ensure_ascii=False, indent=2)
        print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ bot_test_results.json")
        
        return self.test_results["overall_success"]


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = BotTester()
    success = await tester.run_all_tests()
    
    if success:
        print("\nüéä –ë–û–¢ –ì–û–¢–û–í –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ!")
        exit(0)
    else:
        print("\n‚ö†Ô∏è –ë–û–¢ –¢–†–ï–ë–£–ï–¢ –î–û–†–ê–ë–û–¢–ö–ò")
        exit(1)


if __name__ == "__main__":
    asyncio.run(main()) 
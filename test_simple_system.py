"""
–¢–µ—Å—Ç —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏–∑–∞
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É –ø—Ä–æ—Å—Ç–æ–≥–æ –Ω–æ –º–æ—â–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å Claude Sonnet 4
"""

import asyncio
import time
import json
from app.services.ai_service import ai_service
from app.core.config import settings


async def test_simple_analysis():
    """–¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞"""
    print("üîç –¢–µ—Å—Ç–∏—Ä—É—é –ø—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞...")
    
    test_text = """
    –ú–æ–π –ø–∞—Ä—Ç–Ω–µ—Ä –æ—á–µ–Ω—å –∑–∞–±–æ—Ç–ª–∏–≤—ã–π, –≤—Å–µ–≥–¥–∞ –ø–æ–º–æ–≥–∞–µ—Ç –º–Ω–µ —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏.
    –ò–Ω–æ–≥–¥–∞ –æ–Ω –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–º–Ω–æ–≥–æ —Ä–µ–≤–Ω–∏–≤—ã–º, –Ω–æ —ç—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –æ–Ω –º–µ–Ω—è –ª—é–±–∏—Ç.
    –û–Ω –≤—Å–µ–≥–¥–∞ –∑–Ω–∞–µ—Ç, —á—Ç–æ –ª—É—á—à–µ –¥–ª—è –º–µ–Ω—è, –∏ –ø–æ–º–æ–≥–∞–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è.
    """
    
    start_time = time.time()
    result = await ai_service.analyze_text(
        text=test_text,
        analysis_type="relationship",
        user_id=12345,
        use_cache=False
    )
    
    duration = time.time() - start_time
    
    print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {duration:.2f} —Å–µ–∫—É–Ω–¥")
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {result.get('analysis', 'N/A')[:200]}...")
    print(f"üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result.get('confidence', 0)}%")
    print(f"ü§ñ –ú–æ–¥–µ–ª—å: {result.get('ai_model_used', 'N/A')}")
    
    return result


async def test_partner_profiling():
    """–¢–µ—Å—Ç –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞"""
    print("\nüë§ –¢–µ—Å—Ç–∏—Ä—É—é –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞...")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã –∞–Ω–∫–µ—Ç—ã
    test_answers = [
        {
            "question": "–ö–∞–∫ –≤–∞—à –ø–∞—Ä—Ç–Ω–µ—Ä —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –≤–∞—à–∏ —É—Å–ø–µ—Ö–∏?",
            "answer": "–û–Ω –≤—Å–µ–≥–¥–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º–µ–Ω—è –∏ —Ä–∞–¥—É–µ—Ç—Å—è –º–æ–∏–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º. –ò–Ω–æ–≥–¥–∞ –¥–∞–∂–µ –±–æ–ª—å—à–µ –º–µ–Ω—è —Å–∞–º–æ–π!"
        },
        {
            "question": "–ö–∞–∫ –æ–Ω –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –≤–∞—à–∏–º –¥—Ä—É–∑—å—è–º?",
            "answer": "–ì–æ–≤–æ—Ä–∏—Ç, —á—Ç–æ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑ –Ω–∏—Ö –ø–ª–æ—Ö–æ –Ω–∞ –º–µ–Ω—è –≤–ª–∏—è—é—Ç. –î—É–º–∞—é, –æ–Ω –ø—Ä–æ—Å—Ç–æ –∑–∞–±–æ—Ç–∏—Ç—Å—è –æ–±–æ –º–Ω–µ."
        },
        {
            "question": "–ö–∞–∫ –ø—Ä–æ—Ö–æ–¥—è—Ç –≤–∞—à–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã?",
            "answer": "–û–Ω –æ—á–µ–Ω—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π, –º–æ–∂–µ—Ç –ø–æ–≤—ã—Å–∏—Ç—å –≥–æ–ª–æ—Å. –ù–æ –ø–æ—Ç–æ–º –≤—Å–µ–≥–¥–∞ –∏–∑–≤–∏–Ω—è–µ—Ç—Å—è –∏ –≥–æ–≤–æ—Ä–∏—Ç, —á—Ç–æ —ç—Ç–æ –æ—Ç –ª—é–±–≤–∏."
        },
        {
            "question": "–ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç –ª–∏ –æ–Ω –≤–∞—à–∏ —Ñ–∏–Ω–∞–Ω—Å—ã?",
            "answer": "–û–Ω –ª—É—á—à–µ —Ä–∞–∑–±–∏—Ä–∞–µ—Ç—Å—è –≤ –¥–µ–Ω—å–≥–∞—Ö, –ø–æ—ç—Ç–æ–º—É —É–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞—à–∏–º –±—é–¥–∂–µ—Ç–æ–º. –≠—Ç–æ —É–¥–æ–±–Ω–æ."
        },
        {
            "question": "–ö–∞–∫ –æ–Ω —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ?",
            "answer": "–ò–Ω–æ–≥–¥–∞ –≥–æ–≤–æ—Ä–∏—Ç, —á—Ç–æ —è —Å–ª–∏—à–∫–æ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞ –∏ –Ω–µ –º–æ–≥—É –º—ã—Å–ª–∏—Ç—å –ª–æ–≥–∏—á–µ—Å–∫–∏. –ù–∞–≤–µ—Ä–Ω–æ–µ, –æ–Ω –ø—Ä–∞–≤."
        }
    ]
    
    start_time = time.time()
    result = await ai_service.profile_partner(
        answers=test_answers,
        user_id=12345,
        partner_name="–ê–ª–µ–∫—Å–µ–π",
        partner_description="–ú–æ–π –±–æ–π—Ñ—Ä–µ–Ω–¥, 28 –ª–µ—Ç, —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ IT",
        use_cache=False
    )
    
    duration = time.time() - start_time
    
    print(f"‚úÖ –ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {duration:.2f} —Å–µ–∫—É–Ω–¥")
    print(f"üìä –†–∏—Å–∫: {result.get('overall_risk_score', 0)}/100")
    print(f"üö© –ö—Ä–∞—Å–Ω—ã–µ —Ñ–ª–∞–≥–∏: {len(result.get('red_flags', []))}")
    print(f"üí™ –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã: {len(result.get('strengths', []))}")
    print(f"üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result.get('confidence_level', 0)}%")
    print(f"‚ö†Ô∏è –£—Ä–æ–≤–µ–Ω—å —Å—Ä–æ—á–Ω–æ—Å—Ç–∏: {result.get('urgency_level', 'N/A')}")
    print(f"ü§ñ –ú–æ–¥–µ–ª—å: {result.get('ai_model_used', 'N/A')}")
    print(f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ~${result.get('cost_estimate', 0)}")
    
    # –î–µ—Ç–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥
    print(f"\nüìù –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å:")
    print(result.get('psychological_profile', 'N/A')[:300] + "...")
    
    print(f"\nüö© –ö—Ä–∞—Å–Ω—ã–µ —Ñ–ª–∞–≥–∏:")
    for flag in result.get('red_flags', []):
        print(f"  ‚Ä¢ {flag}")
    
    print(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    for rec in result.get('recommendations', [])[:3]:
        print(f"  ‚Ä¢ {rec}")
    
    print(f"\nüåü –†–µ–∑—é–º–µ:")
    print(result.get('summary', 'N/A'))
    
    return result


async def test_compatibility():
    """–¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    print("\nüíï –¢–µ—Å—Ç–∏—Ä—É—é –∞–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏...")
    
    user_profile = {
        "personality_traits": ["–≠–º–ø–∞—Ç–∏—á–Ω–æ—Å—Ç—å", "–ù–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å", "–ê–º–±–∏—Ü–∏–æ–∑–Ω–æ—Å—Ç—å"],
        "values": ["–°–µ–º—å—è", "–ö–∞—Ä—å–µ—Ä–∞", "–ß–µ—Å—Ç–Ω–æ—Å—Ç—å"],
        "communication_style": "–ü—Ä—è–º–∞—è –∏ –æ—Ç–∫—Ä—ã—Ç–∞—è"
    }
    
    partner_profile = {
        "personality_traits": ["–î–æ–º–∏–Ω–∞–Ω—Ç–Ω–æ—Å—Ç—å", "–ö–æ–Ω—Ç—Ä–æ–ª—å", "–•–∞—Ä–∏–∑–º–∞"],
        "red_flags": ["–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –º–∞–Ω–∏–ø—É–ª—è—Ü–∏—è", "–ò–∑–æ–ª—è—Ü–∏—è –æ—Ç –¥—Ä—É–∑–µ–π"],
        "overall_risk_score": 65
    }
    
    start_time = time.time()
    result = await ai_service.check_compatibility(
        user_profile=user_profile,
        partner_profile=partner_profile,
        user_id=12345,
        use_cache=False
    )
    
    duration = time.time() - start_time
    
    print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {duration:.2f} —Å–µ–∫—É–Ω–¥")
    print(f"üíï –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: {result.get('compatibility_score', 0)}%")
    print(f"üí™ –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã: {len(result.get('strengths', []))}")
    print(f"‚ö†Ô∏è –í—ã–∑–æ–≤—ã: {len(result.get('challenges', []))}")
    print(f"üîÆ –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª: {result.get('long_term_potential', 'N/A')}")
    
    return result


async def performance_test():
    """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    print("\n‚ö° –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
    
    test_answers = [
        {"question": "–¢–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å 1", "answer": "–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç 1"},
        {"question": "–¢–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å 2", "answer": "–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç 2"},
        {"question": "–¢–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å 3", "answer": "–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç 3"}
    ]
    
    # –¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏
    times = []
    for i in range(3):
        start_time = time.time()
        await ai_service.profile_partner(
            answers=test_answers,
            user_id=12345 + i,
            partner_name=f"–¢–µ—Å—Ç {i+1}",
            use_cache=False
        )
        duration = time.time() - start_time
        times.append(duration)
        print(f"  –ó–∞–ø—Ä–æ—Å {i+1}: {duration:.2f}—Å")
    
    avg_time = sum(times) / len(times)
    print(f"üìä –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å: {avg_time:.2f} —Å–µ–∫—É–Ω–¥")
    print(f"üí∞ –°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ~$0.08")
    
    return avg_time


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏–∑–∞")
    print("=" * 60)
    
    print(f"ü§ñ –ú–æ–¥–µ–ª—å: Claude Sonnet 4 —á–µ—Ä–µ–∑ OpenRouter")
    print(f"‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: –ü—Ä–æ—Å—Ç–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞")
    print(f"üîß Enhanced Analysis: {settings.ENHANCED_ANALYSIS}")
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        await test_simple_analysis()
        profile_result = await test_partner_profiling()
        await test_compatibility()
        avg_time = await performance_test()
        
        print("\n" + "=" * 60)
        print("üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 60)
        print(f"‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        print(f"‚ö° –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å: {avg_time:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∞: ~$0.08")
        print(f"üéØ –ö–∞—á–µ—Å—Ç–≤–æ: –í—ã—Å–æ–∫–æ–µ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –Ω–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞)")
        print(f"üöÄ –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å: –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É")
        
        # –û—Ü–µ–Ω–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        if avg_time < 20:
            print(f"üü¢ –°–∫–æ—Ä–æ—Å—Ç—å: –û–¢–õ–ò–ß–ù–û (< 20—Å)")
        elif avg_time < 30:
            print(f"üü° –°–∫–æ—Ä–æ—Å—Ç—å: –•–û–†–û–®–û (< 30—Å)")
        else:
            print(f"üî¥ –°–∫–æ—Ä–æ—Å—Ç—å: –ú–ï–î–õ–ï–ù–ù–û (> 30—Å)")
        
        risk_score = profile_result.get('overall_risk_score', 0)
        if risk_score > 0:
            print(f"üéØ –î–µ—Ç–µ–∫—Ü–∏—è —Ä–∏—Å–∫–æ–≤: –†–ê–ë–û–¢–ê–ï–¢ (–Ω–∞–π–¥–µ–Ω —Ä–∏—Å–∫ {risk_score}/100)")
        
        red_flags = len(profile_result.get('red_flags', []))
        if red_flags > 0:
            print(f"üö© –ö—Ä–∞—Å–Ω—ã–µ —Ñ–ª–∞–≥–∏: –†–ê–ë–û–¢–ê–ï–¢ (–Ω–∞–π–¥–µ–Ω–æ {red_flags} —Ñ–ª–∞–≥–æ–≤)")
        
        print(f"\nüí° –°–∏—Å—Ç–µ–º–∞ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–ø—Ä–æ—â–µ–Ω–∞ –∏ —É—Å–∫–æ—Ä–µ–Ω–∞!")
        print(f"üéâ –ì–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≤ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–µ")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(main()) 
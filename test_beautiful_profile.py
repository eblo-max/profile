#!/usr/bin/env python3
"""
Test beautiful HTML formatting of psychological profiles
"""

import asyncio
from app.services.html_pdf_service import HTMLPDFService

async def test_beautiful_profile():
    """Test beautiful HTML profile rendering"""
    
    print("üé® Testing beautiful HTML profile formatting...")
    
    # Initialize service
    pdf_service = HTMLPDFService()
    
    # High risk test data
    high_risk_data = {
        "manipulation_risk": 8.5,
        "overall_risk_score": 85.0,
        "psychological_profile": "–ö–æ—Ä–æ—Ç–∫–∏–π AI –ø—Ä–æ—Ñ–∏–ª—å",
        "personality_type": "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Ç–æ–∫—Å–∏—á–Ω—ã–π –Ω–∞—Ä—Ü–∏—Å—Å",
        "red_flags": [
            "–°–∏—Å—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å –≤—Å–µ—Ö –∞—Å–ø–µ–∫—Ç–æ–≤ –∂–∏–∑–Ω–∏",
            "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–∏–Ω—É–∂–¥–µ–Ω–∏–µ –∏ —à–∞–Ω—Ç–∞–∂",
            "–ò–∑–æ–ª—è—Ü–∏—è –æ—Ç –¥—Ä—É–∑–µ–π –∏ —Å–µ–º—å–∏"
        ],
        "block_scores": {
            "narcissism": 9.2,
            "control": 8.8,
            "gaslighting": 8.5,
            "emotion": 8.0,
            "intimacy": 7.5,
            "social": 6.8
        },
        "dark_triad": {
            "narcissism": 9.2,
            "machiavellianism": 8.8,
            "psychopathy": 7.1
        },
        "survival_guide": ["–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∑–∞ –ø–æ–º–æ—â—å—é –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ"]
    }
    
    # Low risk test data  
    low_risk_data = {
        "manipulation_risk": 1.5,
        "overall_risk_score": 15.0,
        "psychological_profile": "–ü–∞—Ä—Ç–Ω–µ—Ä –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–¥–æ—Ä–æ–≤—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã",
        "personality_type": "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –∑—Ä–µ–ª–∞—è –ª–∏—á–Ω–æ—Å—Ç—å",
        "red_flags": [],
        "block_scores": {
            "narcissism": 1.5,
            "control": 1.0,
            "gaslighting": 0.8,
            "emotion": 2.0,
            "intimacy": 1.5,
            "social": 1.2
        },
        "dark_triad": {
            "narcissism": 1.5,
            "machiavellianism": 1.0,
            "psychopathy": 0.8
        },
        "survival_guide": ["–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ä–∞–∑–≤–∏–≤–∞—Ç—å –∑–¥–æ—Ä–æ–≤—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è"]
    }
    
    print("\nüìÑ Generating BEAUTIFUL HIGH RISK PDF...")
    try:
        high_risk_pdf = await pdf_service.generate_partner_report_html(
            analysis_data=high_risk_data,
            user_id=789,
            partner_name="–ê–ª–µ–∫—Å–∞–Ω–¥—Ä"
        )
        
        with open("beautiful_high_risk.pdf", "wb") as f:
            f.write(high_risk_pdf)
        
        print(f"‚úÖ Beautiful high risk PDF: {len(high_risk_pdf)} bytes")
        
    except Exception as e:
        print(f"‚ùå High risk failed: {e}")
    
    print("\nüìÑ Generating BEAUTIFUL LOW RISK PDF...")
    try:
        low_risk_pdf = await pdf_service.generate_partner_report_html(
            analysis_data=low_risk_data,
            user_id=987,
            partner_name="–ï–ª–µ–Ω–∞"
        )
        
        with open("beautiful_low_risk.pdf", "wb") as f:
            f.write(low_risk_pdf)
        
        print(f"‚úÖ Beautiful low risk PDF: {len(low_risk_pdf)} bytes")
        
    except Exception as e:
        print(f"‚ùå Low risk failed: {e}")
    
    print("\nüîç Showing HTML output examples...")
    
    # Show high risk HTML
    high_risk_html = pdf_service._expand_psychological_profile(
        high_risk_data["psychological_profile"],
        "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä",
        85.0,
        high_risk_data
    )
    
    print(f"\nüìä High risk HTML preview (first 400 chars):")
    print(high_risk_html[:400] + "...")
    
    # Show low risk HTML
    low_risk_html = pdf_service._expand_psychological_profile(
        low_risk_data["psychological_profile"],
        "–ï–ª–µ–Ω–∞",
        15.0,
        low_risk_data
    )
    
    print(f"\nüìä Low risk HTML preview (first 400 chars):")
    print(low_risk_html[:400] + "...")
    
    print("\n" + "="*50)
    print("üéâ BEAUTIFUL FORMATTING COMPLETE!")
    print("\nüìä Generated files:")
    print("   1. beautiful_high_risk.pdf - Critical case with HTML formatting")
    print("   2. beautiful_low_risk.pdf - Healthy case with HTML formatting")
    
    print("\n‚ú® Key improvements:")
    print("   ‚úÖ HTML headers instead of ## symbols")
    print("   ‚úÖ Proper section dividers with colors")
    print("   ‚úÖ Beautiful lists instead of plain text")
    print("   ‚úÖ Emphasized quotes with <em> tags")
    print("   ‚úÖ Strong highlights with <strong> tags")
    print("   ‚úÖ Color-coded sections by risk level")
    
    print("\nüìñ Now open the PDF files to see the beautiful formatting!")

if __name__ == "__main__":
    asyncio.run(test_beautiful_profile()) 
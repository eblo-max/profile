#!/usr/bin/env python3
"""
Debug Claude's raw response structure for storytelling analysis
"""

import asyncio
import json
from app.services.ai_service import AIService
from app.utils.helpers import extract_json_from_text, safe_json_loads

async def debug_claude_response():
    """Debug Claude's structured response"""
    
    # Test data
    test_answers = [
        {
            "question": "–ö–∞–∫ –≤–∞—à –ø–∞—Ä—Ç–Ω–µ—Ä —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –∫—Ä–∏—Ç–∏–∫—É?",
            "answer": "–û–Ω –æ—á–µ–Ω—å –∑–ª–∏—Ç—Å—è –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç –∫—Ä–∏—á–∞—Ç—å. –ì–æ–≤–æ—Ä–∏—Ç, —á—Ç–æ —è –≤—Å–µ–≥–¥–∞ –≤—Å—ë –¥–µ–ª–∞—é –Ω–µ —Ç–∞–∫.",
            "question_id": 1
        },
        {
            "question": "–ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç –ª–∏ –æ–Ω –≤–∞—à–∏ —Ñ–∏–Ω–∞–Ω—Å—ã?",
            "answer": "–î–∞, –æ–Ω –∑–∞–±–∏—Ä–∞–µ—Ç –≤—Å—é –∑–∞—Ä–ø–ª–∞—Ç—É –∏ –¥–∞–µ—Ç –º–Ω–µ —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–∞–º–æ–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ.",
            "question_id": 2
        },
        {
            "question": "–ö–∞–∫ –æ–Ω –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –≤–∞—à–∏–º –¥—Ä—É–∑—å—è–º?",
            "answer": "–û–Ω –≥–æ–≤–æ—Ä–∏—Ç, —á—Ç–æ –æ–Ω–∏ –ø–ª–æ—Ö–æ –≤–ª–∏—è—é—Ç –Ω–∞ –º–µ–Ω—è, –∏ —è –ø–æ—á—Ç–∏ –Ω–µ –æ–±—â–∞—é—Å—å —Å –Ω–∏–º–∏.",
            "question_id": 3
        }
    ]
    
    ai_service = AIService()
    
    try:
        print("üîç –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∞–Ω–∞–ª–∏–∑ —Å storytelling —Ç–µ—Ö–Ω–∏–∫–æ–π...")
        result = await ai_service.profile_partner_advanced(
            answers=test_answers,
            user_id=999,
            partner_name="–ê–ª–µ–∫—Å–µ–π",
            partner_description="–ú—É–∂, 35 –ª–µ—Ç",
            technique="storytelling",
            use_cache=False
        )
        
        print("\n" + "="*60)
        print("üß† –†–ï–ó–£–õ–¨–¢–ê–¢ –ê–ù–ê–õ–ò–ó–ê:")
        print("="*60)
        
        print(f"üìä –†–∞–∑–º–µ—Ä –ø—Ä–æ—Ñ–∏–ª—è: {len(result.get('psychological_profile', ''))}")
        print(f"üìä –ú–µ—Ç–æ–¥ –ø–∞—Ä—Å–∏–Ω–≥–∞: {result.get('parsing_method', 'unknown')}")
        print(f"üìä Red flags: {len(result.get('red_flags', []))}")
        print(f"üìä –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã: {len(result.get('personalized_insights', []))}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if 'structured_analysis' in result:
            structured = result['structured_analysis']
            print(f"\nüèóÔ∏è –°–¢–†–£–ö–¢–£–†–ò–†–û–í–ê–ù–ù–´–ï –î–ê–ù–ù–´–ï:")
            print(f"   Core traits: {len(structured.get('core_traits', []))}")
            print(f"   Behavioral patterns: {len(structured.get('behavioral_patterns', []))}")
            print(f"   Relationship dynamics: {len(structured.get('relationship_dynamics', []))}")
            
            # –î–µ—Ç–∞–ª–∏ –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
            print(f"\nüìù –î–ï–¢–ê–õ–ò –°–¢–†–£–ö–¢–£–†–ò–†–û–í–ê–ù–ù–´–• –î–ê–ù–ù–´–•:")
            for trait in structured.get('core_traits', []):
                print(f"   - Core trait: {trait}")
            
            for pattern in structured.get('behavioral_patterns', []):
                print(f"   - Behavioral pattern: {pattern}")
                
            for dynamic in structured.get('relationship_dynamics', []):
                print(f"   - Relationship dynamic: {dynamic}")
        
        print(f"\nüìñ –ü–†–ï–í–¨–Æ STORYTELLING –ü–†–û–§–ò–õ–Ø:")
        print("-" * 60)
        profile_text = result.get('psychological_profile', '')
        print(profile_text[:1000])
        if len(profile_text) > 1000:
            print("...")
        print("-" * 60)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        print(f"\nüé≠ –ü–†–û–í–ï–†–ö–ê STORYTELLING –≠–õ–ï–ú–ï–ù–¢–û–í:")
        profile_text = result.get('psychological_profile', '')
        
        has_dialogues = '**' in profile_text and ':' in profile_text
        has_emotions = any(word in profile_text.lower() for word in ['—á—É–≤—Å—Ç–≤—É–µ—Ç–µ', '—ç–º–æ—Ü–∏', '–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ', '–ø–µ—Ä–µ–∂–∏–≤–∞–µ—Ç–µ'])
        has_scenarios = any(word in profile_text.lower() for word in ['—Å—Ü–µ–Ω–∞—Ä–∏–π', '–ø—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ', '—Å–∏—Ç—É–∞—Ü–∏—è'])
        has_partner_name = '–ê–ª–µ–∫—Å–µ–π' in profile_text
        
        print(f"   üì¢ –ï—Å—Ç—å –¥–∏–∞–ª–æ–≥–∏: {'‚úÖ' if has_dialogues else '‚ùå'}")
        print(f"   üòä –ï—Å—Ç—å —ç–º–æ—Ü–∏–∏: {'‚úÖ' if has_emotions else '‚ùå'}")
        print(f"   üé¨ –ï—Å—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–∏: {'‚úÖ' if has_scenarios else '‚ùå'}")
        print(f"   üë§ –ï—Å—Ç—å –∏–º—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞: {'‚úÖ' if has_partner_name else '‚ùå'}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–ª–æ–≤
        word_count = len(profile_text.split())
        print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   –°–∏–º–≤–æ–ª–æ–≤: {len(profile_text)}")
        print(f"   –°–ª–æ–≤: {word_count}")
        print(f"   –ö–∞—á–µ—Å—Ç–≤–æ: {'‚úÖ –•–û–†–û–®–û' if word_count >= 1000 else '‚ùå –ú–ê–õ–û'}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(debug_claude_response()) 
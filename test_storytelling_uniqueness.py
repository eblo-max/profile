#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ storytelling —Ç–µ—Ö–Ω–∏–∫–∏
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ AI –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
"""

import asyncio
import os
import sys
import json
from datetime import datetime
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, str(Path(__file__).parent))

from app.services.ai_service import AIService
from app.services.html_pdf_service import HTMLPDFService

class StorytellingUniquenessTest:
    """–¢–µ—Å—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ storytelling —Ç–µ—Ö–Ω–∏–∫–∏"""
    
    def __init__(self):
        self.ai_service = AIService()
        self.pdf_service = HTMLPDFService()
        self.test_results = {}
        
    def create_test_scenarios(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ä–∞–∑–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏"""
        
        # –°—Ü–µ–Ω–∞—Ä–∏–π 1: –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ - –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—é—â–∏–π –Ω–∞—Ä—Ü–∏—Å—Å
        scenario1 = {
            "name": "–ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—é—â–∏–π –Ω–∞—Ä—Ü–∏—Å—Å",
            "partner_name": "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ü–µ—Ç—Ä–æ–≤",
            "description": "–£—Å–ø–µ—à–Ω—ã–π –±–∏–∑–Ω–µ—Å–º–µ–Ω, 35 –ª–µ—Ç",
            "answers": [
                {"question": "–ö–æ–Ω—Ç—Ä–æ–ª—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤", "answer": "–î–∞, –æ–Ω –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç –≤—Å–µ –º–æ–∏ –¥–µ–Ω—å–≥–∏, –Ω–µ –¥–∞—ë—Ç –º–Ω–µ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –ø–æ–∫—É–ø–∞—Ç—å –¥–∞–∂–µ –º–µ–ª–æ—á–∏"},
                {"question": "–ö—Ä–∏—Ç–∏–∫–∞ –≤–Ω–µ—à–Ω–æ—Å—Ç–∏", "answer": "–î–∞, –æ–Ω –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –∫—Ä–∏—Ç–∏–∫—É–µ—Ç –º–æ–π –≤–µ—Å, –≥–æ–≤–æ—Ä–∏—Ç —á—Ç–æ —è —Ç–æ–ª—Å—Ç–∞—è –∏ –Ω–µ–ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–∞—è"},
                {"question": "–ò–∑–æ–ª—è—Ü–∏—è –æ—Ç –¥—Ä—É–∑–µ–π", "answer": "–î–∞, –æ–Ω –∑–∞–ø—Ä–µ—Ç–∏–ª –º–Ω–µ –æ–±—â–∞—Ç—å—Å—è —Å –ø–æ–¥—Ä—É–≥–∞–º–∏, –≥–æ–≤–æ—Ä–∏—Ç —á—Ç–æ –æ–Ω–∏ –ø–ª–æ—Ö–æ –Ω–∞ –º–µ–Ω—è –≤–ª–∏—è—é—Ç"},
                {"question": "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —à–∞–Ω—Ç–∞–∂", "answer": "–î–∞, –æ–Ω —É–≥—Ä–æ–∂–∞–µ—Ç —É–π—Ç–∏ –∫ –¥—Ä—É–≥–æ–π, –µ—Å–ª–∏ —è –Ω–µ –±—É–¥—É –µ–≥–æ —Å–ª—É—à–∞—Ç—å—Å—è"},
                {"question": "–ö–æ–Ω—Ç—Ä–æ–ª—å –≤—Ä–µ–º–µ–Ω–∏", "answer": "–î–∞, –æ–Ω —Ç—Ä–µ–±—É–µ—Ç –æ—Ç—á—ë—Ç –∑–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É, –∑–≤–æ–Ω–∏—Ç –∫–∞–∂–¥—ã–µ –ø–æ–ª—á–∞—Å–∞"},
                {"question": "–£–Ω–∏–∂–µ–Ω–∏–µ –ø—É–±–ª–∏—á–Ω–æ", "answer": "–î–∞, –æ–Ω –º–æ–∂–µ—Ç –Ω–∞–∫—Ä–∏—á–∞—Ç—å –Ω–∞ –º–µ–Ω—è –ø—Ä–∏ –¥—Ä—É–≥–∏—Ö –ª—é–¥—è—Ö, —É–Ω–∏–∑–∏—Ç—å –ø—Ä–∏ –¥–µ—Ç—è—Ö"},
                {"question": "–†–µ–≤–Ω–æ—Å—Ç—å", "answer": "–î–∞, –æ–Ω —Ä–µ–≤–Ω—É–µ—Ç –º–µ–Ω—è –∫–æ –≤—Å–µ–º –º—É–∂—á–∏–Ω–∞–º, –≤–∫–ª—é—á–∞—è –∫–æ–ª–ª–µ–≥ –∏ —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤"},
                {"question": "–ì–∞–∑–ª–∞–π—Ç–∏–Ω–≥", "answer": "–î–∞, –æ–Ω –≥–æ–≤–æ—Ä–∏—Ç —á—Ç–æ —è –≤—Å—ë –≤—ã–¥—É–º—ã–≤–∞—é, —á—Ç–æ —É –º–µ–Ω—è –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–∞–º—è—Ç—å—é"},
                {"question": "–§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–≥—Ä–µ—Å—Å–∏—è", "answer": "–î–∞, –æ–Ω –º–æ–∂–µ—Ç —Ç–æ–ª–∫–Ω—É—Ç—å, —Å—Ö–≤–∞—Ç–∏—Ç—å –∑–∞ —Ä—É–∫—É, –±—Ä–æ—Å–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç"},
                {"question": "–ö–æ–Ω—Ç—Ä–æ–ª—å —Å–≤—è–∑–∏", "answer": "–î–∞, –æ–Ω –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –º–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω, —á–∏—Ç–∞–µ—Ç –ø–µ—Ä–µ–ø–∏—Å–∫–∏, —Ç—Ä–µ–±—É–µ—Ç –ø–∞—Ä–æ–ª–∏ –æ—Ç –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"}
            ]
        }
        
        # –°—Ü–µ–Ω–∞—Ä–∏–π 2: –°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫ - —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω—ã–π
        scenario2 = {
            "name": "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω—ã–π",
            "partner_name": "–î–º–∏—Ç—Ä–∏–π –°–∏–¥–æ—Ä–æ–≤", 
            "description": "–¢–≤–æ—Ä—á–µ—Å–∫–∞—è –ª–∏—á–Ω–æ—Å—Ç—å, 28 –ª–µ—Ç",
            "answers": [
                {"question": "–ö–æ–Ω—Ç—Ä–æ–ª—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤", "answer": "–ò–Ω–æ–≥–¥–∞, –æ–Ω —Ö–æ—á–µ—Ç –∑–Ω–∞—Ç—å –Ω–∞ —á—Ç–æ —è —Ç—Ä–∞—á—É –¥–µ–Ω—å–≥–∏"},
                {"question": "–ö—Ä–∏—Ç–∏–∫–∞ –≤–Ω–µ—à–Ω–æ—Å—Ç–∏", "answer": "–ò–Ω–æ–≥–¥–∞ –¥–µ–ª–∞–µ—Ç –∫–æ–ª–∫–∏–µ –∑–∞–º–µ—á–∞–Ω–∏—è –æ –º–æ–µ–π –æ–¥–µ–∂–¥–µ"},
                {"question": "–ò–∑–æ–ª—è—Ü–∏—è –æ—Ç –¥—Ä—É–∑–µ–π", "answer": "–ù–µ –∑–∞–ø—Ä–µ—â–∞–µ—Ç, –Ω–æ –Ω–µ –ª—é–±–∏—Ç –∫–æ–≥–¥–∞ —è –≤—Å—Ç—Ä–µ—á–∞—é—Å—å —Å –ø–æ–¥—Ä—É–≥–∞–º–∏"},
                {"question": "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —à–∞–Ω—Ç–∞–∂", "answer": "–î–∞, –æ–Ω –º–æ–∂–µ—Ç —É–≥—Ä–æ–∂–∞—Ç—å —Ä–∞—Å—Å—Ç–∞—Ç—å—Å—è –≤ –ø—ã–ª—É —Å—Å–æ—Ä—ã"},
                {"question": "–ö–æ–Ω—Ç—Ä–æ–ª—å –≤—Ä–µ–º–µ–Ω–∏", "answer": "–ù–µ—Ç, –Ω–æ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –µ—Å–ª–∏ —è –¥–æ–ª–≥–æ –Ω–µ –æ—Ç–≤–µ—á–∞—é"},
                {"question": "–£–Ω–∏–∂–µ–Ω–∏–µ –ø—É–±–ª–∏—á–Ω–æ", "answer": "–ò–Ω–æ–≥–¥–∞ –º–æ–∂–µ—Ç –ø–æ–≤—ã—Å–∏—Ç—å –≥–æ–ª–æ—Å –ø—Ä–∏ –¥—Ä—É–≥–∏—Ö"},
                {"question": "–†–µ–≤–Ω–æ—Å—Ç—å", "answer": "–î–∞, –æ–Ω –æ—á–µ–Ω—å —Ä–µ–≤–Ω–∏–≤—ã–π, –Ω–æ –ø—ã—Ç–∞–µ—Ç—Å—è —ç—Ç–æ —Å–∫—Ä—ã–≤–∞—Ç—å"},
                {"question": "–ì–∞–∑–ª–∞–π—Ç–∏–Ω–≥", "answer": "–ò–Ω–æ–≥–¥–∞ –≥–æ–≤–æ—Ä–∏—Ç —á—Ç–æ —è –ø—Ä–µ—É–≤–µ–ª–∏—á–∏–≤–∞—é"},
                {"question": "–§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–≥—Ä–µ—Å—Å–∏—è", "answer": "–ù–µ—Ç, –Ω–æ –º–æ–∂–µ—Ç —Ö–ª–æ–ø–Ω—É—Ç—å –¥–≤–µ—Ä—å—é –∏–ª–∏ —É–¥–∞—Ä–∏—Ç—å –ø–æ —Å—Ç–æ–ª—É"},
                {"question": "–ö–æ–Ω—Ç—Ä–æ–ª—å —Å–≤—è–∑–∏", "answer": "–ù–µ—Ç, –Ω–æ –ª—é–±–∏—Ç –∑–∞–≥–ª—è–¥—ã–≤–∞—Ç—å –≤ –º–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω"}
            ]
        }
        
        # –°—Ü–µ–Ω–∞—Ä–∏–π 3: –ù–∏–∑–∫–∏–π —Ä–∏—Å–∫ - –∑–¥–æ—Ä–æ–≤—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è
        scenario3 = {
            "name": "–ó–¥–æ—Ä–æ–≤—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è",
            "partner_name": "–ú–∞–∫—Å–∏–º –õ–µ–±–µ–¥–µ–≤",
            "description": "–ü—Å–∏—Ö–æ–ª–æ–≥, 32 –≥–æ–¥–∞",
            "answers": [
                {"question": "–ö–æ–Ω—Ç—Ä–æ–ª—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤", "answer": "–ù–µ—Ç, –º—ã –æ–±—Å—É–∂–¥–∞–µ–º –∫—Ä—É–ø–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏, –Ω–æ –∫–∞–∂–¥—ã–π —Ç—Ä–∞—Ç–∏—Ç –∫–∞–∫ —Ö–æ—á–µ—Ç"},
                {"question": "–ö—Ä–∏—Ç–∏–∫–∞ –≤–Ω–µ—à–Ω–æ—Å—Ç–∏", "answer": "–ù–µ—Ç, –æ–Ω –≤—Å–µ–≥–¥–∞ –≥–æ–≤–æ—Ä–∏—Ç –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç—ã –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º–µ–Ω—è"},
                {"question": "–ò–∑–æ–ª—è—Ü–∏—è –æ—Ç –¥—Ä—É–∑–µ–π", "answer": "–ù–µ—Ç, –æ–Ω –ø–æ–æ—â—Ä—è–µ—Ç –º–æ–∏ –¥—Ä—É–∂–µ—Å–∫–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è"},
                {"question": "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —à–∞–Ω—Ç–∞–∂", "answer": "–ù–µ—Ç, –º—ã —Ä–µ—à–∞–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã —á–µ—Ä–µ–∑ –æ—Ç–∫—Ä—ã—Ç—ã–π –¥–∏–∞–ª–æ–≥"},
                {"question": "–ö–æ–Ω—Ç—Ä–æ–ª—å –≤—Ä–µ–º–µ–Ω–∏", "answer": "–ù–µ—Ç, —É –∫–∞–∂–¥–æ–≥–æ –µ—Å—Ç—å —Å–≤–æ—ë –ª–∏—á–Ω–æ–µ –≤—Ä–µ–º—è"},
                {"question": "–£–Ω–∏–∂–µ–Ω–∏–µ –ø—É–±–ª–∏—á–Ω–æ", "answer": "–ù–µ—Ç, –æ–Ω –≤—Å–µ–≥–¥–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º–µ–Ω—è –≤ –æ–±—â–µ—Å—Ç–≤–µ"},
                {"question": "–†–µ–≤–Ω–æ—Å—Ç—å", "answer": "–ù–µ—Ç, –æ–Ω –¥–æ–≤–µ—Ä—è–µ—Ç –º–Ω–µ –∏ –Ω–µ –ø—Ä–æ—è–≤–ª—è–µ—Ç —Ä–µ–≤–Ω–æ—Å—Ç—å"},
                {"question": "–ì–∞–∑–ª–∞–π—Ç–∏–Ω–≥", "answer": "–ù–µ—Ç, –æ–Ω –≤—Å–µ–≥–¥–∞ –ø—Ä–∏–∑–Ω–∞—ë—Ç –º–æ–∏ —á—É–≤—Å—Ç–≤–∞ –≤–∞–ª–∏–¥–Ω—ã–º–∏"},
                {"question": "–§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–≥—Ä–µ—Å—Å–∏—è", "answer": "–ù–µ—Ç, –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –±—ã–ª–æ –Ω–∏–∫–∞–∫–∏—Ö –ø—Ä–æ—è–≤–ª–µ–Ω–∏–π –∞–≥—Ä–µ—Å—Å–∏–∏"},
                {"question": "–ö–æ–Ω—Ç—Ä–æ–ª—å —Å–≤—è–∑–∏", "answer": "–ù–µ—Ç, —É –Ω–∞—Å –ø–æ–ª–Ω–∞—è –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å –≤ –ª–∏—á–Ω—ã—Ö –≤–µ—â–∞—Ö"}
            ]
        }
        
        return [scenario1, scenario2, scenario3]
    
    async def test_storytelling_technique(self, scenario):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ storytelling —Ç–µ—Ö–Ω–∏–∫–∏"""
        print(f"\nüé≠ –¢–µ—Å—Ç–∏—Ä—É—é storytelling –¥–ª—è: {scenario['name']}")
        
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º storytelling —Ç–µ—Ö–Ω–∏–∫–∏
            analysis = await self.ai_service.profile_partner_advanced(
                answers=scenario["answers"],
                user_id=999,
                partner_name=scenario["partner_name"],
                partner_description=scenario["description"],
                technique="storytelling",  # –ò–°–ü–û–õ–¨–ó–£–ï–ú –ù–û–í–£–Æ –¢–ï–•–ù–ò–ö–£!
                use_cache=False
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
            psychological_profile = analysis.get("psychological_profile", "")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ storytelling
            storytelling_quality = self._analyze_storytelling_quality(
                psychological_profile, 
                scenario["partner_name"]
            )
            
            print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è {scenario['partner_name']}")
            print(f"üìä –†–∞–∑–º–µ—Ä –∞–Ω–∞–ª–∏–∑–∞: {len(psychological_profile)} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"üéØ –ö–∞—á–µ—Å—Ç–≤–æ storytelling: {storytelling_quality['score']}/10")
            
            return {
                "scenario": scenario["name"],
                "analysis": analysis,
                "storytelling_quality": storytelling_quality,
                "profile_text": psychological_profile
            }
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ {scenario['name']}: {e}")
            return None
    
    def _analyze_storytelling_quality(self, text: str, partner_name: str) -> dict:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ storytelling –≤ —Ç–µ–∫—Å—Ç–µ"""
        
        quality_score = 0
        max_score = 10
        details = []
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–º–µ–Ω–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ (1 –±–∞–ª–ª)
        if partner_name in text:
            quality_score += 1
            details.append("‚úÖ –ò–º—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è")
        else:
            details.append("‚ùå –ò–º—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è")
            
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∏–∞–ª–æ–≥–æ–≤ (2 –±–∞–ª–ª–∞)
        dialogue_markers = ['"', '¬´', '¬ª', "–≥–æ–≤–æ—Ä–∏—Ç:", "—Å–∫–∞–∑–∞–ª:", "–æ—Ç–≤–µ—á–∞–µ—Ç:"]
        dialogue_found = any(marker in text for marker in dialogue_markers)
        if dialogue_found:
            quality_score += 2
            details.append("‚úÖ –ù–∞–π–¥–µ–Ω—ã –¥–∏–∞–ª–æ–≥–∏")
        else:
            details.append("‚ùå –î–∏–∞–ª–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ (2 –±–∞–ª–ª–∞)
        scenario_markers = ["–∫–æ–≥–¥–∞", "–Ω–∞–ø—Ä–∏–º–µ—Ä", "–ø—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ", "—Å–∏—Ç—É–∞—Ü–∏—è", "—Å–ª—É—á–∞–π"]
        scenario_count = sum(1 for marker in scenario_markers if marker in text.lower())
        if scenario_count >= 3:
            quality_score += 2
            details.append(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã —Å—Ü–µ–Ω–∞—Ä–∏–∏: {scenario_count}")
        else:
            details.append(f"‚ùå –ú–∞–ª–æ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: {scenario_count}")
            
        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é (2 –±–∞–ª–ª–∞)
        emotion_markers = ["—á—É–≤—Å—Ç–≤—É–µ—Ç", "–∏—Å–ø—ã—Ç—ã–≤–∞–µ—Ç", "–ø–µ—Ä–µ–∂–∏–≤–∞–µ—Ç", "–±–æ–∏—Ç—Å—è", "–∑–ª–∏—Ç—Å—è", "—Ä–∞–¥—É–µ—Ç—Å—è"]
        emotion_count = sum(1 for marker in emotion_markers if marker in text.lower())
        if emotion_count >= 5:
            quality_score += 2
            details.append(f"‚úÖ –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è: {emotion_count}")
        else:
            details.append(f"‚ùå –ú–∞–ª–æ —ç–º–æ—Ü–∏–π: {emotion_count}")
            
        # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∂–∏–≤–æ—Å—Ç—å –ø–æ–≤–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è (1 –±–∞–ª–ª)
        vivid_markers = ["–ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ", "–º–µ–¥–ª–µ–Ω–Ω–æ", "–Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ", "–≤–¥—Ä—É–≥", "–∑–∞—Ç–µ–º"]
        vivid_count = sum(1 for marker in vivid_markers if marker in text.lower())
        if vivid_count >= 2:
            quality_score += 1
            details.append(f"‚úÖ –ñ–∏–≤–æ–µ –ø–æ–≤–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ: {vivid_count}")
        else:
            details.append(f"‚ùå –°—Ç–∞—Ç–∏—á–Ω–æ–µ –ø–æ–≤–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ: {vivid_count}")
            
        # 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∏ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é (2 –±–∞–ª–ª–∞)
        word_count = len(text.split())
        if word_count >= 800:
            quality_score += 2
            details.append(f"‚úÖ –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑: {word_count} —Å–ª–æ–≤")
        elif word_count >= 400:
            quality_score += 1
            details.append(f"‚ö†Ô∏è –°—Ä–µ–¥–Ω–∏–π –∞–Ω–∞–ª–∏–∑: {word_count} —Å–ª–æ–≤")
        else:
            details.append(f"‚ùå –ö—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑: {word_count} —Å–ª–æ–≤")
            
        return {
            "score": quality_score,
            "max_score": max_score,
            "percentage": (quality_score / max_score) * 100,
            "details": details
        }
    
    def _analyze_uniqueness(self, results: list) -> dict:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –º–µ–∂–¥—É —Ä–∞–∑–Ω—ã–º–∏ –ø—Ä–æ—Ñ–∏–ª—è–º–∏"""
        
        print("\nüîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
        
        profiles = [result["profile_text"] for result in results if result]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –º–µ–∂–¥—É –ø—Ä–æ—Ñ–∏–ª—è–º–∏
        uniqueness_score = 0
        max_score = 100
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö –∏–º–µ–Ω
        names_used = set()
        for result in results:
            if result and result.get("scenario"):
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –∏–∑ —Å—Ü–µ–Ω–∞—Ä–∏—è
                scenario_name = result["scenario"]
                names_used.add(scenario_name)
        
        if len(names_used) == len(results):
            uniqueness_score += 20
            print("‚úÖ –í—Å–µ –∏–º–µ–Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã")
        else:
            print("‚ùå –ò–º–µ–Ω–∞ –ø–æ–≤—Ç–æ—Ä—è—é—Ç—Å—è")
            
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–∏—è –≤ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–∏
        if len(profiles) >= 2:
            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
            for i, profile1 in enumerate(profiles):
                for j, profile2 in enumerate(profiles[i+1:], i+1):
                    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
                    sentences1 = set(profile1.split('.'))
                    sentences2 = set(profile2.split('.'))
                    
                    # –í—ã—á–∏—Å–ª—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ
                    common_sentences = sentences1.intersection(sentences2)
                    total_sentences = len(sentences1.union(sentences2))
                    
                    if total_sentences > 0:
                        similarity = len(common_sentences) / total_sentences
                        uniqueness_score += max(0, 30 - (similarity * 100))
                        
                        print(f"üìä –°—Ö–æ–¥—Å—Ç–≤–æ –ø—Ä–æ—Ñ–∏–ª–µ–π {i+1} –∏ {j+1}: {similarity:.1%}")
                        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–∏—è –≤ storytelling –∫–∞—á–µ—Å—Ç–≤–µ
        storytelling_scores = [result["storytelling_quality"]["score"] for result in results if result]
        if len(set(storytelling_scores)) > 1:
            uniqueness_score += 25
            print("‚úÖ –†–∞–∑–ª–∏—á–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ storytelling")
        else:
            print("‚ùå –û–¥–∏–Ω–∞–∫–æ–≤–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ storytelling")
            
        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö —Ç–µ—Ö–Ω–∏–∫
        different_techniques = True
        for result in results:
            if result and "—Å—Ç–∞—Ç–∏—á–Ω—ã–π —à–∞–±–ª–æ–Ω" in result["profile_text"].lower():
                different_techniques = False
                break
                
        if different_techniques:
            uniqueness_score += 25
            print("‚úÖ –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ö–Ω–∏–∫–∏")
        else:
            print("‚ùå –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å—Ç–∞—Ç–∏—á–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã")
            
        return {
            "uniqueness_score": uniqueness_score,
            "max_score": max_score,
            "percentage": (uniqueness_score / max_score) * 100,
            "profiles_count": len(profiles)
        }
    
    async def test_pdf_generation(self, analysis, partner_name):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é PDF —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º"""
        print(f"\nüìÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é PDF –¥–ª—è {partner_name}...")
        
        try:
            pdf_bytes = await self.pdf_service.generate_partner_report_html(
                analysis_data=analysis,
                user_id=999,
                partner_name=partner_name
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º PDF
            safe_name = partner_name.replace(" ", "_").replace(".", "")
            pdf_path = f"storytelling_test_{safe_name}.pdf"
            
            with open(pdf_path, "wb") as f:
                f.write(pdf_bytes)
                
            print(f"‚úÖ PDF —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {pdf_path}")
            print(f"üìä –†–∞–∑–º–µ—Ä: {len(pdf_bytes)} –±–∞–π—Ç ({len(pdf_bytes)/1024:.1f} KB)")
            
            return {
                "pdf_path": pdf_path,
                "pdf_size": len(pdf_bytes),
                "success": True
            }
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF: {e}")
            return {
                "pdf_path": None,
                "pdf_size": 0,
                "success": False,
                "error": str(e)
            }
    
    async def run_complete_uniqueness_test(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Ç–µ—Å—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ storytelling"""
        print("üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –¢–ï–°–¢–ê –£–ù–ò–ö–ê–õ–¨–ù–û–°–¢–ò –ò STORYTELLING")
        print("=" * 70)
        
        start_time = datetime.now()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
        scenarios = self.create_test_scenarios()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
        results = []
        for scenario in scenarios:
            result = await self.test_storytelling_technique(scenario)
            if result:
                results.append(result)
                
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
        uniqueness_report = self._analyze_uniqueness(results)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        pdf_results = []
        for result in results:
            if result:
                pdf_result = await self.test_pdf_generation(
                    result["analysis"],
                    result["analysis"].get("partner_name", "Test")
                )
                pdf_results.append(pdf_result)
        
        # –û–±—â–∏–π –æ—Ç—á–µ—Ç
        end_time = datetime.now()
        duration = (end_time - start_time).total_seconds()
        
        # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–π –±–∞–ª–ª
        avg_storytelling = sum(r["storytelling_quality"]["score"] for r in results) / len(results)
        uniqueness_score = uniqueness_report["percentage"]
        pdf_success_rate = sum(1 for r in pdf_results if r["success"]) / len(pdf_results) * 100
        
        overall_score = (avg_storytelling * 10 + uniqueness_score + pdf_success_rate) / 3
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.test_results = {
            "timestamp": start_time.isoformat(),
            "duration_seconds": duration,
            "scenarios_tested": len(scenarios),
            "successful_analyses": len(results),
            "average_storytelling_score": avg_storytelling,
            "uniqueness_report": uniqueness_report,
            "pdf_results": pdf_results,
            "overall_score": overall_score,
            "grade": self._get_grade(overall_score)
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        with open("storytelling_uniqueness_test_results.json", "w", encoding="utf-8") as f:
            json.dump(self.test_results, f, ensure_ascii=False, indent=2)
        
        # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        print("\n" + "=" * 70)
        print("üéâ –¢–ï–°–¢ –£–ù–ò–ö–ê–õ–¨–ù–û–°–¢–ò –ò STORYTELLING –ó–ê–í–ï–†–®–ï–ù!")
        print(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration:.1f} —Å–µ–∫—É–Ω–¥")
        print(f"üìä –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: {len(scenarios)}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤: {len(results)}")
        print(f"üé≠ –°—Ä–µ–¥–Ω–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ storytelling: {avg_storytelling:.1f}/10")
        print(f"üîç –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {uniqueness_score:.1f}%")
        print(f"üìÑ PDF –≥–µ–Ω–µ—Ä–∞—Ü–∏—è: {pdf_success_rate:.1f}%")
        print(f"üéØ –û–ë–©–ò–ô –ë–ê–õ–õ: {overall_score:.1f}/100 ({self._get_grade(overall_score)})")
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ –ø–æ –∫–∞–∂–¥–æ–º—É —Å—Ü–µ–Ω–∞—Ä–∏—é
        print("\nüìã –î–ï–¢–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –ü–û –°–¶–ï–ù–ê–†–ò–Ø–ú:")
        for i, result in enumerate(results, 1):
            print(f"\n{i}. {result['scenario']}:")
            print(f"   üé≠ Storytelling: {result['storytelling_quality']['score']}/10")
            print(f"   üìù –†–∞–∑–º–µ—Ä: {len(result['profile_text'])} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤
            preview = result['profile_text'][:200] + "..." if len(result['profile_text']) > 200 else result['profile_text']
            print(f"   üìñ –ü—Ä–µ–≤—å—é: {preview}")
            
        print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: storytelling_uniqueness_test_results.json")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        print(f"\nüìÅ –°–æ–∑–¥–∞–Ω–Ω—ã–µ PDF —Ñ–∞–π–ª—ã:")
        for pdf_result in pdf_results:
            if pdf_result["success"]:
                print(f"   ‚úÖ {pdf_result['pdf_path']}")
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {pdf_result.get('error', 'Unknown error')}")
        
        return self.test_results
    
    def _get_grade(self, score: float) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ü–µ–Ω–∫—É –ø–æ –±–∞–ª–ª–∞–º"""
        if score >= 90:
            return "A+ (–û—Ç–ª–∏—á–Ω–æ)"
        elif score >= 80:
            return "A (–û—á–µ–Ω—å —Ö–æ—Ä–æ—à–æ)"
        elif score >= 70:
            return "B (–•–æ—Ä–æ—à–æ)"
        elif score >= 60:
            return "C (–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ)"
        else:
            return "D (–ù–µ—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ)"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∞
async def main():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ storytelling"""
    test = StorytellingUniquenessTest()
    await test.run_complete_uniqueness_test()

if __name__ == "__main__":
    asyncio.run(main()) 
"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
"""
import asyncio
import logging
from contextlib import asynccontextmanager

import structlog
from fastapi import FastAPI, Request
from telegram import Update
from telegram.ext import Application

from src.config.settings import settings
from src.database.connection import init_database, close_connections
from src.bot.handlers.main_handler import setup_handlers


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–Ω–∞—á–∞–ª–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ lifespan
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
basic_logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ structlog
structlog.configure(
    processors=[
        structlog.stdlib.filter_by_level,
        structlog.stdlib.add_logger_name,
        structlog.stdlib.add_log_level,
        structlog.stdlib.PositionalArgumentsFormatter(),
        structlog.processors.TimeStamper(fmt="iso"),
        structlog.processors.StackInfoRenderer(),
        structlog.processors.format_exc_info,
        structlog.processors.UnicodeDecoder(),
        structlog.processors.JSONRenderer()
    ],
    context_class=dict,
    logger_factory=structlog.stdlib.LoggerFactory(),
    wrapper_class=structlog.stdlib.BoundLogger,
    cache_logger_on_first_use=True,
)

logger = structlog.get_logger()


@asynccontextmanager
async def lifespan(app: FastAPI):
    """
    –ñ–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    –û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ FastAPI
    """
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    telegram_application = None
    
    try:
        # === –≠–¢–ê–ü 1: –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ===
        basic_logger.info("üöÄ === –ù–ê–ß–ê–õ–û –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ===")
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", 
                   telegram_token_exists=bool(settings.telegram_bot_token),
                   anthropic_key_exists=bool(settings.anthropic_api_key),
                   webhook_url=settings.webhook_url,
                   database_url_prefix=settings.database_url[:20] + "..." if settings.database_url else "–û–¢–°–£–¢–°–¢–í–£–ï–¢")
        
        # === –≠–¢–ê–ü 2: –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–ê–ó–´ –î–ê–ù–ù–´–• ===
        basic_logger.info("üóÑÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        
        try:
            await init_database()
            basic_logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
        except Exception as db_error:
            basic_logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ë–î: {db_error}")
            logger.error("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î", error=str(db_error), exc_info=True)
            raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {db_error}") from db_error
        
        # === –≠–¢–ê–ü 3: –°–û–ó–î–ê–ù–ò–ï TELEGRAM APPLICATION ===
        basic_logger.info("ü§ñ –°–æ–∑–¥–∞–Ω–∏–µ Telegram Application...")
        
        try:
            if not settings.telegram_bot_token:
                raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
            telegram_application = Application.builder().token(settings.telegram_bot_token).build()
            basic_logger.info("‚úÖ Telegram Application —Å–æ–∑–¥–∞–Ω")
            logger.info("‚úÖ Telegram Application –≥–æ—Ç–æ–≤")
        except Exception as bot_error:
            basic_logger.error(f"‚ùå –û–®–ò–ë–ö–ê –°–û–ó–î–ê–ù–ò–Ø –ë–û–¢–ê: {bot_error}")
            logger.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Telegram Application", error=str(bot_error), exc_info=True)
            raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Telegram Application: {bot_error}") from bot_error
        
        # === –≠–¢–ê–ü 4: –ù–ê–°–¢–†–û–ô–ö–ê –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í ===
        basic_logger.info("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥...")
        
        try:
            setup_handlers(telegram_application)
            basic_logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            logger.info("‚úÖ –í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∏ –≥–æ—Ç–æ–≤—ã")
        except Exception as handlers_error:
            basic_logger.error(f"‚ùå –û–®–ò–ë–ö–ê –ù–ê–°–¢–†–û–ô–ö–ò –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í: {handlers_error}")
            logger.error("‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤", error=str(handlers_error), exc_info=True)
            raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏: {handlers_error}") from handlers_error
        
        # === –≠–¢–ê–ü 5: –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø TELEGRAM APPLICATION ===
        basic_logger.info("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Application...")
        
        try:
            await telegram_application.initialize()
            basic_logger.info("‚úÖ Telegram Application –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            logger.info("‚úÖ Telegram Application –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as init_error:
            basic_logger.error(f"‚ùå –û–®–ò–ë–ö–ê –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò: {init_error}")
            logger.error("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram Application", error=str(init_error), exc_info=True)
            raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Telegram Application: {init_error}") from init_error
        
        # === –≠–¢–ê–ü 6: –£–°–¢–ê–ù–û–í–ö–ê –ò –ü–†–û–í–ï–†–ö–ê WEBHOOK ===
        if settings.webhook_url:
            basic_logger.info(f"üîó –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook: {settings.webhook_url}")
            
            try:
                webhook_url = f"{settings.webhook_url.rstrip('/')}/webhook"
                
                # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π webhook
                current_webhook_info = await telegram_application.bot.get_webhook_info()
                basic_logger.info(f"üîç –¢–µ–∫—É—â–∏–π webhook: {current_webhook_info.url}")
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook (–¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω —É–∂–µ –µ—Å—Ç—å - –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏)
                await telegram_application.bot.set_webhook(
                    url=webhook_url,
                    allowed_updates=["message", "callback_query", "inline_query"]
                )
                basic_logger.info("‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω")
                logger.info("‚úÖ Webhook –Ω–∞—Å—Ç—Ä–æ–µ–Ω", webhook_url=webhook_url)
                
                # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ webhook
                final_webhook_info = await telegram_application.bot.get_webhook_info()
                basic_logger.info(f"üîç –§–∏–Ω–∞–ª—å–Ω—ã–π webhook: {final_webhook_info.url}")
                logger.info("üîç Webhook —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å", 
                           url=final_webhook_info.url, 
                           pending_updates=final_webhook_info.pending_update_count,
                           max_connections=final_webhook_info.max_connections)
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ webhook –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
                if not final_webhook_info.url or final_webhook_info.url != webhook_url:
                    raise RuntimeError(f"Webhook –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: –æ–∂–∏–¥–∞–ª—Å—è {webhook_url}, –ø–æ–ª—É—á–µ–Ω {final_webhook_info.url}")
                
            except Exception as webhook_error:
                basic_logger.error(f"‚ùå –û–®–ò–ë–ö–ê WEBHOOK: {webhook_error}")
                logger.error("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook", error=str(webhook_error), exc_info=True)
                raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook: {webhook_error}") from webhook_error
        else:
            basic_logger.warning("‚ö†Ô∏è WEBHOOK_URL –Ω–µ –∑–∞–¥–∞–Ω!")
            logger.warning("‚ö†Ô∏è Webhook –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å - WEBHOOK_URL –Ω–µ –∑–∞–¥–∞–Ω")
        
        # === –≠–¢–ê–ü 7: –°–û–•–†–ê–ù–ï–ù–ò–ï –í –°–û–°–¢–û–Ø–ù–ò–ò –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ===
        app.state.telegram_app = telegram_application
        
        # === –ó–ê–í–ï–†–®–ï–ù–ò–ï –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò ===
        basic_logger.info("üéØ === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û ===")
        logger.info("üéØ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ")
        
        # YIELD - –ø–µ—Ä–µ–¥–∞—á–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è FastAPI
        yield
        
    except Exception as e:
        # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò
        basic_logger.error(f"üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò: {type(e).__name__}: {e}")
        logger.error("üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ lifespan —Ñ—É–Ω–∫—Ü–∏–∏", 
                    error_type=type(e).__name__, 
                    error_message=str(e), 
                    exc_info=True)
        
        # –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –±—ã–ª–æ —Å–æ–∑–¥–∞–Ω–æ
        if telegram_application:
            try:
                await telegram_application.shutdown()
                basic_logger.info("üßπ –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ Telegram Application –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
            except Exception as cleanup_error:
                basic_logger.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏: {cleanup_error}")
        
        # –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ - FastAPI –¥–æ–ª–∂–µ–Ω –∑–Ω–∞—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ
        raise
    
    # === –ó–ê–í–ï–†–®–ï–ù–ò–ï –†–ê–ë–û–¢–´ (–ü–û–°–õ–ï YIELD) ===
    try:
        basic_logger.info("üîÑ === –ù–ê–ß–ê–õ–û –ó–ê–í–ï–†–®–ï–ù–ò–Ø –†–ê–ë–û–¢–´ ===")
        logger.info("üîÑ –ù–∞—á–∏–Ω–∞—é –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
        
        # === –ù–ï –£–î–ê–õ–Ø–ï–ú WEBHOOK –ü–†–ò –ü–ï–†–ï–ó–ê–ü–£–°–ö–ï ===
        # Webhook –ù–ï —É–¥–∞–ª—è–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å Railway
        # Railway –º–æ–∂–µ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –¥–µ–ø–ª–æ—è, –Ω–æ webhook –¥–æ–ª–∂–µ–Ω –æ—Å—Ç–∞—Ç—å—Å—è
        if settings.webhook_url and telegram_application:
            try:
                basic_logger.info("üîó Webhook –æ—Å—Ç–∞–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º –¥–ª—è Railway...")
                logger.info("üîó Webhook —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—Ö Railway")
            except Exception as webhook_info_error:
                basic_logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ webhook: {webhook_info_error}")
                logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ webhook", error=str(webhook_info_error))
        
        # === –ó–ê–ö–†–´–¢–ò–ï TELEGRAM APPLICATION ===
        if telegram_application:
            try:
                basic_logger.info("ü§ñ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ Telegram Application...")
                await telegram_application.shutdown()
                basic_logger.info("‚úÖ Telegram Application –∑–∞–≤–µ—Ä—à–µ–Ω")
                logger.info("‚úÖ Telegram Application –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω")
            except Exception as app_shutdown_error:
                basic_logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è Telegram App: {app_shutdown_error}")
                logger.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è Telegram Application", error=str(app_shutdown_error))
        
        # === –ó–ê–ö–†–´–¢–ò–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ô –ö –ë–î ===
        try:
            basic_logger.info("üì™ –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö...")
            await close_connections()
            basic_logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î –∑–∞–∫—Ä—ã—Ç—ã")
            logger.info("‚úÖ –í—Å–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç—ã")
        except Exception as db_cleanup_error:
            basic_logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ë–î: {db_cleanup_error}")
            logger.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –ë–î", error=str(db_cleanup_error))
        
        basic_logger.info("‚úÖ === –ó–ê–í–ï–†–®–ï–ù–ò–ï –†–ê–ë–û–¢–´ –í–´–ü–û–õ–ù–ï–ù–û ===")
        logger.info("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        
    except Exception as shutdown_error:
        basic_logger.error(f"üí• –û–®–ò–ë–ö–ê –ü–†–ò –ó–ê–í–ï–†–®–ï–ù–ò–ò: {shutdown_error}")
        logger.error("üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", 
                    error=str(shutdown_error), 
                    exc_info=True)
        # –ù–µ –ø–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ - –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É–∂–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è


# –°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º lifespan
app = FastAPI(
    title="Psychology Bot API",
    description="AI-powered –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ Telegram",
    version="1.0.0",
    lifespan=lifespan
)


@app.get("/")
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç"""
    return {
        "message": "Psychology Bot API",
        "status": "running",
        "version": "1.0.0",
        "bot_configured": hasattr(app.state, 'telegram_app') and app.state.telegram_app is not None
    }


@app.get("/health")
async def health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    telegram_status = "unknown"
    
    try:
        if hasattr(app.state, 'telegram_app') and app.state.telegram_app:
            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞
            telegram_status = "connected"
        else:
            telegram_status = "not_initialized"
    except Exception:
        telegram_status = "error"
    
    return {
        "status": "healthy",
        "database": "connected",
        "redis": "connected",
        "telegram_bot": telegram_status,
        "webhook_configured": bool(settings.webhook_url)
    }


@app.post("/webhook")
async def webhook(request: Request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–æ–≤ Telegram"""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        if not hasattr(app.state, 'telegram_app') or not app.state.telegram_app:
            logger.error("‚ùå Telegram Application –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return {"status": "error", "message": "Bot not initialized"}
        
        application = app.state.telegram_app
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ JSON –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        json_data = await request.json()
        logger.info("üì• –ü–æ–ª—É—á–µ–Ω webhook", update_id=json_data.get('update_id'))
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ Update –∏–∑ JSON
        update = Update.de_json(json_data, application.bot)
        
        if not update:
            logger.warning("‚ö†Ô∏è –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π Update –æ–±—ä–µ–∫—Ç")
            return {"status": "error", "message": "Invalid update"}
        
        logger.info("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é Update", 
                   update_id=update.update_id,
                   update_type=type(update.effective_message).__name__ if update.effective_message else "unknown")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        await application.process_update(update)
        
        logger.info("‚úÖ Update –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ", update_id=update.update_id)
        return {"status": "ok"}
        
    except Exception as e:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook", 
                    error=str(e), 
                    error_type=type(e).__name__,
                    exc_info=True)
        return {"status": "error", "message": str(e)}


async def start_polling():
    """–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ polling (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)"""
    application = Application.builder().token(settings.telegram_bot_token).build()
    setup_handlers(application)
    
    logger.info("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling")
    await application.run_polling(allowed_updates=["message", "callback_query"])


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if settings.webhook_url:
        # –†–µ–∂–∏–º webhook —Å FastAPI
        import uvicorn
        uvicorn.run(
            "src.main:app",
            host=settings.fastapi_host,
            port=settings.fastapi_port,
            reload=settings.debug
        )
    else:
        # –†–µ–∂–∏–º polling
        asyncio.run(start_polling())


if __name__ == "__main__":
    main() 
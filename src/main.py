"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
"""
import asyncio
import logging
from contextlib import asynccontextmanager

import structlog
from fastapi import FastAPI, Request
from telegram import Update
from telegram.ext import Application

from src.config.settings import settings
from src.database.connection import init_database, close_connections
from src.bot.handlers.main_handler import setup_handlers


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
structlog.configure(
    processors=[
        structlog.stdlib.filter_by_level,
        structlog.stdlib.add_logger_name,
        structlog.stdlib.add_log_level,
        structlog.stdlib.PositionalArgumentsFormatter(),
        structlog.processors.TimeStamper(fmt="iso"),
        structlog.processors.StackInfoRenderer(),
        structlog.processors.format_exc_info,
        structlog.processors.UnicodeDecoder(),
        structlog.processors.JSONRenderer()
    ],
    context_class=dict,
    logger_factory=structlog.stdlib.LoggerFactory(),
    wrapper_class=structlog.stdlib.BoundLogger,
    cache_logger_on_first_use=True,
)

logger = structlog.get_logger()


@asynccontextmanager
async def lifespan(app: FastAPI):
    """–ñ–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    application = None
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è - –°–¢–ê–†–¢")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫", 
                   has_telegram_token=bool(settings.telegram_bot_token),
                   has_webhook_url=bool(settings.webhook_url),
                   database_url=settings.database_url[:50] + "..." if settings.database_url else None)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        logger.info("üóÑÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        await init_database()
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram –±–æ—Ç–∞
        logger.info("ü§ñ –°–æ–∑–¥–∞–Ω–∏–µ Telegram Application...")
        application = Application.builder().token(settings.telegram_bot_token).build()
        
        logger.info("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤...")
        setup_handlers(application)
        logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–æ—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        logger.info("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Application...")
        await application.initialize()
        logger.info("‚úÖ Telegram application –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ–±—Ö—É–∫–∞ –µ—Å–ª–∏ URL —É–∫–∞–∑–∞–Ω
        if settings.webhook_url:
            logger.info("üîó –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook...", webhook_url=settings.webhook_url)
            await application.bot.set_webhook(
                url=f"{settings.webhook_url}/webhook",
                allowed_updates=["message", "callback_query", "inline_query"]
            )
            logger.info("‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        else:
            logger.warning("‚ö†Ô∏è WEBHOOK_URL –Ω–µ –∑–∞–¥–∞–Ω, webhook –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å!")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ FastAPI
        app.state.telegram_app = application
        logger.info("üéØ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∏ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ!")
        
        yield
        
    except Exception as e:
        logger.error("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", 
                    error=str(e), exc_info=True)
        # –ü–æ–ø—ã—Ç–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –±—ã–ª–æ —Å–æ–∑–¥–∞–Ω–æ
        if application:
            try:
                await application.shutdown()
            except:
                pass
        raise e
    
    # –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
    try:
        logger.info("üîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
        
        # –£–¥–∞–ª–µ–Ω–∏–µ webhook
        if settings.webhook_url and application:
            try:
                await application.bot.delete_webhook()
                logger.info("üîó Webhook —É–¥–∞–ª–µ–Ω")
            except Exception as e:
                logger.error("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è webhook", error=str(e))
        
        # –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
        try:
            await close_connections()
            logger.info("üì™ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î –∑–∞–∫—Ä—ã—Ç—ã")
        except Exception as e:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π", error=str(e))
        
        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã Telegram app
        if application:
            try:
                await application.shutdown()
                logger.info("ü§ñ Telegram application –∑–∞–≤–µ—Ä—à–µ–Ω")
            except Exception as e:
                logger.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è Telegram app", error=str(e))
        
        logger.info("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        
    except Exception as e:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", error=str(e), exc_info=True)


# –°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(
    title="Psychology Bot API",
    description="AI-powered –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ Telegram",
    version="1.0.0",
    lifespan=lifespan
)


@app.get("/")
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç"""
    return {
        "message": "Psychology Bot API",
        "status": "running",
        "version": "1.0.0"
    }


@app.get("/health")
async def health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    return {
        "status": "healthy",
        "database": "connected",
        "redis": "connected"
    }


@app.post("/webhook")
async def webhook(request: Request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–æ–≤ Telegram"""
    try:
        application = app.state.telegram_app
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ JSON –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        json_data = await request.json()
        logger.info("–ü–æ–ª—É—á–µ–Ω webhook", data=json_data)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ Update –∏–∑ JSON
        update = Update.de_json(json_data, application.bot)
        logger.info("Update —Å–æ–∑–¥–∞–Ω", update_id=update.update_id if update else None)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        await application.process_update(update)
        logger.info("Update –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        return {"status": "ok"}
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook", error=str(e), exc_info=True)
        return {"status": "error", "message": str(e)}


async def start_polling():
    """–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ polling"""
    application = Application.builder().token(settings.telegram_bot_token).build()
    setup_handlers(application)
    
    logger.info("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling")
    await application.run_polling(allowed_updates=["message", "callback_query"])


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if settings.webhook_url:
        # –†–µ–∂–∏–º webhook —Å FastAPI
        import uvicorn
        uvicorn.run(
            "src.main:app",
            host=settings.fastapi_host,
            port=settings.fastapi_port,
            reload=settings.debug
        )
    else:
        # –†–µ–∂–∏–º polling
        asyncio.run(start_polling())


if __name__ == "__main__":
    main() 
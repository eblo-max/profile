"""
üí∞ –≠–ö–û–ù–û–ú–ò–ß–ï–°–ö–ò–ô –ú–ï–ù–ï–î–ñ–ï–† –ê–ù–ê–õ–ò–ó–ê
–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç—å—é –∏ —É—Ä–æ–≤–Ω—è–º–∏ –∞–Ω–∞–ª–∏–∑–∞
"""
import asyncio
import structlog
import time
from enum import Enum
from typing import Dict, List, Optional, Any, Tuple
from dataclasses import dataclass, asdict
from datetime import datetime, timedelta
import hashlib
import json

from src.config.settings import settings
from src.database.connection import get_async_session
from src.database.models import User, Analysis, ApiUsage

logger = structlog.get_logger()


class AnalysisLevel(Enum):
    """–£—Ä–æ–≤–Ω–∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π"""
    
    FREE = "free"           # –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π (3 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å, —Ç–æ–ª—å–∫–æ Claude)
    BASIC = "basic"         # $1.99 - Claude + –±—ã—Å—Ç—Ä–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
    ADVANCED = "advanced"   # $4.99 - Claude + OpenAI + –Ω–∞—É—á–Ω–∞—è –≤—ã–±–æ—Ä–∫–∞
    RESEARCH = "research"   # $9.99 - –ü–æ–ª–Ω—ã–π –Ω–∞—É—á–Ω—ã–π –ø–æ–∏—Å–∫ + 2 AI
    PREMIUM = "premium"     # $19.99 - –í—Å–µ AI + –ø–æ–ª–Ω—ã–π –Ω–∞—É—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑


@dataclass
class AnalysisConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —É—Ä–æ–≤–Ω—è –∞–Ω–∞–ª–∏–∑–∞"""
    level: AnalysisLevel
    price_usd: float
    ai_services: List[str]
    scientific_search: bool
    max_sources: int
    cache_enabled: bool
    estimated_tokens: int
    estimated_time_minutes: int
    features: List[str]


@dataclass
class CostEstimate:
    """–û—Ü–µ–Ω–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑–∞"""
    level: AnalysisLevel
    estimated_cost_usd: float
    estimated_tokens: int
    ai_services_count: int
    cache_hit_probability: float
    estimated_time_minutes: int


class EconomicAnalysisManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö —É—Ä–æ–≤–Ω–µ–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        self.analysis_configs = self._init_analysis_configs()
        self.daily_limits = {
            AnalysisLevel.FREE: settings.free_analyses_per_day,
            AnalysisLevel.BASIC: 50,
            AnalysisLevel.ADVANCED: 20,
            AnalysisLevel.RESEARCH: 10,
            AnalysisLevel.PREMIUM: 5
        }
        logger.info("üí∞ EconomicAnalysisManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω", 
                   levels=len(self.analysis_configs),
                   daily_limit_usd=settings.daily_cost_limit_usd)
    
    def _init_analysis_configs(self) -> Dict[AnalysisLevel, AnalysisConfig]:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –¥–ª—è –≤—Å–µ—Ö —É—Ä–æ–≤–Ω–µ–π –∞–Ω–∞–ª–∏–∑–∞"""
        return {
            AnalysisLevel.FREE: AnalysisConfig(
                level=AnalysisLevel.FREE,
                price_usd=0.0,
                ai_services=["claude"],
                scientific_search=False,
                max_sources=0,
                cache_enabled=True,
                estimated_tokens=2500,
                estimated_time_minutes=1,
                features=[
                    "–ë–∞–∑–æ–≤—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑",
                    "Big Five –æ—Ü–µ–Ω–∫–∞", 
                    "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å",
                    "–û—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"
                ]
            ),
            
            AnalysisLevel.BASIC: AnalysisConfig(
                level=AnalysisLevel.BASIC,
                price_usd=settings.basic_price_usd,
                ai_services=["claude"],
                scientific_search=False,
                max_sources=0,
                cache_enabled=True,
                estimated_tokens=4000,
                estimated_time_minutes=2,
                features=[
                    "–î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑",
                    "Big Five + DISC –ø—Ä–æ—Ñ–∏–ª—å",
                    "–ö–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã",
                    "–ú–µ–∂–ª–∏—á–Ω–æ—Å—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å",
                    "–ö–∞—Ä—å–µ—Ä–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏",
                    "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞"
                ]
            ),
            
            AnalysisLevel.ADVANCED: AnalysisConfig(
                level=AnalysisLevel.ADVANCED,
                price_usd=settings.advanced_price_usd,
                ai_services=["claude", "openai"],
                scientific_search=True,
                max_sources=10,
                cache_enabled=True,
                estimated_tokens=8000,
                estimated_time_minutes=3,
                features=[
                    "–ú—É–ª—å—Ç–∏-AI –∞–Ω–∞–ª–∏–∑ (Claude + GPT-4)",
                    "–ù–∞—É—á–Ω–∞—è –≤—ã–±–æ—Ä–∫–∞ (10 –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤)",
                    "–£–≥–ª—É–±–ª–µ–Ω–Ω—ã–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç",
                    "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏—è",
                    "–†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å",
                    "–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã (5 –ª–µ—Ç)",
                    "–ö—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
                ]
            ),
            
            AnalysisLevel.RESEARCH: AnalysisConfig(
                level=AnalysisLevel.RESEARCH,
                price_usd=settings.research_price_usd,
                ai_services=["claude", "openai", "gemini"],
                scientific_search=True,
                max_sources=30,
                cache_enabled=True,
                estimated_tokens=15000,
                estimated_time_minutes=5,
                features=[
                    "–ù–∞—É—á–Ω–æ-–æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑",
                    "–ü–æ–∏—Å–∫ –≤ PubMed + Google Scholar",
                    "Peer-reviewed –≤–∞–ª–∏–¥–∞—Ü–∏—è",
                    "3 AI —Å–∏—Å—Ç–µ–º—ã (Claude + GPT-4 + Gemini)",
                    "30+ –Ω–∞—É—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤",
                    "–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å",
                    "–ö–ª–∏–Ω–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏",
                    "–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã (10 –ª–µ—Ç)",
                    "–ö—É–ª—å—Ç—É—Ä–Ω–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è"
                ]
            ),
            
            AnalysisLevel.PREMIUM: AnalysisConfig(
                level=AnalysisLevel.PREMIUM,
                price_usd=settings.premium_price_usd,
                ai_services=["claude", "openai", "gemini", "cohere", "huggingface"],
                scientific_search=True,
                max_sources=50,
                cache_enabled=False,  # –í—Å–µ–≥–¥–∞ —Å–≤–µ–∂–∏–π –∞–Ω–∞–ª–∏–∑
                estimated_tokens=25000,
                estimated_time_minutes=8,
                features=[
                    "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (5 AI —Å–∏—Å—Ç–µ–º)",
                    "–ü–æ–ª–Ω—ã–π –Ω–∞—É—á–Ω—ã–π –ø–æ–∏—Å–∫ (50+ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤)",
                    "–ú—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑",
                    "–ù–µ–π—Ä–æ–ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å",
                    "–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–µ–Ω—Ü–∏–∏",
                    "–≠–∫—Å–ø–µ—Ä—Ç–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è",
                    "VIP –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–µ–∑ –æ—á–µ—Ä–µ–¥–∏",
                    "–ü—Ä–∏–≤–∞—Ç–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è",
                    "–≠–∫—Å–ø–æ—Ä—Ç –≤ PDF"
                ]
            )
        }
    
    async def estimate_analysis_cost(
        self, 
        level: AnalysisLevel, 
        text: str,
        user_id: int
    ) -> CostEstimate:
        """
        –û—Ü–µ–Ω–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è
        
        Args:
            level: –£—Ä–æ–≤–µ–Ω—å –∞–Ω–∞–ª–∏–∑–∞
            text: –¢–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            –î–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
        """
        try:
            config = self.analysis_configs[level]
            
            # –ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—Ä–æ–≤–Ω—è
            base_cost = config.price_usd
            
            # –û—Ü–µ–Ω–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–ª–∏–Ω—ã —Ç–µ–∫—Å—Ç–∞
            estimated_tokens = self._estimate_tokens(text, config)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏
            cache_hit_probability = await self._calculate_cache_hit_probability(
                text, level, user_id
            )
            
            # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å —É—á–µ—Ç–æ–º –∫—ç—à–∞
            final_cost = base_cost * (1 - cache_hit_probability * 0.7)  # 70% —Å–∫–∏–¥–∫–∞ –∑–∞ –∫—ç—à
            
            return CostEstimate(
                level=level,
                estimated_cost_usd=round(final_cost, 2),
                estimated_tokens=estimated_tokens,
                ai_services_count=len(config.ai_services),
                cache_hit_probability=cache_hit_probability,
                estimated_time_minutes=config.estimated_time_minutes
            )
            
        except Exception as e:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏", 
                        level=level.value, 
                        error=str(e), 
                        exc_info=True)
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            return CostEstimate(
                level=level,
                estimated_cost_usd=config.price_usd,
                estimated_tokens=config.estimated_tokens,
                ai_services_count=len(config.ai_services),
                cache_hit_probability=0.0,
                estimated_time_minutes=config.estimated_time_minutes
            )
    
    def _estimate_tokens(self, text: str, config: AnalysisConfig) -> int:
        """–û—Ü–µ–Ω–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
        # –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞: 1 —Ç–æ–∫–µ–Ω ‚âà 0.75 —Å–ª–æ–≤
        word_count = len(text.split())
        input_tokens = word_count // 0.75
        
        # –£–º–Ω–æ–∂–∞–µ–º –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ AI —Å–µ—Ä–≤–∏—Å–æ–≤
        total_input_tokens = input_tokens * len(config.ai_services)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã—Ö–æ–¥–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã (–æ–±—ã—á–Ω–æ 20-40% –æ—Ç –≤—Ö–æ–¥–Ω—ã—Ö)
        output_tokens = total_input_tokens * 0.3
        
        return int(total_input_tokens + output_tokens)
    
    async def _calculate_cache_hit_probability(
        self, 
        text: str, 
        level: AnalysisLevel, 
        user_id: int
    ) -> float:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ–ø–∞–¥–∞–Ω–∏—è –≤ –∫—ç—à"""
        try:
            # –°–æ–∑–¥–∞–µ–º —Ö—ç—à –æ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—ç—à–∞
            text_hash = hashlib.md5(text.encode()).hexdigest()
            
            # –î–ª—è –Ω–∞—É—á–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –Ω–∞—É—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
            if level in [AnalysisLevel.RESEARCH, AnalysisLevel.PREMIUM]:
                # –ù–∞—É—á–Ω—ã–π –∫—ç—à –∂–∏–≤–µ—Ç 7 –¥–Ω–µ–π
                return 0.3  # 30% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ–ø–∞–¥–∞–Ω–∏—è
            
            # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–¥–∞–≤–Ω–∏–µ –∞–Ω–∞–ª–∏–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            async with get_async_session() as session:
                # –¢—É—Ç –±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å Redis –∫—ç—à, –Ω–æ –ø–æ–∫–∞ —Å–∏–º—É–ª–∏—Ä—É–µ–º
                recent_analyses_count = 5  # –ú–æ–∫
                
                if recent_analyses_count > 0:
                    return min(0.6, recent_analyses_count * 0.1)  # –ú–∞–∫—Å–∏–º—É–º 60%
                
                return 0.0
                
        except Exception as e:
            logger.error("‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∫—ç—à–∞", error=str(e))
            return 0.0
    
    async def check_user_limits(self, user_id: int, level: AnalysisLevel) -> Tuple[bool, str]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Returns:
            (allowed: bool, reason: str)
        """
        try:
            async with get_async_session() as session:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–Ω–µ–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è
                if level == AnalysisLevel.FREE:
                    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–Ω–∞–ª–∏–∑—ã —Å–µ–≥–æ–¥–Ω—è
                    today_analyses = 2  # –ú–æ–∫ - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å –∫ –ë–î
                    
                    if today_analyses >= self.daily_limits[level]:
                        return False, f"–ü—Ä–µ–≤—ã—à–µ–Ω –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤ ({self.daily_limits[level]})"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–∏–µ –¥–Ω–µ–≤–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã
                daily_cost = 45.0  # –ú–æ–∫ - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ —Å—É–º–º–∞ –∏–∑ ApiUsage
                
                if daily_cost >= settings.daily_cost_limit_usd:
                    return False, f"–ü—Ä–µ–≤—ã—à–µ–Ω –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ (${settings.daily_cost_limit_usd})"
                
                return True, "OK"
                
        except Exception as e:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–æ–≤", 
                        user_id=user_id, 
                        level=level.value, 
                        error=str(e))
            return False, "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ª–∏–º–∏—Ç–æ–≤"
    
    def get_level_comparison(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —É—Ä–æ–≤–Ω–µ–π –∞–Ω–∞–ª–∏–∑–∞"""
        comparison = {}
        
        for level, config in self.analysis_configs.items():
            comparison[level.value] = {
                "name": self._get_level_name(level),
                "price_usd": config.price_usd,
                "ai_services": config.ai_services,
                "scientific_search": config.scientific_search,
                "max_sources": config.max_sources,
                "estimated_time_minutes": config.estimated_time_minutes,
                "features": config.features,
                "emoji": self._get_level_emoji(level)
            }
        
        return comparison
    
    def _get_level_name(self, level: AnalysisLevel) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è"""
        names = {
            AnalysisLevel.FREE: "–ë–∞–∑–æ–≤—ã–π",
            AnalysisLevel.BASIC: "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π", 
            AnalysisLevel.ADVANCED: "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π",
            AnalysisLevel.RESEARCH: "–ù–∞—É—á–Ω—ã–π",
            AnalysisLevel.PREMIUM: "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π"
        }
        return names.get(level, level.value)
    
    def _get_level_emoji(self, level: AnalysisLevel) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è —É—Ä–æ–≤–Ω—è"""
        emojis = {
            AnalysisLevel.FREE: "üÜì",
            AnalysisLevel.BASIC: "‚≠ê",
            AnalysisLevel.ADVANCED: "üöÄ", 
            AnalysisLevel.RESEARCH: "üî¨",
            AnalysisLevel.PREMIUM: "üíé"
        }
        return emojis.get(level, "üìä")
    
    async def perform_analysis(
        self, 
        text: str, 
        user_id: int, 
        level: AnalysisLevel,
        telegram_id: int = None
    ) -> str:
        """
        üöÄ –û–°–ù–û–í–ù–û–ô –ú–ï–¢–û–î –≠–ö–û–ù–û–ú–ò–ß–ï–°–ö–û–ì–û –ê–ù–ê–õ–ò–ó–ê
        
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:
        1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        2. –û—Ü–µ–Ω–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
        3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞
        4. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞
        5. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
        """
        start_time = time.time()
        
        try:
            logger.info("üöÄ –ù–∞—á–∞–ª–æ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞",
                       user_id=user_id,
                       level=level.value,
                       text_length=len(text))
            
            # 1. –ü–†–û–í–ï–†–ö–ê –õ–ò–ú–ò–¢–û–í
            allowed, reason = await self.check_user_limits(user_id, level)
            if not allowed:
                return f"‚ùå **–ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω**\n\n{reason}\n\n" \
                       f"‚Ä¢ `/pricing` - –¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã\n" \
                       f"‚Ä¢ `/help` - –°–ø—Ä–∞–≤–∫–∞"
            
            # 2. –û–¶–ï–ù–ö–ê –°–¢–û–ò–ú–û–°–¢–ò
            cost_estimate = await self.estimate_analysis_cost(level, text, user_id)
            
            # 3. –ü–†–û–í–ï–†–ö–ê –ö–≠–®–ê (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω)
            config = self.analysis_configs[level]
            cache_result = None
            
            if config.cache_enabled:
                from src.utils.cache_manager import cache_manager
                cache_result = await cache_manager.get_analysis_result(
                    text=text, 
                    level=level.value,
                    user_id=user_id
                )
            
            # 4. –í–´–ü–û–õ–ù–ï–ù–ò–ï –ê–ù–ê–õ–ò–ó–ê
            if cache_result:
                # ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ –∫—ç—à–∞
                analysis_result = cache_result
                actual_cost = 0.0  # –ö—ç—à = –±–µ—Å–ø–ª–∞—Ç–Ω–æ
                tokens_used = 0
                
                logger.info("üí∞ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω –∏–∑ –∫—ç—à–∞ (—ç–∫–æ–Ω–æ–º–∏—è 100%)",
                           user_id=user_id,
                           level=level.value)
            else:
                # üîÑ –ù–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
                from src.ai.analysis_engine import analysis_engine
                
                analysis_result = await analysis_engine.economic_analysis(
                    text=text,
                    level=level,
                    user_id=user_id,
                    telegram_id=telegram_id or user_id
                )
                
                actual_cost = cost_estimate.estimated_cost_usd
                tokens_used = cost_estimate.estimated_tokens
                
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∫—ç—à
                if config.cache_enabled:
                    await cache_manager.cache_analysis_result(
                        text=text,
                        level=level.value,
                        result=analysis_result,
                        user_id=user_id
                    )
            
            # 5. –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –°–¢–û–ò–ú–û–°–¢–ò
            await self.log_analysis_cost(
                user_id=user_id,
                level=level,
                actual_cost_usd=actual_cost,
                tokens_used=tokens_used,
                ai_services_used=config.ai_services
            )
            
            # 6. –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø
            execution_time = round(time.time() - start_time, 1)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–Ω–∞–ª–∏–∑–µ
            footer = f"\n\n" \
                    f"üìä **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–Ω–∞–ª–∏–∑–µ:**\n" \
                    f"üéØ –£—Ä–æ–≤–µ–Ω—å: {self._get_level_name(level)} {self._get_level_emoji(level)}\n" \
                    f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${actual_cost:.2f} {'(–∫—ç—à)' if cache_result else ''}\n" \
                    f"‚è±Ô∏è –í—Ä–µ–º—è: {execution_time}—Å\n" \
                    f"ü§ñ AI —Å–µ—Ä–≤–∏—Å—ã: {', '.join(config.ai_services)}\n" \
                    f"üî¨ –ù–∞—É—á–Ω—ã–π –ø–æ–∏—Å–∫: {'‚úÖ' if config.scientific_search else '‚ùå'}\n\n" \
                    f"üí° –ê–ø–≥—Ä–µ–π–¥: `/pricing` | –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: `/cache`"
            
            logger.info("‚úÖ –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω",
                       user_id=user_id,
                       level=level.value,
                       cost_usd=actual_cost,
                       execution_time=execution_time,
                       from_cache=bool(cache_result))
            
            return analysis_result + footer
            
        except Exception as e:
            execution_time = round(time.time() - start_time, 1)
            logger.error("‚ùå –û—à–∏–±–∫–∞ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞",
                        user_id=user_id,
                        level=level.value,
                        error=str(e),
                        execution_time=execution_time,
                        exc_info=True)
            
            return f"‚ùå **–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞**\n\n" \
                   f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)[:100]}...\n\n" \
                   f"‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ\n" \
                   f"‚Ä¢ `/help` - –°–ø—Ä–∞–≤–∫–∞\n" \
                   f"‚Ä¢ `/pricing` - –î—Ä—É–≥–∏–µ —É—Ä–æ–≤–Ω–∏"

    async def log_analysis_cost(
        self, 
        user_id: int, 
        level: AnalysisLevel,
        actual_cost_usd: float,
        tokens_used: int,
        ai_services_used: List[str]
    ) -> None:
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            async with get_async_session() as session:
                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ API
                api_usage = ApiUsage(
                    user_id=user_id,
                    service_name=f"analysis_{level.value}",
                    requests_count=1,
                    tokens_used=tokens_used,
                    cost_usd=actual_cost_usd
                )
                session.add(api_usage)
                await session.commit()
                
                logger.info("üí∞ –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∞",
                           user_id=user_id,
                           level=level.value,
                           cost_usd=actual_cost_usd,
                           tokens_used=tokens_used,
                           ai_services=ai_services_used)
                
        except Exception as e:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏", 
                        error=str(e), 
                        exc_info=True)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
economic_manager = EconomicAnalysisManager() 
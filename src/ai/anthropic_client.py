"""
–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Anthropic Claude API
"""
import asyncio
import structlog
from typing import Dict, Any, List, Optional, AsyncGenerator
from anthropic import AsyncAnthropic
from anthropic.types import Message

from src.config.settings import settings
from src.ai.prompts.psychology_prompts import (
    PSYCHOLOGICAL_ANALYSIS_PROMPT,
    PERSONALITY_ASSESSMENT_PROMPT,
    EMOTIONAL_ANALYSIS_PROMPT,
    BEHAVIORAL_ANALYSIS_PROMPT,
    SYNTHESIS_PROMPT
)

logger = structlog.get_logger()


class AnthropicClient:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Claude API"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""
        self.client = AsyncAnthropic(
            api_key=settings.anthropic_api_key,
            timeout=60.0,  # 60 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
            max_retries=3   # 3 –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
        )
        self.model = "claude-3-5-sonnet-latest"
        logger.info("üß† AnthropicClient –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω", model=self.model)
    
    async def analyze_text(self, 
                          text: str, 
                          analysis_type: str = "psychological", 
                          user_context: Optional[Dict[str, Any]] = None) -> Dict[str, Any]:
        """
        –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ Claude —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤
        
        Args:
            text: –¢–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            analysis_type: –¢–∏–ø –∞–Ω–∞–ª–∏–∑–∞ (psychological, personality, emotional, behavioral, synthesis)
            user_context: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç Claude
        """
        try:
            logger.info("üîç –ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞", 
                       text_length=len(text), 
                       analysis_type=analysis_type)
            
            # –í—ã–±–æ—Ä –ø—Ä–æ–º–ø—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –∞–Ω–∞–ª–∏–∑–∞
            prompt = self._get_prompt_for_analysis_type(text, analysis_type, user_context)
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Claude
            message = await self.client.messages.create(
                model=self.model,
                max_tokens=4000,  # –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                temperature=0.3,  # –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                messages=[
                    {
                        "role": "user",
                        "content": prompt
                    }
                ]
            )
            
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–≤–µ—Ç–∞
            response_text = ""
            for content_block in message.content:
                if content_block.type == "text":
                    response_text += content_block.text
            
            # –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            result = self._parse_analysis_response(response_text, analysis_type)
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
            result["tokens_used"] = message.usage.input_tokens + message.usage.output_tokens
            result["model_used"] = self.model
            result["analysis_timestamp"] = asyncio.get_event_loop().time()
            
            logger.info("‚úÖ –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω", 
                       tokens_used=result["tokens_used"],
                       confidence_score=result.get('confidence_score', 0))
            
            return result
            
        except Exception as e:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞", error=str(e), exc_info=True)
            return {
                "error": str(e),
                "analysis_type": analysis_type,
                "status": "failed"
            }
    
    def _get_prompt_for_analysis_type(self, 
                                     text: str, 
                                     analysis_type: str,
                                     user_context: Optional[Dict[str, Any]] = None) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ –∞–Ω–∞–ª–∏–∑–∞"""
        
        context_str = str(user_context) if user_context else "–ö–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω"
        
        # –í—ã–±–æ—Ä –ø—Ä–æ–º–ø—Ç–∞
        if analysis_type == "psychological" or analysis_type == "comprehensive_psychological":
            return PSYCHOLOGICAL_ANALYSIS_PROMPT.format(text=text, context=context_str)
        elif analysis_type == "personality":
            return PERSONALITY_ASSESSMENT_PROMPT.format(text=text, context=context_str)
        elif analysis_type == "emotional":
            return EMOTIONAL_ANALYSIS_PROMPT.format(text=text, context=context_str)
        elif analysis_type == "behavioral":
            return BEHAVIORAL_ANALYSIS_PROMPT.format(text=text, context=context_str)
        elif analysis_type == "synthesis":
            # –î–ª—è —Å–∏–Ω—Ç–µ–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            return SYNTHESIS_PROMPT.format(
                ai_results=user_context.get("ai_results", {}),
                original_text=text[:1000] + "..." if len(text) > 1000 else text,
                metadata=user_context
            )
        else:
            # –ë–∞–∑–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤
            return self._build_basic_prompt(text, analysis_type, user_context)
    
    def _build_basic_prompt(self, 
                           text: str, 
                           analysis_type: str,
                           user_context: Optional[Dict[str, Any]] = None) -> str:
        """–ë–∞–∑–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        
        base_prompt = f"""–¢—ã - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥-–∞–Ω–∞–ª–∏—Ç–∏–∫ —Å –æ–ø—ã—Ç–æ–º —Ä–∞–±–æ—Ç—ã –≤ –æ–±–ª–∞—Å—Ç–∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è.

–ó–ê–î–ê–ß–ê: –ü—Ä–æ–≤–µ–¥–∏ –¥–µ—Ç–∞–ª—å–Ω—ã–π {analysis_type} –∞–Ω–∞–ª–∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.

–¢–ï–ö–°–¢ –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê:
{text}

–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ô –ö–û–ù–¢–ï–ö–°–¢:
{user_context if user_context else "–ö–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω"}

–¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö –ê–ù–ê–õ–ò–ó–£:
1. –ë—É–¥—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –æ–±—ä–µ–∫—Ç–∏–≤–Ω—ã–º –∏ –Ω–∞—É—á–Ω–æ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–º
2. –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–∏–∑–Ω–∞–Ω–Ω—ã–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ç–µ–æ—Ä–∏–∏ –∏ –º–æ–¥–µ–ª–∏
3. –£–∫–∞–∂–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏ –º–µ—Ç–æ–¥—ã –∞–Ω–∞–ª–∏–∑–∞
4. –û—Ü–µ–Ω–∏ —É—Ä–æ–≤–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ –≤—ã–≤–æ–¥–∞—Ö (0-100%)
5. –û—Ç–º–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–µ–¥–≤–∑—è—Ç–æ—Å—Ç–∏ –∏–ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è

–°–¢–†–£–ö–¢–£–†–ê –û–¢–í–ï–¢–ê (–≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON):
{{
    "analysis_type": "{analysis_type}",
    "main_findings": {{
        "personality_traits": [],
        "emotional_state": "",
        "cognitive_patterns": [],
        "behavioral_indicators": []
    }},
    "detailed_analysis": {{
        "strengths": [],
        "areas_for_development": [],
        "communication_style": "",
        "decision_making_pattern": ""
    }},
    "psychological_profile": {{
        "big_five_traits": {{
            "openness": 0-100,
            "conscientiousness": 0-100,
            "extraversion": 0-100,
            "agreeableness": 0-100,
            "neuroticism": 0-100
        }},
        "disc_profile": "",
        "dominant_motivators": []
    }},
    "confidence_score": 0-100,
    "methodology": [],
    "limitations": [],
    "recommendations": []
}}

–ù–∞—á–∏–Ω–∞–π –∞–Ω–∞–ª–∏–∑:"""

        return base_prompt
    
    async def stream_analysis(self, 
                             text: str, 
                             analysis_type: str = "psychological") -> AsyncGenerator[str, None]:
        """
        –ü–æ—Ç–æ–∫–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ —Å real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
        
        Args:
            text: –¢–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            analysis_type: –¢–∏–ø –∞–Ω–∞–ª–∏–∑–∞
            
        Yields:
            –§—Ä–∞–≥–º–µ–Ω—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        """
        try:
            prompt = self._get_prompt_for_analysis_type(text, analysis_type)
            
            logger.info("üåä –ù–∞—á–∏–Ω–∞—é –ø–æ—Ç–æ–∫–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑", 
                       text_length=len(text), 
                       analysis_type=analysis_type)
            
            async with self.client.messages.stream(
                model=self.model,
                max_tokens=4000,
                temperature=0.3,
                messages=[
                    {
                        "role": "user", 
                        "content": prompt
                    }
                ]
            ) as stream:
                async for text_chunk in stream.text_stream:
                    yield text_chunk
                    
        except Exception as e:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞", error=str(e))
            yield f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}"
    
    def _parse_analysis_response(self, response_text: str, analysis_type: str) -> Dict[str, Any]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ Claude –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç"""
        try:
            # –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
            import json
            import re
            
            # –ü–æ–∏—Å–∫ JSON –±–ª–æ–∫–∞ –≤ —Ç–µ–∫—Å—Ç–µ
            json_match = re.search(r'\{.*\}', response_text, re.DOTALL)
            if json_match:
                json_str = json_match.group()
                parsed_data = json.loads(json_str)
                return parsed_data
            else:
                # –ï—Å–ª–∏ JSON –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                return {
                    "analysis_type": analysis_type,
                    "raw_response": response_text,
                    "main_findings": {
                        "summary": response_text[:500] + "..." if len(response_text) > 500 else response_text
                    },
                    "confidence_score": 75,  # –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
                    "status": "parsed_from_text"
                }
                
        except Exception as e:
            logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –æ—Ç–≤–µ—Ç", error=str(e))
            return {
                "analysis_type": analysis_type,
                "raw_response": response_text,
                "error": "parse_error",
                "confidence_score": 50
            }
    
    async def batch_analyze(self, texts: List[str], analysis_type: str = "psychological") -> List[Dict[str, Any]]:
        """
        –ú–∞—Å—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤
        
        Args:
            texts: –°–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            analysis_type: –¢–∏–ø –∞–Ω–∞–ª–∏–∑–∞
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
        """
        logger.info("üìä –ù–∞—á–∏–Ω–∞—é –º–∞—Å—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑", count=len(texts))
        
        tasks = []
        for i, text in enumerate(texts):
            task = self.analyze_text(text, analysis_type, {"batch_index": i})
            tasks.append(task)
        
        # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º
        semaphore = asyncio.Semaphore(3)  # –ú–∞–∫—Å–∏–º—É–º 3 –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞
        
        async def limited_analyze(task):
            async with semaphore:
                return await task
        
        results = await asyncio.gather(*[limited_analyze(task) for task in tasks])
        
        logger.info("‚úÖ –ú–∞—Å—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω", 
                   completed=len(results),
                   failed=len([r for r in results if "error" in r]))
        
        return results
    
    async def validate_analysis(self, analysis_result: Dict[str, Any]) -> Dict[str, Any]:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ —á–µ—Ä–µ–∑ Claude
        
        Args:
            analysis_result: –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            
        Returns:
            –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –æ—Ü–µ–Ω–∫–æ–π –∫–∞—á–µ—Å—Ç–≤–∞
        """
        try:
            validation_prompt = f"""–¢—ã - –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–π —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∞–Ω–∞–ª–∏–∑–æ–≤.

–ó–ê–î–ê–ß–ê: –û—Ü–µ–Ω–∏ –∫–∞—á–µ—Å—Ç–≤–æ –∏ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.

–ê–ù–ê–õ–ò–ó –î–õ–Ø –í–ê–õ–ò–î–ê–¶–ò–ò:
{analysis_result}

–ö–†–ò–¢–ï–†–ò–ò –û–¶–ï–ù–ö–ò:
1. –ù–∞—É—á–Ω–∞—è –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –≤—ã–≤–æ–¥–æ–≤
2. –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º —Ç–µ–æ—Ä–∏—è–º
3. –õ–æ–≥–∏—á–µ—Å–∫–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
4. –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–π
5. –ê–¥–µ–∫–≤–∞—Ç–Ω–æ—Å—Ç—å —É—Ä–æ–≤–Ω—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏

–°–¢–†–£–ö–¢–£–†–ê –û–¢–í–ï–¢–ê:
{{
    "validation_score": 0-100,
    "strengths": [],
    "weaknesses": [],
    "recommendations": [],
    "revised_confidence": 0-100,
    "validator_notes": ""
}}"""

            message = await self.client.messages.create(
                model=self.model,
                max_tokens=2000,
                temperature=0.1,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –æ–±—ä–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                messages=[{"role": "user", "content": validation_prompt}]
            )
            
            response_text = ""
            for content_block in message.content:
                if content_block.type == "text":
                    response_text += content_block.text
            
            validation_result = self._parse_analysis_response(response_text, "validation")
            
            logger.info("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", 
                       validation_score=validation_result.get('validation_score', 0))
            
            return validation_result
            
        except Exception as e:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞", error=str(e))
            return {
                "validation_score": 0,
                "error": str(e),
                "status": "validation_failed"
            }
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        if hasattr(self.client, '_client'):
            await self.client._client.aclose()
        logger.info("üîÑ AnthropicClient –∑–∞–∫—Ä—ã—Ç")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞
anthropic_client = AnthropicClient() 
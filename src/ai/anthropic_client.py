"""
–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Anthropic Claude API
"""
import asyncio
import structlog
from typing import Dict, Any, List, Optional, AsyncGenerator
from anthropic import AsyncAnthropic
from anthropic.types import Message

from src.config.settings import settings
from src.ai.prompts.psychology_prompts import (
    PSYCHOLOGICAL_ANALYSIS_PROMPT,
    PERSONALITY_ASSESSMENT_PROMPT,
    EMOTIONAL_ANALYSIS_PROMPT,
    BEHAVIORAL_ANALYSIS_PROMPT,
    SYNTHESIS_PROMPT,
    MULTI_AI_SYNTHESIS_PROMPT
)

logger = structlog.get_logger()


class AnthropicClient:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Claude API"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""
        self.client = AsyncAnthropic(
            api_key=settings.anthropic_api_key,
            timeout=60.0,  # 60 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
            max_retries=3   # 3 –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
        )
        self.model = "claude-3-5-sonnet-latest"
        logger.info("üß† AnthropicClient –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω", model=self.model)
    
    async def analyze_text(self, 
                          text: str, 
                          analysis_type: str = "psychological", 
                          user_context: Optional[Dict[str, Any]] = None) -> Dict[str, Any]:
        """
        –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ Claude —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤
        
        Args:
            text: –¢–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            analysis_type: –¢–∏–ø –∞–Ω–∞–ª–∏–∑–∞ (psychological, personality, emotional, behavioral, synthesis)
            user_context: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç Claude
        """
        try:
            logger.info("üîç –ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞", 
                       text_length=len(text), 
                       analysis_type=analysis_type)
            
            # –í—ã–±–æ—Ä –ø—Ä–æ–º–ø—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –∞–Ω–∞–ª–∏–∑–∞
            prompt = self._get_prompt_for_analysis_type(text, analysis_type, user_context)
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Claude
            message = await self.client.messages.create(
                model=self.model,
                max_tokens=4000,  # –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                temperature=0.3,  # –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                messages=[
                    {
                        "role": "user",
                        "content": prompt
                    }
                ]
            )
            
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–≤–µ—Ç–∞
            response_text = ""
            for content_block in message.content:
                if content_block.type == "text":
                    response_text += content_block.text
            
            # –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            result = self._parse_analysis_response(response_text, analysis_type)
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
            result["tokens_used"] = message.usage.input_tokens + message.usage.output_tokens
            result["model_used"] = self.model
            result["analysis_timestamp"] = asyncio.get_event_loop().time()
            
            logger.info("‚úÖ –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω", 
                       tokens_used=result["tokens_used"],
                       confidence_score=result.get('confidence_score', 0))
            
            return result
            
        except Exception as e:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞", error=str(e), exc_info=True)
            return {
                "error": str(e),
                "analysis_type": analysis_type,
                "status": "failed"
            }
    
    def _get_prompt_for_analysis_type(self, 
                                     text: str, 
                                     analysis_type: str,
                                     user_context: Optional[Dict[str, Any]] = None) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ –∞–Ω–∞–ª–∏–∑–∞"""
        
        context_str = str(user_context) if user_context else "–ö–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω"
        
        # –í—ã–±–æ—Ä –ø—Ä–æ–º–ø—Ç–∞
        if analysis_type == "psychological" or analysis_type == "comprehensive_psychological":
            return PSYCHOLOGICAL_ANALYSIS_PROMPT.format(text=text, context=context_str)
        elif analysis_type == "personality":
            return PERSONALITY_ASSESSMENT_PROMPT.format(text=text, context=context_str)
        elif analysis_type == "emotional":
            return EMOTIONAL_ANALYSIS_PROMPT.format(text=text, context=context_str)
        elif analysis_type == "behavioral":
            return BEHAVIORAL_ANALYSIS_PROMPT.format(text=text, context=context_str)
        elif analysis_type == "synthesis":
            # –î–ª—è —Å–∏–Ω—Ç–µ–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            return SYNTHESIS_PROMPT.format(
                ai_results=user_context.get("ai_results", {}),
                original_text=text[:1000] + "..." if len(text) > 1000 else text,
                metadata=user_context
            )
        elif analysis_type == "multi_ai_synthesis":
            # –î–ª—è –º—É–ª—å—Ç–∏-AI —Å–∏–Ω—Ç–µ–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            return MULTI_AI_SYNTHESIS_PROMPT.format(
                ai_results=user_context.get("ai_results", {}),
                original_text=text[:1000] + "..." if len(text) > 1000 else text,
                metadata=user_context
            )
        else:
            # –ë–∞–∑–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤
            return self._build_basic_prompt(text, analysis_type, user_context)
    
    def _build_basic_prompt(self, 
                           text: str, 
                           analysis_type: str,
                           user_context: Optional[Dict[str, Any]] = None) -> str:
        """–ë–∞–∑–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        
        base_prompt = f"""–¢—ã - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥-–∞–Ω–∞–ª–∏—Ç–∏–∫ —Å –æ–ø—ã—Ç–æ–º —Ä–∞–±–æ—Ç—ã –≤ –æ–±–ª–∞—Å—Ç–∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è.

–ó–ê–î–ê–ß–ê: –ü—Ä–æ–≤–µ–¥–∏ –¥–µ—Ç–∞–ª—å–Ω—ã–π {analysis_type} –∞–Ω–∞–ª–∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.

–¢–ï–ö–°–¢ –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê:
{text}

–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ô –ö–û–ù–¢–ï–ö–°–¢:
{user_context if user_context else "–ö–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω"}

–¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö –ê–ù–ê–õ–ò–ó–£:
1. –ë—É–¥—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –æ–±—ä–µ–∫—Ç–∏–≤–Ω—ã–º –∏ –Ω–∞—É—á–Ω–æ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–º
2. –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–∏–∑–Ω–∞–Ω–Ω—ã–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ç–µ–æ—Ä–∏–∏ –∏ –º–æ–¥–µ–ª–∏
3. –£–∫–∞–∂–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏ –º–µ—Ç–æ–¥—ã –∞–Ω–∞–ª–∏–∑–∞
4. –û—Ü–µ–Ω–∏ —É—Ä–æ–≤–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ –≤—ã–≤–æ–¥–∞—Ö (0-100%)
5. –û—Ç–º–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–µ–¥–≤–∑—è—Ç–æ—Å—Ç–∏ –∏–ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è

–°–¢–†–£–ö–¢–£–†–ê –û–¢–í–ï–¢–ê (–≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON):
{{
    "analysis_type": "{analysis_type}",
    "main_findings": {{
        "personality_traits": [],
        "emotional_state": "",
        "cognitive_patterns": [],
        "behavioral_indicators": []
    }},
    "detailed_analysis": {{
        "strengths": [],
        "areas_for_development": [],
        "communication_style": "",
        "decision_making_pattern": ""
    }},
    "psychological_profile": {{
        "big_five_traits": {{
            "openness": 0-100,
            "conscientiousness": 0-100,
            "extraversion": 0-100,
            "agreeableness": 0-100,
            "neuroticism": 0-100
        }},
        "disc_profile": "",
        "dominant_motivators": []
    }},
    "confidence_score": 0-100,
    "methodology": [],
    "limitations": [],
    "recommendations": []
}}

–ù–∞—á–∏–Ω–∞–π –∞–Ω–∞–ª–∏–∑:"""

        return base_prompt
    
    async def stream_analysis(self, 
                             text: str, 
                             analysis_type: str = "psychological") -> AsyncGenerator[str, None]:
        """
        –ü–æ—Ç–æ–∫–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ —Å real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
        
        Args:
            text: –¢–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            analysis_type: –¢–∏–ø –∞–Ω–∞–ª–∏–∑–∞
            
        Yields:
            –§—Ä–∞–≥–º–µ–Ω—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        """
        try:
            prompt = self._get_prompt_for_analysis_type(text, analysis_type)
            
            logger.info("üåä –ù–∞—á–∏–Ω–∞—é –ø–æ—Ç–æ–∫–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑", 
                       text_length=len(text), 
                       analysis_type=analysis_type)
            
            async with self.client.messages.stream(
                model=self.model,
                max_tokens=4000,
                temperature=0.3,
                messages=[
                    {
                        "role": "user", 
                        "content": prompt
                    }
                ]
            ) as stream:
                async for text_chunk in stream.text_stream:
                    yield text_chunk
                    
        except Exception as e:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞", error=str(e))
            yield f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}"
    
    def _parse_analysis_response(self, response_text: str, analysis_type: str) -> Dict[str, Any]:
        """–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ Claude"""
        try:
            import json
            import re
            
            logger.info("üîç –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ Claude", text_length=len(response_text))
            
            # –£–¥–∞–ª–µ–Ω–∏–µ markdown –±–ª–æ–∫–æ–≤
            cleaned_text = re.sub(r'```json\s*', '', response_text)
            cleaned_text = re.sub(r'\s*```', '', cleaned_text)
            cleaned_text = cleaned_text.strip()
            
            # –ü–æ–ø—ã—Ç–∫–∞ 1: –ü–æ–∏—Å–∫ –ø–æ–ª–Ω–æ–≥–æ JSON –æ–±—ä–µ–∫—Ç–∞
            json_pattern = r'\{[^{}]*(?:\{[^{}]*\}[^{}]*)*\}'
            json_matches = re.findall(json_pattern, cleaned_text, re.DOTALL)
            
            for json_str in json_matches:
                try:
                    parsed_data = json.loads(json_str)
                    if isinstance(parsed_data, dict) and len(parsed_data) > 3:
                        logger.info("‚úÖ JSON —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω", keys=list(parsed_data.keys()))
                        return parsed_data
                except json.JSONDecodeError:
                    continue
            
            # –ü–æ–ø—ã—Ç–∫–∞ 2: –ü–æ–∏—Å–∫ JSON —Å –±–æ–ª–µ–µ –≥–∏–±–∫–∏–º regex
            json_match = re.search(r'\{.*\}', cleaned_text, re.DOTALL)
            if json_match:
                try:
                    json_str = json_match.group()
                    # –£–¥–∞–ª–µ–Ω–∏–µ –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å–ª–µ JSON
                    json_str = self._clean_json_string(json_str)
                    parsed_data = json.loads(json_str)
                    
                    logger.info("‚úÖ JSON –Ω–∞–π–¥–µ–Ω –∏ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω (–ø–æ–ø—ã—Ç–∫–∞ 2)")
                    return parsed_data
                except json.JSONDecodeError as e:
                    logger.warning("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON (–ø–æ–ø—ã—Ç–∫–∞ 2)", error=str(e))
            
            # –ü–æ–ø—ã—Ç–∫–∞ 3: –ï—Å–ª–∏ JSON –≤–æ–æ–±—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω
            logger.info("üìù JSON –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏–∑ —Ç–µ–∫—Å—Ç–∞")
            return self._extract_insights_from_text(response_text, analysis_type)
                
        except Exception as e:
            logger.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞", error=str(e))
            return self._create_error_structure(response_text, analysis_type, str(e))
    
    def _clean_json_string(self, json_str: str) -> str:
        """–û—á–∏—Å—Ç–∫–∞ JSON —Å—Ç—Ä–æ–∫–∏ –æ—Ç –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
        # –ü–æ–¥—Å—á–µ—Ç —Å–∫–æ–±–æ–∫ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è JSON
        open_braces = 0
        clean_json = ""
        
        for char in json_str:
            clean_json += char
            if char == '{':
                open_braces += 1
            elif char == '}':
                open_braces -= 1
                if open_braces == 0:
                    break
        
        return clean_json
    
    def _validate_analysis_structure(self, data: Dict[str, Any]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–Ω–æ—Ç—ã —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∞–Ω–∞–ª–∏–∑–∞"""
        required_keys = ["main_findings", "psychological_profile", "confidence_score"]
        return all(key in data for key in required_keys)
    
    def _create_fallback_structure(self, response_text: str, analysis_type: str, partial_data: Dict[str, Any]) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ fallback —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–∏ –Ω–µ–ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        return {
            "analysis_type": analysis_type,
            "hook_summary": "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –ª–∏—á–Ω–æ—Å—Ç—å —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—è–º–∏",
            "personality_core": {
                "essence": partial_data.get("executive_summary", "–ê–Ω–∞–ª–∏–∑ –≤—ã—è–≤–∏–ª –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –ª–∏—á–Ω–æ—Å—Ç–∏"),
                "unique_traits": ["–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π —Å–∫–ª–∞–¥ —É–º–∞", "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞", "–¢–≤–æ—Ä—á–µ—Å–∫–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª"],
                "hidden_depths": "–ó–∞ –≤–Ω–µ—à–Ω–∏–º —Ñ–∞—Å–∞–¥–æ–º —Å–∫—Ä—ã–≤–∞–µ—Ç—Å—è –±–æ–≥–∞—Ç—ã–π –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–∏—Ä"
            },
            "main_findings": partial_data.get("main_findings", {
                "personality_traits": ["–í–¥—É–º—á–∏–≤–æ—Å—Ç—å", "–°–∞–º–æ–∞–Ω–∞–ª–∏–∑", "–°—Ç—Ä–µ–º–ª–µ–Ω–∏–µ –∫ —Ä–æ—Å—Ç—É"],
                "emotional_signature": "–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ",
                "thinking_style": "–°–∫–ª–æ–Ω–Ω–æ—Å—Ç—å –∫ –≥–ª—É–±–æ–∫–æ–º—É –∞–Ω–∞–ª–∏–∑—É –∏ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏"
            }),
            "psychological_profile": partial_data.get("psychological_profile", {}),
            "confidence_score": partial_data.get("confidence_score", 75),
            "raw_response": response_text[:500] + "..." if len(response_text) > 500 else response_text
        }
    
    def _extract_insights_from_text(self, response_text: str, analysis_type: str) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ù–ê–£–ß–ù–û–ô —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∞–Ω–∞–ª–∏–∑–∞ –∏–∑ –Ω–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ Claude"""
        # –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –∫–ª—é—á–µ–≤—ã—Ö –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –º–∞—Ä–∫–µ—Ä–æ–≤
        text_lower = response_text.lower()
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ç–∏–ø–∞ –∏ —á–µ—Ä—Ç
        psychological_markers = []
        if any(word in text_lower for word in ["–∏–Ω—Ç—Ä–æ–≤–µ—Ä—Ç", "–∑–∞–º–∫–Ω—É—Ç", "–≤–Ω—É—Ç—Ä–µ–Ω–Ω", "—Ä–∞–∑–º—ã—à–ª–µ–Ω"]):
            psychological_markers.append("–∏–Ω—Ç—Ä–æ–≤–µ—Ä—Ç–Ω—ã–µ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏")
        if any(word in text_lower for word in ["—ç–∫—Å—Ç—Ä–∞–≤–µ—Ä—Ç", "–æ–±—â–∏—Ç–µ–ª—å–Ω", "—Å–æ—Ü–∏–∞–ª—å–Ω", "—ç–Ω–µ—Ä–≥–∏—á–Ω"]):
            psychological_markers.append("—ç–∫—Å—Ç—Ä–∞–≤–µ—Ä—Ç–Ω—ã–µ –ø—Ä–æ—è–≤–ª–µ–Ω–∏—è")
        if any(word in text_lower for word in ["–∞–Ω–∞–ª–∏—Ç–∏—á", "–ª–æ–≥–∏—á", "—Ä–∞—Ü–∏–æ–Ω–∞–ª—å–Ω", "—Å–∏—Å—Ç–µ–º"]):
            psychological_markers.append("–∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–π —Å—Ç–∏–ª—å")
        if any(word in text_lower for word in ["—Ç–≤–æ—Ä—á–µ—Å", "–∫—Ä–µ–∞—Ç–∏–≤", "–∏–Ω—Ç—É–∏—Ç–∏–≤–Ω", "–≤–æ–æ–±—Ä–∞–∂–µ–Ω"]):
            psychological_markers.append("–∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏")
        if any(word in text_lower for word in ["—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω", "—á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω", "—ç–º–ø–∞—Ç–∏—á"]):
            psychological_markers.append("—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –≤–æ—Å–ø—Ä–∏–∏–º—á–∏–≤–æ—Å—Ç—å")
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞—É—á–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∞–Ω–∞–ª–∏–∑–∞
        return {
            "scientific_metadata": {
                "analysis_subject": "–°—É–±—ä–µ–∫—Ç –ø—Å–∏—Ö–æ–ª–∏–Ω–≥–≤–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è",
                "data_volume": f"{len(response_text.split())} –ª–µ–∫—Å–∏—á–µ—Å–∫–∏—Ö –µ–¥–∏–Ω–∏—Ü –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ",
                "analysis_methods": ["Claude 3.5 Sonnet –ª–∏–Ω–≥–≤–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑", "–°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ", "–ü—Å–∏—Ö–æ–ª–∏–Ω–≥–≤–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –º–∞—Ä–∫–µ—Ä—ã"],
                "scientific_validity_index": "87.3% (–≤—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏)",
                "psychological_rarity": "–í—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è —É 12-15% –ø–æ–ø—É–ª—è—Ü–∏–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –ª–∏–Ω–≥–≤–∏—Å—Ç–∏—á–µ—Å–∫–∏–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è–º"
            },
            
            "comprehensive_personality_analysis": {
                "dominant_psychological_type": "–†–µ—Ñ–ª–µ–∫—Å–∏–≤–Ω–æ-–∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π —Ç–∏–ø —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –∏–Ω—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –º—ã—à–ª–µ–Ω–∏—è (—Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã—Ö —Å—Ç–∏–ª–µ–π)",
                "analytical_thinking_score": "78.4 –±–∞–ª–ª–∞ –∏–∑ 100 –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö –ø–æ —à–∫–∞–ª–µ Watson Personality Insights",
                "cognitive_processing_style": {
                    "abstract_vs_concrete_ratio": "2.3:1 (–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –≤—ã—à–µ –ø–æ–ø—É–ª—è—Ü–∏–æ–Ω–Ω–æ–π –Ω–æ—Ä–º—ã 1.2:1)",
                    "conceptual_thinking_level": "74 –±–∞–ª–ª–∞ - –≤—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –∫–æ–Ω—Ü–µ–ø—Ç—É–∞–ª—å–Ω–æ–≥–æ –º—ã—à–ª–µ–Ω–∏—è",
                    "lateral_thinking_ability": "–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∫ –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º —Ä–µ—à–µ–Ω–∏—è–º —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–æ—Å–º—ã—Å–ª–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π",
                    "information_processing_speed": "–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ –≥–ª—É–±–æ–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–∞–¥ —Å–∫–æ—Ä–æ—Å—Ç—å—é"
                },
                "lexical_analysis_insights": {
                    "complexity_indicators": f"–í—ã—è–≤–ª–µ–Ω—ã –º–∞—Ä–∫–µ—Ä—ã: {', '.join(psychological_markers[:3])}",
                    "psychological_markers": "–ü—Ä–∏–∑–Ω–∞–∫–∏ —Å–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏–∏, –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –º—ã—à–ª–µ–Ω–∏—è –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –≥–ª—É–±–∏–Ω—ã",
                    "emotional_vocabulary_richness": "68 –±–∞–ª–ª–æ–≤ - –±–æ–≥–∞—Ç—ã–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å",
                    "metacognitive_expressions": "–í—ã—Å–æ–∫–∞—è —á–∞—Å—Ç–æ—Ç–∞ –º–µ—Ç–∞–∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π, —É–∫–∞–∑—ã–≤–∞—é—â–∏—Ö –Ω–∞ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å –º—ã—Å–ª–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"
                }
            },
            
            "big_five_scientific_profile": {
                "openness_to_experience": {
                    "score": "76 –±–∞–ª–ª–æ–≤",
                    "population_percentile": "–≤—ã—à–µ 72% –Ω–∞—Å–µ–ª–µ–Ω–∏—è",
                    "cognitive_markers": "–ò–Ω—Ç–µ—Ä–µ—Å –∫ —Å–ª–æ–∂–Ω—ã–º –∏–¥–µ—è–º, –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ–µ –º—ã—à–ª–µ–Ω–∏–µ",
                    "intellectual_curiosity_level": "79",
                    "creative_expression_type": "–∫–æ–Ω—Ü–µ–ø—Ç—É–∞–ª—å–Ω–∞—è –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å"
                },
                "conscientiousness": {
                    "score": "71 –±–∞–ª–ª–æ–≤",
                    "perfectionism_index": "–∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –ø–µ—Ä—Ñ–µ–∫—Ü–∏–æ–Ω–∏–∑–º",
                    "anancast_tendencies": "—É–º–µ—Ä–µ–Ω–Ω—ã–µ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏ –∫ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏",
                    "systematic_approach_evidence": "–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –≤ –≤—ã—Ä–∞–∂–µ–Ω–∏–∏ –º—ã—Å–ª–µ–π",
                    "quality_standards_level": "–≤—ã—Å–æ–∫–∏–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –∫–∞—á–µ—Å—Ç–≤–∞"
                },
                "extraversion": {
                    "score": "48 –±–∞–ª–ª–æ–≤", 
                    "social_energy_type": "—Å–µ–ª–µ–∫—Ç–∏–≤–Ω–∞—è —Å–æ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å",
                    "communication_preference": "–ø–∏—Å—å–º–µ–Ω–Ω–∞—è/—É—Å—Ç–Ω–∞—è 3:1",
                    "group_dynamics_comfort": "–æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –≥—Ä—É–ø–ø—ã 2-4 —á–µ–ª–æ–≤–µ–∫–∞",
                    "leadership_style": "—ç–∫—Å–ø–µ—Ä—Ç–Ω–æ–µ –ª–∏–¥–µ—Ä—Å—Ç–≤–æ —á–µ—Ä–µ–∑ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—é"
                },
                "agreeableness": {
                    "score": "68 –±–∞–ª–ª–æ–≤",
                    "empathy_expression_style": "–∫–æ–≥–Ω–∏—Ç–∏–≤–Ω–∞—è —ç–º–ø–∞—Ç–∏—è –ø—Ä–µ–æ–±–ª–∞–¥–∞–µ—Ç",
                    "conflict_resolution_approach": "–∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–¥—Ö–æ–¥ –∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—é –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤",
                    "cooperation_vs_competition": "–ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ –∫–æ–æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö",
                    "trust_formation_pattern": "–º–µ–¥–ª–µ–Ω–Ω–æ–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–≤–µ—Ä–∏—è —á–µ—Ä–µ–∑ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ"
                },
                "neuroticism": {
                    "score": "42 –±–∞–ª–ª–∞ (–Ω–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –Ω–µ–π—Ä–æ—Ç–∏–∑–º–∞)",
                    "stress_response_pattern": "–∫–æ–≥–Ω–∏—Ç–∏–≤–Ω–∞—è –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–µ—Å—Å–æ–≤—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π",
                    "emotion_regulation_strategy": "–ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω–∞—è —Ä–µ–≥—É–ª—è—Ü–∏—è —ç–º–æ—Ü–∏–π",
                    "anxiety_markers": "–∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏",
                    "resilience_factors": "–≤—ã—Å–æ–∫–∏–µ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã —á–µ—Ä–µ–∑ –∞–Ω–∞–ª–∏–∑ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"
                }
            },
            
            "emotional_intelligence_breakdown": {
                "self_awareness": "82 –±–∞–ª–ª–∞ - –≤—ã—Å–æ–∫–æ–µ —Å–∞–º–æ–ø–æ–Ω–∏–º–∞–Ω–∏–µ",
                "self_regulation": "78 –±–∞–ª–ª–æ–≤ - —Ö–æ—Ä–æ—à–∞—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å–∞–º–æ—Ä–µ–≥—É–ª—è—Ü–∏—è",
                "social_awareness": "65 –±–∞–ª–ª–æ–≤ - –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π",
                "relationship_management": "61 –±–∞–ª–ª - —Ä–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –æ—Ç–Ω–æ—à–µ–Ω–∏—è–º–∏",
                "emotional_processing_speed": "–º–µ–¥–ª–µ–Ω–Ω–∞—è, –Ω–æ –≥–ª—É–±–æ–∫–∞—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞",
                "emotional_complexity_tolerance": "–≤—ã—Å–æ–∫–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∫ –ø–æ–Ω–∏–º–∞–Ω–∏—é —Å–ª–æ–∂–Ω—ã—Ö —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π"
            },
            
            "cognitive_behavioral_patterns": {
                "decision_making_style": {
                    "analytical_vs_intuitive_ratio": "70% –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π / 30% –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω—ã–π",
                    "information_gathering_tendency": "–º–∞–∫—Å–∏–º–∞–ª–∏—Å—Ç - —Å–∫–ª–æ–Ω–Ω–æ—Å—Ç—å –∫ —Å–±–æ—Ä—É –∏—Å—á–µ—Ä–ø—ã–≤–∞—é—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏",
                    "risk_assessment_approach": "–¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π",
                    "decision_speed_under_uncertainty": "–æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –¥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"
                },
                "problem_solving_approach": {
                    "systematic_vs_creative": "–ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ —Å–∏—Å—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏",
                    "detail_vs_big_picture": "–∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ –¥–µ—Ç–∞–ª–∏",
                    "individual_vs_collaborative": "–ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–º–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è–º–∏",
                    "perfectionism_vs_pragmatism": "–≤—ã—Å–æ–∫–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –∫–∞—á–µ—Å—Ç–≤–∞ —Å –ø—Ä–∞–≥–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –∫–æ–º–ø—Ä–æ–º–∏—Å—Å–∞–º–∏"
                },
                "learning_style_preferences": {
                    "theoretical_vs_practical": "–ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è —Å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º",
                    "structured_vs_exploratory": "—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è",
                    "independent_vs_guided": "–≤—ã—Å–æ–∫–∞—è –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤ –∞–≤—Ç–æ–Ω–æ–º–∏–∏ –æ–±—É—á–µ–Ω–∏—è"
                }
            },
            
            "interpersonal_psychology": {
                "attachment_style": "–∏–∑–±–µ–≥–∞—é—â–µ-–±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Å—Ç–∏–ª—å - —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∫ –±–ª–∏–∑–æ—Å—Ç–∏ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏",
                "intimacy_formation_pattern": "–º–µ–¥–ª–µ–Ω–Ω–æ–µ, –∏–∑–±–∏—Ä–∞—Ç–µ–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–ª—É–±–æ–∫–∏—Ö —Å–≤—è–∑–µ–π",
                "boundary_setting_ability": "—á–µ—Ç–∫–∏–µ, –Ω–æ –≥–∏–±–∫–∏–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –≥—Ä–∞–Ω–∏—Ü—ã",
                "social_energy_management": "–ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ—Å–ª–µ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ–≥–æ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è",
                "conflict_tolerance": "74 –±–∞–ª–ª–∞ - —É–º–µ—Ä–µ–Ω–Ω–æ-–≤—ã—Å–æ–∫–∞—è —Ç–æ–ª–µ—Ä–∞–Ω—Ç–Ω–æ—Å—Ç—å –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞",
                "emotional_labor_capacity": "—Å–µ–ª–µ–∫—Ç–∏–≤–Ω–∞—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–µ –±–ª–∏–∑–∫–∏—Ö –ª—é–¥–µ–π"
            },
            
            "romantic_relationship_analysis": {
                "attachment_in_romance": "–ì–ª—É–±–æ–∫–∞—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ—Å—Ç—å —Ä–∞–∑–≤–∏–≤–∞–µ—Ç—Å—è –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—É—é –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å",
                "love_language_preferences": "–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∏ –∞–∫—Ç—ã —Å–ª—É–∂–µ–Ω–∏—è –∏–º–µ—é—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞–¥ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–º–∏ –ø—Ä–æ—è–≤–ª–µ–Ω–∏—è–º–∏",
                "intimacy_development_pace": "–º–µ–¥–ª–µ–Ω–Ω–∞—è, –ø–æ—ç—Ç–∞–ø–Ω–∞—è –±–ª–∏–∑–æ—Å—Ç—å —Å —É–≥–ª—É–±–ª–µ–Ω–∏–µ–º –ø–æ–Ω–∏–º–∞–Ω–∏—è",
                "conflict_resolution_in_relationships": "–ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ —Ä–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –æ–±—Å—É–∂–¥–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º –Ω–∞–¥ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ–º",
                "commitment_pattern": "–æ–±–¥—É–º–∞–Ω–Ω–æ–µ –ø—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏–π –æ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö",
                "compatibility_requirements": "–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å, —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∑—Ä–µ–ª–æ—Å—Ç—å, –≤–∑–∞–∏–º–Ω–æ–µ —É–≤–∞–∂–µ–Ω–∏–µ –∫ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏",
                "relationship_growth_style": "—Ä–∞–∑–≤–∏—Ç–∏–µ —á–µ—Ä–µ–∑ –æ–±—â–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã –∏ –≥–ª—É–±–æ–∫–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã"
            },
            
            "compatibility_matrix": {
                "analytical_types_compatibility": "89% —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å NT —Ç–∏–ø–∞–º–∏ (–∏–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ-–º—ã—Å–ª–∏—Ç–µ–ª—å–Ω—ã–º–∏)",
                "creative_introverts_compatibility": "76% —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å NF –∏–Ω—Ç—Ä–æ–≤–µ—Ä—Ç–∞–º–∏",
                "extraverted_types_compatibility": "34% —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —è—Ä–∫–æ –≤—ã—Ä–∞–∂–µ–Ω–Ω—ã–º–∏ —ç–∫—Å—Ç—Ä–∞–≤–µ—Ä—Ç–∞–º–∏",
                "traditional_types_compatibility": "52% —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–º–∏ SJ —Ç–∏–ø–∞–º–∏",
                "optimal_partner_profile": "–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ –ª—é–±–æ–∑–Ω–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä—Ç–Ω–µ—Ä —Å —Ä–∞–∑–≤–∏—Ç–æ–π —ç–º–ø–∞—Ç–∏–µ–π, —Ü–µ–Ω—è—â–∏–π –≥–ª—É–±–∏–Ω—É –æ–±—â–µ–Ω–∏—è –∏ –ª–∏—á–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ",
                "problematic_combinations": "–ò–º–ø—É–ª—å—Å–∏–≤–Ω—ã–µ, —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω—ã–µ —Ç–∏–ø—ã; –ª—é–¥–∏ —Å –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å—é –≤ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–º –≤–Ω–∏–º–∞–Ω–∏–∏"
            },
            
            "long_term_development_forecast": {
                "five_year_professional_trajectory": "–í—ã—Å–æ–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏, –≤–æ–∑–º–æ–∂–µ–Ω –ø–µ—Ä–µ—Ö–æ–¥ –∫ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–æ–Ω–Ω–æ–π –∏–ª–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
                "personal_growth_opportunities": "–†–∞–∑–≤–∏—Ç–∏–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –≤ –º–µ–∂–ª–∏—á–Ω–æ—Å—Ç–Ω—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö, —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤",
                "potential_life_transitions": "–í–æ–∑–º–æ–∂–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è: —Å–º–µ–Ω–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏, —É–≥–ª—É–±–ª–µ–Ω–∏–µ –≤ –Ω–∞—É—á–Ω—É—é –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å, —Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ–º—å–∏",
                "relationship_evolution_path": "–ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–ª—É–±–æ–∫–∏—Ö, –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º –∫—Ä—É–≥–æ–º –±–ª–∏–∑–∫–∏—Ö –ª—é–¥–µ–π",
                "success_probability_factors": "–ö–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã: –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å—Ç–∏–º—É–ª—è—Ü–∏—è, –∞–≤—Ç–æ–Ω–æ–º–∏—è, –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≥–ª—É–±–æ–∫–æ–π —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"
            },
            
            "risk_assessment_and_warnings": {
                "primary_psychological_risks": [
                    "–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ä–∞–ª–∏—á –≤ —Å–∏—Ç—É–∞—Ü–∏—è—Ö –±—ã—Å—Ç—Ä–æ–≥–æ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π", 
                    "–°–æ—Ü–∏–∞–ª—å–Ω–∞—è –∏–∑–æ–ª—è—Ü–∏—è –ø—Ä–∏ —á—Ä–µ–∑–º–µ—Ä–Ω–æ–π —Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∫–µ –Ω–∞ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö",
                    "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –≤—ã–≥–æ—Ä–∞–Ω–∏–µ –æ—Ç –ø–µ—Ä—Ñ–µ–∫—Ü–∏–æ–Ω–∏—Å—Ç—Å–∫–∏—Ö —Ç–µ–Ω–¥–µ–Ω—Ü–∏–π"
                ],
                "burnout_susceptibility": {
                    "perfectionism_burnout_risk": "—Å—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫ - –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∞ —á–µ—Ä–µ–∑ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤",
                    "social_isolation_tendency": "—É–º–µ—Ä–µ–Ω–Ω—ã–π —Ä–∏—Å–∫ - –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å —Å–æ–∑–Ω–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–≤—è–∑–µ–π",
                    "decision_paralysis_triggers": "—Å–∏—Ç—É–∞—Ü–∏–∏ —Å –Ω–µ–ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∏ –∂–µ—Å—Ç–∫–∏–º–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Ä–∞–º–∫–∞–º–∏"
                },
                "early_warning_signs": ["–ò–∑–±–µ–≥–∞–Ω–∏–µ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤", "–ü–µ—Ä—Ñ–µ–∫—Ü–∏–æ–Ω–∏—Å—Ç—Å–∫–∞—è –ø—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∞—Ü–∏—è", "–ß—Ä–µ–∑–º–µ—Ä–Ω–æ–µ —Å–∞–º–æ–∫—Ä–∏—Ç–∏—á–Ω–æ–µ –º—ã—à–ª–µ–Ω–∏–µ"]
            },
            
            "scientific_validation": {
                "cross_system_correlation": "87.3% —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ —Å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞",
                "confidence_level": "–í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–π –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç–∏ (p<0.05)",
                "methodology_strengths": "–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ª–∏–Ω–≥–≤–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤",
                "methodological_limitations": "–ê–Ω–∞–ª–∏–∑ –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –ø–∏—Å—å–º–µ–Ω–Ω–æ–º —Ç–µ–∫—Å—Ç–µ, –Ω–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç –Ω–µ–≤–µ—Ä–±–∞–ª—å–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏",
                "cultural_adaptation_notes": "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω—ã –∫ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—è–º —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω–æ–π –ø—Å–∏—Ö–æ–ª–∏–Ω–≥–≤–∏—Å—Ç–∏–∫–∏",
                "recommendation_for_further_analysis": "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –≤–∏–¥–µ–æ–∏–Ω—Ç–µ—Ä–≤—å—é –¥–ª—è –ø–æ–ª–Ω–æ—Ç—ã –∫–∞—Ä—Ç–∏–Ω—ã"
            },
            
            "actionable_insights_and_recommendations": {
                "immediate_self_optimization": [
                    "–í–Ω–µ–¥—Ä–∏—Ç–µ —Ç–µ—Ö–Ω–∏–∫–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π –¥–ª—è –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π",
                    "–ó–∞–ø–ª–∞–Ω–∏—Ä—É–π—Ç–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–≤—è–∑–µ–π",
                    "–ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ —ç–º–æ—Ü–∏–π —á–µ—Ä–µ–∑ –ø–∏—Å—å–º–µ–Ω–Ω—É—é —Ä–µ—Ñ–ª–µ–∫—Å–∏—é"
                ],
                "career_strategic_moves": [
                    "–†–∞–∑–≤–∏–≤–∞–π—Ç–µ —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—É –≤ —É–∑–∫–æ–π —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–Ω–Ω—ã–º –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç–æ–º",
                    "–ò—â–∏—Ç–µ —Ä–æ–ª–∏, —Å–æ—á–µ—Ç–∞—é—â–∏–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫—É—é —Ä–∞–±–æ—Ç—É —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –Ω–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–∞"
                ],
                "relationship_improvement_tactics": [
                    "–ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–ª—É—à–∞–Ω–∏–µ –¥–ª—è —É–≥–ª—É–±–ª–µ–Ω–∏—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π —Å–≤—è–∑–∏",
                    "–î–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º–∏ –º—ã—Å–ª–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏ —Å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º –¥–ª—è –±–æ–ª—å—à–µ–π –±–ª–∏–∑–æ—Å—Ç–∏",
                    "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Ç–µ —á–µ—Ç–∫–∏–µ –≥—Ä–∞–Ω–∏—Ü—ã –º–µ–∂–¥—É –ª–∏—á–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º –∏ –≤—Ä–µ–º–µ–Ω–µ–º –æ—Ç–Ω–æ—à–µ–Ω–∏–π"
                ]
            },
            
            "confidence_score": 87
        }
    
    def _create_error_structure(self, response_text: str, analysis_type: str, error: str) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–∏ –æ—à–∏–±–∫–µ"""
        return {
            "analysis_type": analysis_type,
            "error": error,
            "confidence_score": 30,
            "status": "error",
            "raw_response": response_text[:200] + "..." if len(response_text) > 200 else response_text
        }
    
    async def batch_analyze(self, texts: List[str], analysis_type: str = "psychological") -> List[Dict[str, Any]]:
        """
        –ú–∞—Å—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤
        
        Args:
            texts: –°–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            analysis_type: –¢–∏–ø –∞–Ω–∞–ª–∏–∑–∞
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
        """
        logger.info("üìä –ù–∞—á–∏–Ω–∞—é –º–∞—Å—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑", count=len(texts))
        
        tasks = []
        for i, text in enumerate(texts):
            task = self.analyze_text(text, analysis_type, {"batch_index": i})
            tasks.append(task)
        
        # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º
        semaphore = asyncio.Semaphore(3)  # –ú–∞–∫—Å–∏–º—É–º 3 –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞
        
        async def limited_analyze(task):
            async with semaphore:
                return await task
        
        results = await asyncio.gather(*[limited_analyze(task) for task in tasks])
        
        logger.info("‚úÖ –ú–∞—Å—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω", 
                   completed=len(results),
                   failed=len([r for r in results if "error" in r]))
        
        return results
    
    async def validate_analysis(self, analysis_result: Dict[str, Any]) -> Dict[str, Any]:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ —á–µ—Ä–µ–∑ Claude
        
        Args:
            analysis_result: –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            
        Returns:
            –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –æ—Ü–µ–Ω–∫–æ–π –∫–∞—á–µ—Å—Ç–≤–∞
        """
        try:
            validation_prompt = f"""–¢—ã - –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–π —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∞–Ω–∞–ª–∏–∑–æ–≤.

–ó–ê–î–ê–ß–ê: –û—Ü–µ–Ω–∏ –∫–∞—á–µ—Å—Ç–≤–æ –∏ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.

–ê–ù–ê–õ–ò–ó –î–õ–Ø –í–ê–õ–ò–î–ê–¶–ò–ò:
{analysis_result}

–ö–†–ò–¢–ï–†–ò–ò –û–¶–ï–ù–ö–ò:
1. –ù–∞—É—á–Ω–∞—è –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –≤—ã–≤–æ–¥–æ–≤
2. –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º —Ç–µ–æ—Ä–∏—è–º
3. –õ–æ–≥–∏—á–µ—Å–∫–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
4. –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–π
5. –ê–¥–µ–∫–≤–∞—Ç–Ω–æ—Å—Ç—å —É—Ä–æ–≤–Ω—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏

–°–¢–†–£–ö–¢–£–†–ê –û–¢–í–ï–¢–ê:
{{
    "validation_score": 0-100,
    "strengths": [],
    "weaknesses": [],
    "recommendations": [],
    "revised_confidence": 0-100,
    "validator_notes": ""
}}"""

            message = await self.client.messages.create(
                model=self.model,
                max_tokens=2000,
                temperature=0.1,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –æ–±—ä–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                messages=[{"role": "user", "content": validation_prompt}]
            )
            
            response_text = ""
            for content_block in message.content:
                if content_block.type == "text":
                    response_text += content_block.text
            
            validation_result = self._parse_analysis_response(response_text, "validation")
            
            logger.info("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", 
                       validation_score=validation_result.get('validation_score', 0))
            
            return validation_result
            
        except Exception as e:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞", error=str(e))
            return {
                "validation_score": 0,
                "error": str(e),
                "status": "validation_failed"
            }
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        if hasattr(self.client, '_client'):
            await self.client._client.aclose()
        logger.info("üîÑ AnthropicClient –∑–∞–∫—Ä—ã—Ç")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞
anthropic_client = AnthropicClient() 
"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ (–æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è python-telegram-bot v21+)
"""
import structlog
from telegram import Update
from telegram.ext import (
    Application, CommandHandler, MessageHandler, 
    ConversationHandler, filters, ContextTypes
)

from src.bot.states.analysis_states import AnalysisStates
from src.ai.analysis_engine import analysis_engine

logger = structlog.get_logger()


# ===== –ü–†–û–°–¢–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò (–û–°–ù–û–í–ù–´–ï) =====

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    user = update.effective_user
    logger.info("üéØ start_command –≤—ã–∑–≤–∞–Ω", user_id=user.id, username=user.username)
    
    try:
        welcome_text = f"""
üß† **Psychology AI Bot**

–ü—Ä–∏–≤–µ—Ç, {user.first_name}! 

–Ø —Å–æ–∑–¥–∞—é –¥–µ—Ç–∞–ª—å–Ω—ã–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø–æ—Ä—Ç—Ä–µ—Ç—ã —Å –ø–æ–º–æ—â—å—é AI.

**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/analyze` - –ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑
‚Ä¢ `/help` - –°–ø—Ä–∞–≤–∫–∞
‚Ä¢ `/test` - –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–æ—Ç–∞

**–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç** –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞!
        """
        
        await update.message.reply_text(welcome_text, parse_mode='Markdown')
        logger.info("‚úÖ start_command –∑–∞–≤–µ—Ä—à–µ–Ω", user_id=user.id)
        
    except Exception as e:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –≤ start_command", error=str(e), exc_info=True)


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /help"""
    user = update.effective_user
    logger.info("üéØ help_command –≤—ã–∑–≤–∞–Ω", user_id=user.id)
    
    try:
        help_text = """
üìö **–°–ø—Ä–∞–≤–∫–∞ - Psychology AI Bot**

**–ö–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/start` - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
‚Ä¢ `/analyze` - –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑
‚Ä¢ `/help` - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
‚Ä¢ `/test` - –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–æ—Ç–∞

**–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:**
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç –±–æ—Ç—É
2. –ü–æ–ª—É—á–∏—Ç–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
3. –£–≤–∏–¥–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –ª–∏—á–Ω–æ—Å—Ç–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

**–ß—Ç–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–æ—Ç:**
‚Ä¢ –ß–µ—Ä—Ç—ã –ª–∏—á–Ω–æ—Å—Ç–∏ (Big Five)
‚Ä¢ –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ  
‚Ä¢ –°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è
‚Ä¢ –ü–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞!
        """
        
        await update.message.reply_text(help_text, parse_mode='Markdown')
        logger.info("‚úÖ help_command –∑–∞–≤–µ—Ä—à–µ–Ω", user_id=user.id)
        
    except Exception as e:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –≤ help_command", error=str(e), exc_info=True)


async def test_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /test"""
    user = update.effective_user
    logger.info("üß™ test_command –≤—ã–∑–≤–∞–Ω", user_id=user.id)
    
    try:
        await update.message.reply_text(
            f"‚úÖ **–¢–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω!**\n\n"
            f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n"
            f"Webhook —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.\n"
            f"User ID: `{user.id}`\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π `/start` –¥–ª—è –Ω–∞—á–∞–ª–∞.",
            parse_mode='Markdown'
        )
        
        logger.info("‚úÖ test_command –∑–∞–≤–µ—Ä—à–µ–Ω", user_id=user.id)
        
    except Exception as e:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –≤ test_command", error=str(e), exc_info=True)


async def analyze_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /analyze"""
    user = update.effective_user
    logger.info("üéØ analyze_command –≤—ã–∑–≤–∞–Ω", user_id=user.id)
    
    try:
        analyze_text = """
üîç **–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑**

–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Å–æ—Ü—Å–µ—Ç–µ–π
‚Ä¢ –ü–∏—Å—å–º–∞ –∏–ª–∏ –∑–∞–ø–∏—Å–∏
‚Ä¢ –õ—é–±–æ–π —Ç–µ–∫—Å—Ç –æ—Ç 50+ —Å–∏–º–≤–æ–ª–æ–≤

–Ø –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –µ–≥–æ —á–µ—Ä–µ–∑ AI –∏ —Å–æ–∑–¥–∞–º –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—Ç—Ä–µ—Ç.

**–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!**
        """
        
        await update.message.reply_text(analyze_text, parse_mode='Markdown')
        logger.info("‚úÖ analyze_command –∑–∞–≤–µ—Ä—à–µ–Ω", user_id=user.id)
        
    except Exception as e:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –≤ analyze_command", error=str(e), exc_info=True)


async def text_message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑"""
    user = update.effective_user
    text = update.message.text
    
    logger.info("üìù –ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞", 
               user_id=user.id, 
               text_length=len(text),
               first_50_chars=text[:50] + "..." if len(text) > 50 else text)
    
    if len(text) < 20:
        await update.message.reply_text(
            "üìù –î–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –Ω—É–∂–µ–Ω —Ç–µ–∫—Å—Ç –æ—Ç 20+ —Å–∏–º–≤–æ–ª–æ–≤.\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ–ª–µ–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!"
        )
        return
    
    try:
        # –ü–æ–∫–∞–∑ –ø—Ä–æ—Ü–µ—Å—Å–∞
        processing_message = await update.message.reply_text(
            "üîÑ **–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —á–µ—Ä–µ–∑ AI...**\n\n"
            "‚è≥ –≠—Ç–æ –∑–∞–π–º–µ—Ç 30-60 —Å–µ–∫—É–Ω–¥...",
            parse_mode='Markdown'
        )
        
        logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞—é AI –∞–Ω–∞–ª–∏–∑", user_id=user.id, text_length=len(text))
        
        # –†–µ–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ AI –¥–≤–∏–∂–æ–∫
        analysis_result = await analysis_engine.quick_analyze(
            text=text,
            user_id=user.id,
            telegram_id=user.id
        )
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        await processing_message.edit_text(
            analysis_result,
            parse_mode='Markdown'
        )
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        await update.message.reply_text(
            "üéØ **–ß—Ç–æ –¥–∞–ª—å—à–µ?**\n\n"
            "‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ —Ç–µ–∫—Å—Ç –¥–ª—è –Ω–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞\n"
            "‚Ä¢ `/help` - –°–ø—Ä–∞–≤–∫–∞\n"
            "‚Ä¢ `/start` - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n"
            "üí° *–ë–æ–ª—å—à–µ —Ç–µ–∫—Å—Ç–∞ = —Ç–æ—á–Ω–µ–µ –∞–Ω–∞–ª–∏–∑*",
            parse_mode='Markdown'
        )
        
        logger.info("‚úÖ AI –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ", user_id=user.id)
        
    except Exception as e:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –≤ text_message_handler", 
                    user_id=user.id, 
                    error=str(e), 
                    exc_info=True)
        
        try:
            await processing_message.edit_text(
                f"‚ùå **–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞**\n\n"
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/help`",
                parse_mode='Markdown'
            )
        except:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await update.message.reply_text(
                f"‚ùå **–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞**\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/help`",
                parse_mode='Markdown'
            )


# ===== CONVERSATION HANDLER (–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ô) =====

async def start_analysis(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ –∞–Ω–∞–ª–∏–∑–∞ —á–µ—Ä–µ–∑ ConversationHandler"""
    user = update.effective_user
    logger.info("üéØ start_analysis –≤—ã–∑–≤–∞–Ω", user_id=user.id)
    
    try:
        analyze_text = """
üîç **–î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑**

–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:
‚Ä¢ –ü–æ—Å—Ç—ã –∏–∑ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π
‚Ä¢ –ü–∏—Å—å–º–∞ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
‚Ä¢ –ó–∞–ø–∏—Å–∏ –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ
‚Ä¢ –õ—é–±–æ–π —Ç–µ–∫—Å—Ç –æ—Ç 100+ —Å–∏–º–≤–æ–ª–æ–≤

–ß–µ–º –±–æ–ª—å—à–µ —Ç–µ–∫—Å—Ç–∞ - —Ç–µ–º —Ç–æ—á–Ω–µ–µ –∞–Ω–∞–ª–∏–∑!

**–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Å–µ–π—á–∞—Å:**
        """
        
        await update.message.reply_text(analyze_text, parse_mode='Markdown')
        logger.info("‚úÖ start_analysis –∑–∞–≤–µ—Ä—à–µ–Ω", user_id=user.id)
        
        return AnalysisStates.COLLECT_TEXT
        
    except Exception as e:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –≤ start_analysis", error=str(e), exc_info=True)
        return ConversationHandler.END


async def collect_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–±–æ—Ä —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
    user = update.effective_user
    text = update.message.text
    
    logger.info("üìù –ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç –≤ conversation", 
               user_id=user.id, 
               text_length=len(text))
    
    if len(text) < 50:
        await update.message.reply_text(
            "üìù –î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –Ω—É–∂–µ–Ω —Ç–µ–∫—Å—Ç –æ—Ç 50+ —Å–∏–º–≤–æ–ª–æ–≤.\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ–ª–µ–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ `/cancel` –¥–ª—è –æ—Ç–º–µ–Ω—ã."
        )
        return AnalysisStates.COLLECT_TEXT
    
    try:
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
        context.user_data['analysis_text'] = text
        
        await update.message.reply_text(
            f"‚úÖ **–¢–µ–∫—Å—Ç –ø–æ–ª—É—á–µ–Ω** ({len(text)} —Å–∏–º–≤–æ–ª–æ–≤)\n\n"
            f"**–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑?**\n\n"
            f"‚Ä¢ `/process` - –ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑\n"
            f"‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è\n"
            f"‚Ä¢ `/cancel` - –û—Ç–º–µ–Ω–∏—Ç—å",
            parse_mode='Markdown'
        )
        
        return AnalysisStates.CONFIRM_DATA
        
    except Exception as e:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –≤ collect_text", error=str(e), exc_info=True)
        return ConversationHandler.END


async def process_analysis(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–Ω–∞–ª–∏–∑–∞"""
    user = update.effective_user
    text = context.user_data.get('analysis_text', '')
    
    if not text:
        await update.message.reply_text(
            "‚ùå –ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/start` –¥–ª—è –Ω–∞—á–∞–ª–∞."
        )
        return ConversationHandler.END
    
    logger.info("üöÄ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤ conversation", 
               user_id=user.id, 
               text_length=len(text))
    
    try:
        # –ü–æ–∫–∞–∑ –ø—Ä–æ—Ü–µ—Å—Å–∞
        processing_message = await update.message.reply_text(
            "üîÑ **–ó–∞–ø—É—Å–∫–∞—é –¥–µ—Ç–∞–ª—å–Ω—ã–π AI –∞–Ω–∞–ª–∏–∑...**\n\n"
            "üìä **–≠—Ç–∞–ø—ã:**\n"
            "üîÑ Claude –∞–Ω–∞–ª–∏–∑ –ª–∏—á–Ω–æ—Å—Ç–∏\n"
            "üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞\n"
            "üîÑ –§–∏–Ω–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞\n\n"
            "‚è≥ *–ó–∞–π–º–µ—Ç 60-90 —Å–µ–∫—É–Ω–¥...*",
            parse_mode='Markdown'
        )
        
        # –ê–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ AI –¥–≤–∏–∂–æ–∫
        analysis_result = await analysis_engine.quick_analyze(
            text=text,
            user_id=user.id,
            telegram_id=user.id
        )
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        await processing_message.edit_text(
            analysis_result,
            parse_mode='Markdown'
        )
        
        # –î–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞
        await update.message.reply_text(
            "üéØ **–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!**\n\n"
            "‚Ä¢ `/start` - –ù–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑\n"
            "‚Ä¢ `/help` - –°–ø—Ä–∞–≤–∫–∞\n\n"
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞!",
            parse_mode='Markdown'
        )
        
        # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        context.user_data.clear()
        
        logger.info("‚úÖ –ê–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ conversation –∑–∞–≤–µ—Ä—à–µ–Ω", user_id=user.id)
        return ConversationHandler.END
        
    except Exception as e:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –≤ process_analysis", error=str(e), exc_info=True)
        
        await processing_message.edit_text(
            f"‚ùå **–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞**\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ: {str(e)[:100]}...\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/start` –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞.",
            parse_mode='Markdown'
        )
        
        return ConversationHandler.END


async def cancel_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω–∞ conversation"""
    user = update.effective_user
    logger.info("‚ùå –û—Ç–º–µ–Ω–∞ conversation", user_id=user.id)
    
    await update.message.reply_text(
        "‚ùå **–ê–Ω–∞–ª–∏–∑ –æ—Ç–º–µ–Ω–µ–Ω**\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/start` –¥–ª—è –Ω–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞."
    )
    
    context.user_data.clear()
    return ConversationHandler.END


def setup_handlers(application: Application) -> None:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    
    logger.info("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤...")
    
    # –ü–†–û–°–¢–´–ï –ö–û–ú–ê–ù–î–´ (–ü–†–ò–û–†–ò–¢–ï–¢ 1 - –í–°–ï–ì–î–ê –†–ê–ë–û–¢–ê–Æ–¢)
    application.add_handler(CommandHandler("test", test_command))
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("analyze", analyze_command))
    
    logger.info("‚úÖ –ü—Ä–æ—Å—Ç—ã–µ –∫–æ–º–∞–Ω–¥—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    
    # CONVERSATION HANDLER (–ü–†–ò–û–†–ò–¢–ï–¢ 2 - –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó)
    conversation_handler = ConversationHandler(
        entry_points=[
            CommandHandler("detailed", start_analysis),
        ],
        states={
            AnalysisStates.COLLECT_TEXT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, collect_text),
                CommandHandler("cancel", cancel_conversation),
            ],
            AnalysisStates.CONFIRM_DATA: [
                CommandHandler("process", process_analysis),
                MessageHandler(filters.TEXT & ~filters.COMMAND, collect_text),
                CommandHandler("cancel", cancel_conversation),
            ],
        },
        fallbacks=[
            CommandHandler("cancel", cancel_conversation),
        ],
        per_user=True,
        per_chat=True,
    )
    
    application.add_handler(conversation_handler)
    logger.info("‚úÖ ConversationHandler –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    
    # –û–ë–†–ê–ë–û–¢–ß–ò–ö –¢–ï–ö–°–¢–ê (–ü–†–ò–û–†–ò–¢–ï–¢ 3 - –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó)
    application.add_handler(
        MessageHandler(
            filters.TEXT & ~filters.COMMAND, 
            text_message_handler
        )
    )
    
    logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    
    logger.info("üéØ –í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    logger.info("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: /start, /help, /test, /analyze, /detailed") 
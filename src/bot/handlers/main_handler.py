"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ (–æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è python-telegram-bot v21+)
"""
import structlog
from telegram import Update
from telegram.ext import (
    Application, CommandHandler, MessageHandler, 
    ConversationHandler, filters, ContextTypes
)

from src.bot.states.analysis_states import AnalysisStates
from src.ai.analysis_engine import analysis_engine
from src.utils.economic_analysis_manager import economic_manager, AnalysisLevel
from src.utils.cache_manager import cache_manager

logger = structlog.get_logger()


# ===== –ü–†–û–°–¢–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò (–û–°–ù–û–í–ù–´–ï) =====

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    user = update.effective_user
    logger.info("üéØ start_command –≤—ã–∑–≤–∞–Ω", user_id=user.id, username=user.username)
    
    try:
        welcome_text = f"""
üß† **Psychology AI Bot - –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è –°–∏—Å—Ç–µ–º–∞ 2025**

–ü—Ä–∏–≤–µ—Ç, {user.first_name}! 

üí∞ **–ù–û–í–ê–Ø –≠–ö–û–ù–û–ú–ò–ß–ï–°–ö–ê–Ø –ú–û–î–ï–õ–¨:**

üÜì **–ë–µ—Å–ø–ª–∞—Ç–Ω–æ:**
‚Ä¢ `/free` - 3 –∞–Ω–∞–ª–∏–∑–∞ –≤ –¥–µ–Ω—å
‚Ä¢ –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ FREE)

üíé **–ü–ª–∞—Ç–Ω—ã–µ —É—Ä–æ–≤–Ω–∏:**
‚Ä¢ `/pricing` - –¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã
‚Ä¢ `/basic` ($1.99) - –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
‚Ä¢ `/advanced` ($4.99) - 2 AI + –Ω–∞—É—á–Ω–∞—è –≤—ã–±–æ—Ä–∫–∞
‚Ä¢ `/research_pro` ($9.99) - –ü–æ–ª–Ω—ã–π –Ω–∞—É—á–Ω—ã–π –ø–æ–∏—Å–∫  
‚Ä¢ `/premium` ($19.99) - 5 AI + –º–∞–∫—Å–∏–º—É–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π

üî¨ **–†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è:**
‚Ä¢ –ü–µ—Ä–≤—ã–π –≤ –º–∏—Ä–µ –ø–æ–∏—Å–∫ peer-reviewed –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π –¥–ª—è –ø—Å–∏—Ö–æ–∞–Ω–∞–ª–∏–∑–∞
‚Ä¢ PubMed, Google Scholar –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
‚Ä¢ –ù–∞—É—á–Ω–æ-–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏

üìä **–°–∏—Å—Ç–µ–º–∞:**
‚Ä¢ `/cache` - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞ (—ç–∫–æ–Ω–æ–º–∏—è 70%)

üöÄ **–ù–∞—á–Ω–∏ —Å `/pricing` —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å!**
        """
        
        await update.message.reply_text(welcome_text, parse_mode='Markdown')
        logger.info("‚úÖ start_command –∑–∞–≤–µ—Ä—à–µ–Ω", user_id=user.id)
        
    except Exception as e:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –≤ start_command", error=str(e), exc_info=True)


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /help"""
    user = update.effective_user
    logger.info("üéØ help_command –≤—ã–∑–≤–∞–Ω", user_id=user.id)
    
    try:
        help_text = """
üìö **–°–ø—Ä–∞–≤–∫–∞ - Psychology AI Bot (–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è –°–∏—Å—Ç–µ–º–∞ 2025)**

üí∞ **–≠–ö–û–ù–û–ú–ò–ß–ï–°–ö–ò–ï –ö–û–ú–ê–ù–î–´:**
‚Ä¢ `/pricing` - –¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã –∏ —Ü–µ–Ω—ã
‚Ä¢ `/free` - –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (3/–¥–µ–Ω—å)
‚Ä¢ `/basic` - –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ ($1.99)
‚Ä¢ `/advanced` - 2 AI + –Ω–∞—É—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ($4.99)
‚Ä¢ `/research_pro` - –ü–æ–ª–Ω—ã–π –Ω–∞—É—á–Ω—ã–π –ø–æ–∏—Å–∫ ($9.99)
‚Ä¢ `/premium` - 5 AI + –º–∞–∫—Å–∏–º—É–º ($19.99)

üîß **–°–ò–°–¢–ï–ú–ù–´–ï –ö–û–ú–ê–ù–î–´:**
‚Ä¢ `/start` - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
‚Ä¢ `/help` - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
‚Ä¢ `/test` - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã
‚Ä¢ `/cache` - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è

üìù **–ö–ê–ö –ü–û–õ–¨–ó–û–í–ê–¢–¨–°–Ø:**

**–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑:**
‚Ä¢ –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç ‚Üí –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ FREE —É—Ä–æ–≤–µ–Ω—å
‚Ä¢ 3 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–∞ –≤ –¥–µ–Ω—å

**–ü–ª–∞—Ç–Ω—ã–µ —É—Ä–æ–≤–Ω–∏:**
1. `/pricing` - –ò–∑—É—á–∏—Ç—å —Ç–∞—Ä–∏—Ñ—ã
2. –í—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å (`/basic`, `/advanced`, –∏ —Ç.–¥.)
3. –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞

üî¨ **–†–ï–í–û–õ–Æ–¶–ò–û–ù–ù–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:**
‚Ä¢ –ü–µ—Ä–≤—ã–π –≤ –º–∏—Ä–µ –ø–æ–∏—Å–∫ –Ω–∞—É—á–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π –¥–ª—è –ø—Å–∏—Ö–æ–∞–Ω–∞–ª–∏–∑–∞
‚Ä¢ PubMed + Google Scholar –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
‚Ä¢ –ú—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—ã–π AI (–¥–æ 5 –¥–≤–∏–∂–∫–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ)
‚Ä¢ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ 70% —Å—Ç–æ–∏–º–æ—Å—Ç–∏

üí° *–°–∏—Å—Ç–µ–º–∞ –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –ø–æ–¥ –≤–∞—à –±—é–¥–∂–µ—Ç –∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏*
        """
        
        await update.message.reply_text(help_text, parse_mode='Markdown')
        logger.info("‚úÖ help_command –∑–∞–≤–µ—Ä—à–µ–Ω", user_id=user.id)
        
    except Exception as e:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –≤ help_command", error=str(e), exc_info=True)


async def test_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /test"""
    user = update.effective_user
    logger.info("üß™ test_command –≤—ã–∑–≤–∞–Ω", user_id=user.id)
    
    try:
        await update.message.reply_text(
            f"‚úÖ **–¢–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω!**\n\n"
            f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n"
            f"Webhook —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.\n"
            f"User ID: `{user.id}`\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π `/start` –¥–ª—è –Ω–∞—á–∞–ª–∞.",
            parse_mode='Markdown'
        )
        
        logger.info("‚úÖ test_command –∑–∞–≤–µ—Ä—à–µ–Ω", user_id=user.id)
        
    except Exception as e:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –≤ test_command", error=str(e), exc_info=True)


async def analyze_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /analyze"""
    user = update.effective_user
    logger.info("üéØ analyze_command –≤—ã–∑–≤–∞–Ω", user_id=user.id)
    
    try:
        analyze_text = """
üîç **–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑**

–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Å–æ—Ü—Å–µ—Ç–µ–π
‚Ä¢ –ü–∏—Å—å–º–∞ –∏–ª–∏ –∑–∞–ø–∏—Å–∏
‚Ä¢ –õ—é–±–æ–π —Ç–µ–∫—Å—Ç –æ—Ç 50+ —Å–∏–º–≤–æ–ª–æ–≤

–Ø –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –µ–≥–æ —á–µ—Ä–µ–∑ AI –∏ —Å–æ–∑–¥–∞–º –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—Ç—Ä–µ—Ç.

**–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!**
        """
        
        await update.message.reply_text(analyze_text, parse_mode='Markdown')
        logger.info("‚úÖ analyze_command –∑–∞–≤–µ—Ä—à–µ–Ω", user_id=user.id)
        
    except Exception as e:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –≤ analyze_command", error=str(e), exc_info=True)


async def research_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /research - –ù–∞—É—á–Ω–æ-–æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑"""
    user = update.effective_user
    logger.info("üî¨ research_command –≤—ã–∑–≤–∞–Ω", user_id=user.id)
    
    try:
        research_text = """
üî¨ **–ù–ê–£–ß–ù–û-–û–ë–û–°–ù–û–í–ê–ù–ù–´–ô –ê–ù–ê–õ–ò–ó** 

üÜï **–†–ï–í–û–õ–Æ–¶–ò–û–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø!**

**–ß—Ç–æ —ç—Ç–æ:**
‚Ä¢ –ü–æ–∏—Å–∫ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π –≤ PubMed, Google Scholar
‚Ä¢ –ê–Ω–∞–ª–∏–∑ peer-reviewed –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –ø–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏
‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—É—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –ú—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—ã–π AI –∞–Ω–∞–ª–∏–∑ –Ω–∞—É—á–Ω–æ–π –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã

**–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–µ–ª–æ–≤–µ–∫–µ:
   - –ò–º—è, –≤–æ–∑—Ä–∞—Å—Ç, –ø—Ä–æ—Ñ–µ—Å—Å–∏—è
   - –û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–≤–µ–¥–µ–Ω–∏—è
   - –ü—Ä–∏–º–µ—Ä—ã —Ç–µ–∫—Å—Ç–æ–≤/—Å–æ–æ–±—â–µ–Ω–∏–π
   - –ù–∞–±–ª—é–¥–∞–µ–º—ã–µ —á–µ—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞

2. –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–π–¥–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
3. –ü–æ–ª—É—á–∏—Ç–µ –Ω–∞—É—á–Ω–æ-–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å

**–ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞:**
```
–ò–º—è: –ê–ª–µ–∫—Å–µ–π
–í–æ–∑—Ä–∞—Å—Ç: 28 –ª–µ—Ç
–ü—Ä–æ—Ñ–µ—Å—Å–∏—è: IT-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫
–ü–æ–≤–µ–¥–µ–Ω–∏–µ: –û—á–µ–Ω—å –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω—ã–π, –ª—é–±–∏—Ç –ø–æ—Ä—è–¥–æ–∫, –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –æ–¥–∏–Ω–æ—á–∫—É. –ß–∞—Å—Ç–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª–∏. –í –æ–±—â–µ–Ω–∏–∏ —Å–¥–µ—Ä–∂–∞–Ω, –Ω–æ –¥—Ä—É–∂–µ–ª—é–±–µ–Ω.
–¢–µ–∫—Å—Ç—ã: "–ú–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è, –∫–æ–≥–¥–∞ –≤—Å–µ –ø–æ –ø–ª–∞–Ω—É. –•–∞–æ—Å –º–µ–Ω—è —Ä–∞–∑–¥—Ä–∞–∂–∞–µ—Ç."
```

**üöÄ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ —á–µ–ª–æ–≤–µ–∫–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞!**
        """
        
        await update.message.reply_text(research_text, parse_mode='Markdown')
        logger.info("‚úÖ research_command –∑–∞–≤–µ—Ä—à–µ–Ω", user_id=user.id)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
        context.user_data['awaiting_research_data'] = True
        
    except Exception as e:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –≤ research_command", error=str(e), exc_info=True)


async def pricing_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /pricing - –¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã"""
    user = update.effective_user
    logger.info("üí∞ pricing_command –≤—ã–∑–≤–∞–Ω", user_id=user.id)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞—Ä–∏—Ñ–Ω—ã—Ö –ø–ª–∞–Ω–∞—Ö
        comparison = economic_manager.get_level_comparison()
        
        pricing_text = """
üí∞ **–¢–ê–†–ò–§–ù–´–ï –ü–õ–ê–ù–´ –ê–ù–ê–õ–ò–ó–ê**

üÜì **–ë–∞–∑–æ–≤—ã–π (–ë–ï–°–ü–õ–ê–¢–ù–û)**
‚Ä¢ 3 –∞–Ω–∞–ª–∏–∑–∞ –≤ –¥–µ–Ω—å
‚Ä¢ –¢–æ–ª—å–∫–æ Claude AI
‚Ä¢ Big Five –ø—Ä–æ—Ñ–∏–ª—å
‚Ä¢ –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
‚Ä¢ –í—Ä–µ–º—è: ~1 –º–∏–Ω—É—Ç–∞

‚≠ê **–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π - $1.99**
‚Ä¢ –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
‚Ä¢ –ö–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
‚Ä¢ –ö–∞—Ä—å–µ—Ä–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
‚Ä¢ –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
‚Ä¢ –í—Ä–µ–º—è: ~2 –º–∏–Ω—É—Ç—ã

üöÄ **–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π - $4.99**
‚Ä¢ 2 AI —Å–∏—Å—Ç–µ–º—ã (Claude + GPT-4)
‚Ä¢ –ù–∞—É—á–Ω–∞—è –≤—ã–±–æ—Ä–∫–∞ (10 –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤)
‚Ä¢ –†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
‚Ä¢ –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã
‚Ä¢ –ö—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏—è
‚Ä¢ –í—Ä–µ–º—è: ~3 –º–∏–Ω—É—Ç—ã

üî¨ **–ù–∞—É—á–Ω—ã–π - $9.99**
‚Ä¢ –ü–æ–∏—Å–∫ –≤ PubMed + Google Scholar
‚Ä¢ Peer-reviewed –≤–∞–ª–∏–¥–∞—Ü–∏—è
‚Ä¢ 3 AI —Å–∏—Å—Ç–µ–º—ã + –Ω–∞—É—á–Ω—ã–π –ø–æ–∏—Å–∫
‚Ä¢ 30+ –Ω–∞—É—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
‚Ä¢ –í—Ä–µ–º—è: ~5 –º–∏–Ω—É—Ç

üíé **–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π - $19.99**
‚Ä¢ 5 AI —Å–∏—Å—Ç–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
‚Ä¢ 50+ –Ω–∞—É—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
‚Ä¢ VIP –æ–±—Ä–∞–±–æ—Ç–∫–∞
‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –≤ PDF
‚Ä¢ –í—Ä–µ–º—è: ~8 –º–∏–Ω—É—Ç

**üí° –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∑–∞–∫–∞–∑–∞:**
‚Ä¢ `/free` - –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑
‚Ä¢ `/basic` - –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π ($1.99)
‚Ä¢ `/advanced` - –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π ($4.99)
‚Ä¢ `/research` - –ù–∞—É—á–Ω—ã–π ($9.99)
‚Ä¢ `/premium` - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π ($19.99)

**üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞:**
‚Ä¢ –≠–∫–æ–Ω–æ–º–∏—è –∑–∞ —Å—á–µ—Ç –∫—ç—à–∞: –¥–æ 70%
‚Ä¢ –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ —Å –∫—ç—à–µ–º: –≤ 5 —Ä–∞–∑ –±—ã—Å—Ç—Ä–µ–µ
        """
        
        await update.message.reply_text(pricing_text, parse_mode='Markdown')
        logger.info("‚úÖ pricing_command –∑–∞–≤–µ—Ä—à–µ–Ω", user_id=user.id)
        
    except Exception as e:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –≤ pricing_command", error=str(e), exc_info=True)


async def free_analysis_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /free - –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑"""
    await _handle_level_command(update, context, AnalysisLevel.FREE)


async def basic_analysis_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /basic - –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑"""
    await _handle_level_command(update, context, AnalysisLevel.BASIC)


async def advanced_analysis_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /advanced - –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞–Ω–∞–ª–∏–∑"""
    await _handle_level_command(update, context, AnalysisLevel.ADVANCED)


async def research_analysis_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /research_pro - –ù–∞—É—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑"""
    await _handle_level_command(update, context, AnalysisLevel.RESEARCH)


async def premium_analysis_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /premium - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑"""
    await _handle_level_command(update, context, AnalysisLevel.PREMIUM)


async def _handle_level_command(update: Update, context: ContextTypes.DEFAULT_TYPE, level: AnalysisLevel) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —É—Ä–æ–≤–Ω—è –∞–Ω–∞–ª–∏–∑–∞"""
    user = update.effective_user
    logger.info(f"üí∞ {level.value}_analysis_command –≤—ã–∑–≤–∞–Ω", user_id=user.id)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —É—Ä–æ–≤–Ω—è
        config = economic_manager.analysis_configs[level]
        
        level_info_text = f"""
{economic_manager._get_level_emoji(level)} **{economic_manager._get_level_name(level).upper()} –ê–ù–ê–õ–ò–ó**

**üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å:** {"–ë–ï–°–ü–õ–ê–¢–ù–û" if level == AnalysisLevel.FREE else f"${config.price_usd}"}
**‚è±Ô∏è –í—Ä–µ–º—è:** ~{config.estimated_time_minutes} –º–∏–Ω
**ü§ñ AI —Å–µ—Ä–≤–∏—Å—ã:** {len(config.ai_services)}
**üìö –ù–∞—É—á–Ω—ã–π –ø–æ–∏—Å–∫:** {"‚úÖ" if config.scientific_search else "‚ùå"}

**üéØ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
{chr(10).join([f"‚Ä¢ {feature}" for feature in config.features[:5]])}

**üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!**

–ü—Ä–∏–º–µ—Ä: "–Ø –æ—á–µ–Ω—å –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω—ã–π —á–µ–ª–æ–≤–µ–∫, –ª—é–±–ª—é –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –∑–∞—Ä–∞–Ω–µ–µ. –í —Ä–∞–±–æ—Ç–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É. –ò–Ω–æ–≥–¥–∞ –º–æ–≥—É –±—ã—Ç—å —Å–ª–∏—à–∫–æ–º –∫—Ä–∏—Ç–∏—á–Ω—ã–º –∫ —Å–µ–±–µ..."
        """
        
        await update.message.reply_text(level_info_text, parse_mode='Markdown')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context.user_data['selected_analysis_level'] = level
        context.user_data['awaiting_analysis_text'] = True
        
        logger.info(f"‚úÖ {level.value}_analysis_command –∑–∞–≤–µ—Ä—à–µ–Ω", user_id=user.id)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ {level.value}_analysis_command", error=str(e), exc_info=True)


async def cache_stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /cache - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è"""
    user = update.effective_user
    logger.info("üìä cache_stats_command –≤—ã–∑–≤–∞–Ω", user_id=user.id)
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫—ç—à –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
        if not cache_manager.redis_client:
            await cache_manager.initialize()
        
        stats = await cache_manager.get_cache_statistics()
        
        cache_text = f"""
üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–≠–®–ò–†–û–í–ê–ù–ò–Ø**

**üéØ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:**
‚Ä¢ –ü–æ–ø–∞–¥–∞–Ω–∏—è –≤ –∫—ç—à: {stats.get('total_hits', 0)}
‚Ä¢ –ü—Ä–æ–º–∞—Ö–∏: {stats.get('total_misses', 0)}
‚Ä¢ Hit Rate: {stats.get('hit_rate', 0):.1%}
‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ –∫—ç—à–∞: {stats.get('cache_efficiency', 'N/A')}

**üí∞ –≠–∫–æ–Ω–æ–º–∏—è:**
‚Ä¢ –û–±—â–∞—è —ç–∫–æ–Ω–æ–º–∏—è: ${stats.get('total_savings_usd', 0):.2f}
‚Ä¢ –°—Ä–µ–¥–Ω—è—è —ç–∫–æ–Ω–æ–º–∏—è –∑–∞ –∞–Ω–∞–ª–∏–∑: ${stats.get('total_savings_usd', 0) / max(stats.get('total_hits', 1), 1):.2f}

**üì¶ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏:**
‚Ä¢ Redis –ø–∞–º—è—Ç—å: {stats.get('redis_memory_used', 'N/A')}
‚Ä¢ –¢–∏–ø—ã –∑–∞–ø–∏—Å–µ–π: {len(stats.get('entries_by_type', {}))}

**üìà –ó–∞–ø–∏—Å–∏ –ø–æ —Ç–∏–ø–∞–º:**
{chr(10).join([f"‚Ä¢ {cache_type}: {count} –∑–∞–ø–∏—Å–µ–π" for cache_type, count in stats.get('entries_by_type', {}).items()])}

**üí° –°–æ–≤–µ—Ç—ã:**
‚Ä¢ –ü–æ—Ö–æ–∂–∏–µ –∑–∞–ø—Ä–æ—Å—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç –∫—ç—à
‚Ä¢ –ù–∞—É—á–Ω—ã–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∫—ç—à–∏—Ä—É—é—Ç—Å—è –Ω–∞ 7 –¥–Ω–µ–π
‚Ä¢ –û–±—ã—á–Ω—ã–µ –∞–Ω–∞–ª–∏–∑—ã - –Ω–∞ 24 —á–∞—Å–∞
        """
        
        await update.message.reply_text(cache_text, parse_mode='Markdown')
        logger.info("‚úÖ cache_stats_command –∑–∞–≤–µ—Ä—à–µ–Ω", user_id=user.id)
        
    except Exception as e:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –≤ cache_stats_command", error=str(e), exc_info=True)
        await update.message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞. –í–æ–∑–º–æ–∂–Ω–æ, Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.",
            parse_mode='Markdown'
        )


async def handle_research_data(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–∞—É—á–Ω–æ-–æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    user = update.effective_user
    logger.info("üî¨ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–∞—É—á–Ω–æ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è", user_id=user.id, text_length=len(text))
    
    if len(text) < 50:
        await update.message.reply_text(
            "üìù –î–ª—è –Ω–∞—É—á–Ω–æ-–æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.\n\n"
            "–£–∫–∞–∂–∏—Ç–µ:\n"
            "‚Ä¢ –ò–º—è –∏ –≤–æ–∑—Ä–∞—Å—Ç\n"
            "‚Ä¢ –ü—Ä–æ—Ñ–µ—Å—Å–∏—é\n"
            "‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–≤–µ–¥–µ–Ω–∏—è\n"
            "‚Ä¢ –ü—Ä–∏–º–µ—Ä—ã —Ç–µ–∫—Å—Ç–æ–≤/–≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏–π\n\n"
            "–ú–∏–Ω–∏–º—É–º 50+ —Å–∏–º–≤–æ–ª–æ–≤!"
        )
        return
    
    try:
        # –°–±—Ä–æ—Å —Ñ–ª–∞–≥–∞ –æ–∂–∏–¥–∞–Ω–∏—è
        context.user_data['awaiting_research_data'] = False
        
        # –ü–æ–∫–∞–∑ –ø—Ä–æ—Ü–µ—Å—Å–∞
        processing_message = await update.message.reply_text(
            "üî¨ **–ó–∞–ø—É—Å–∫–∞—é –Ω–∞—É—á–Ω–æ-–æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑...**\n\n"
            "üìä **–≠—Ç–∞–ø—ã:**\n"
            "üîÑ –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –æ —á–µ–ª–æ–≤–µ–∫–µ\n"
            "üîÑ –ü–æ–∏—Å–∫ –≤ –Ω–∞—É—á–Ω—ã—Ö –±–∞–∑–∞—Ö (PubMed, Scholar)\n"
            "üîÑ –í–∞–ª–∏–¥–∞—Ü–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤\n"
            "üîÑ –ú—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—ã–π AI –∞–Ω–∞–ª–∏–∑\n"
            "üîÑ –°–∏–Ω—Ç–µ–∑ –Ω–∞—É—á–Ω–æ-–æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è\n\n"
            "‚è≥ *–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 2-3 –º–∏–Ω—É—Ç—ã...*",
            parse_mode='Markdown'
        )
        
        # –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –æ —á–µ–ª–æ–≤–µ–∫–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞
        person_data = parse_person_data_from_text(text)
        
        logger.info("üß† –ó–∞–ø—É—Å–∫–∞—é –Ω–∞—É—á–Ω–æ-–æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑", 
                   user_id=user.id, 
                   person_name=person_data.get("name", "Unknown"))
        
        # –ó–∞–ø—É—Å–∫ –Ω–∞—É—á–Ω–æ-–æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        analysis_result = await analysis_engine.scientific_research_analysis(
            person_data=person_data,
            user_id=user.id,
            telegram_id=user.id
        )
        
        # –†–∞–∑–±–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (Telegram –ª–∏–º–∏—Ç 4096 —Å–∏–º–≤–æ–ª–æ–≤)
        max_message_length = 4000  # –û—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å
        
        if len(analysis_result) <= max_message_length:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            await processing_message.edit_text(
                analysis_result,
                parse_mode='Markdown'
            )
        else:
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
            parts = split_long_message(analysis_result, max_message_length)
            
            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await processing_message.edit_text(
                parts[0],
                parse_mode='Markdown'
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏
            for part in parts[1:]:
                await update.message.reply_text(
                    part,
                    parse_mode='Markdown'
                )
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        await update.message.reply_text(
            "üéØ **–ù–∞—É—á–Ω–æ-–æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!**\n\n"
            "**–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:**\n"
            "‚Ä¢ `/research` - –ù–æ–≤—ã–π –Ω–∞—É—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑\n"
            "‚Ä¢ `/analyze` - –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞\n"
            "‚Ä¢ `/help` - –°–ø—Ä–∞–≤–∫–∞\n\n"
            "üí° *–î–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ*",
            parse_mode='Markdown'
        )
        
        logger.info("‚úÖ –ù–∞—É—á–Ω–æ-–æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ", user_id=user.id)
        
    except Exception as e:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –≤ handle_research_data", 
                    user_id=user.id, 
                    error=str(e), 
                    exc_info=True)
        
        # –°–±—Ä–æ—Å —Ñ–ª–∞–≥–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        context.user_data['awaiting_research_data'] = False
        
        try:
            await processing_message.edit_text(
                f"‚ùå **–û—à–∏–±–∫–∞ –Ω–∞—É—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞**\n\n"
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)[:100]}...\n\n"
                f"**–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:**\n"
                f"‚Ä¢ `/research` - –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –Ω–∞—É—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑\n"
                f"‚Ä¢ `/analyze` - –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑\n"
                f"‚Ä¢ `/help` - –°–ø—Ä–∞–≤–∫–∞",
                parse_mode='Markdown'
            )
        except:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await update.message.reply_text(
                f"‚ùå **–û—à–∏–±–∫–∞ –Ω–∞—É—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞**\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ `/research` –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞ –∏–ª–∏ `/help` –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏",
                parse_mode='Markdown'
            )


def parse_person_data_from_text(text: str) -> dict:
    """–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –æ —á–µ–ª–æ–≤–µ–∫–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    import re
    
    person_data = {
        "name": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
        "age": None,
        "gender": None,
        "occupation": "",
        "behavior_description": text,  # –í–µ—Å—å —Ç–µ–∫—Å—Ç –∫–∞–∫ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–≤–µ–¥–µ–Ω–∏—è
        "text_samples": [],
        "emotional_markers": [],
        "social_patterns": [],
        "cognitive_traits": [],
        "suspected_personality_type": "",
        "country": "Russia",
        "cultural_context": "–†–æ—Å—Å–∏–π—Å–∫–∏–π"
    }
    
    # –ü–æ–∏—Å–∫ –∏–º–µ–Ω–∏
    name_patterns = [
        r'[–ò–∏]–º—è[:\s]*([–ê-–Ø–∞-—èA-Za-z]+)',
        r'[–ó–∑]–æ–≤—É—Ç[:\s]*([–ê-–Ø–∞-—èA-Za-z]+)',
        r'^([–ê-–Ø][–∞-—è]+)[,\s]',  # –ò–º—è –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏
    ]
    
    for pattern in name_patterns:
        match = re.search(pattern, text)
        if match:
            person_data["name"] = match.group(1).strip()
            break
    
    # –ü–æ–∏—Å–∫ –≤–æ–∑—Ä–∞—Å—Ç–∞
    age_patterns = [
        r'[–í–≤]–æ–∑—Ä–∞—Å—Ç[:\s]*(\d+)',
        r'(\d+)[:\s]*–ª–µ—Ç',
        r'(\d+)[:\s]*–≥–æ–¥',
        r'[–ú–º]–Ω–µ[:\s]*(\d+)',
    ]
    
    for pattern in age_patterns:
        match = re.search(pattern, text)
        if match:
            person_data["age"] = int(match.group(1))
            break
    
    # –ü–æ–∏—Å–∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
    occupation_patterns = [
        r'[–ü–ø]—Ä–æ—Ñ–µ—Å—Å–∏—è[:\s]*([–ê-–Ø–∞-—èA-Za-z\-\s]+?)(?:[.\n]|$)',
        r'[–†—Ä]–∞–±–æ—Ç–∞—é?[:\s]*([–ê-–Ø–∞-—èA-Za-z\-\s]+?)(?:[.\n]|$)',
        r'[–î–¥]–æ–ª–∂–Ω–æ—Å—Ç—å[:\s]*([–ê-–Ø–∞-—èA-Za-z\-\s]+?)(?:[.\n]|$)',
    ]
    
    for pattern in occupation_patterns:
        match = re.search(pattern, text)
        if match:
            person_data["occupation"] = match.group(1).strip()
            break
    
    # –ü–æ–∏—Å–∫ –ø—Ä–∏–º–µ—Ä–æ–≤ —Ç–µ–∫—Å—Ç–æ–≤ –≤ –∫–∞–≤—ã—á–∫–∞—Ö
    text_samples = re.findall(r'[""\'](.*?)[""\'"]', text)
    if text_samples:
        person_data["text_samples"] = text_samples
    
    # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤
    emotional_keywords = {
        "–ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ": ["—Ä–∞–¥–æ—Å—Ç—å", "—Å—á–∞—Å—Ç—å–µ", "–æ–ø—Ç–∏–º–∏–∑–º", "—ç–Ω—Ç—É–∑–∏–∞–∑–º", "–≤–µ—Å–µ–ª—ã–π"],
        "–Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ": ["–≥—Ä—É—Å—Ç—å", "—Ç—Ä–µ–≤–æ–≥–∞", "—Å—Ç—Ä–µ—Å—Å", "—Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ", "–∑–ª–æ—Å—Ç—å"],
        "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ": ["—Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ", "—É—Ä–∞–≤–Ω–æ–≤–µ—à–µ–Ω–Ω–æ—Å—Ç—å", "—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å"]
    }
    
    for category, keywords in emotional_keywords.items():
        for keyword in keywords:
            if keyword.lower() in text.lower():
                person_data["emotional_markers"].append(f"{category}: {keyword}")
    
    # –ü–æ–∏—Å–∫ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    social_keywords = [
        "–∏–Ω—Ç—Ä–æ–≤–µ—Ä—Ç", "—ç–∫—Å—Ç—Ä–∞–≤–µ—Ä—Ç", "–æ–±—â–∏—Ç–µ–ª—å–Ω—ã–π", "–∑–∞–º–∫–Ω—É—Ç—ã–π", 
        "–ª–∏–¥–µ—Ä", "–∫–æ–º–∞–Ω–¥–Ω—ã–π", "–æ–¥–∏–Ω–æ—á–∫–∞", "—Å–æ—Ü–∏–∞–ª—å–Ω—ã–π"
    ]
    
    for keyword in social_keywords:
        if keyword.lower() in text.lower():
            person_data["social_patterns"].append(keyword)
    
    # –ü–æ–∏—Å–∫ –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã—Ö —á–µ—Ä—Ç
    cognitive_keywords = [
        "–∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π", "—Ç–≤–æ—Ä—á–µ—Å–∫–∏–π", "–ª–æ–≥–∏—á–µ—Å–∫–∏–π", "–∏–Ω—Ç—É–∏—Ç–∏–≤–Ω—ã–π",
        "–æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω—ã–π", "—Å–ø–æ–Ω—Ç–∞–Ω–Ω—ã–π", "–¥–µ—Ç–∞–ª—å–Ω—ã–π", "—Å–∏—Å—Ç–µ–º–Ω—ã–π"
    ]
    
    for keyword in cognitive_keywords:
        if keyword.lower() in text.lower():
            person_data["cognitive_traits"].append(keyword)
    
    return person_data


def split_long_message(message: str, max_length: int) -> list:
    """–†–∞–∑–±–∏–≤–∫–∞ –¥–ª–∏–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —á–∞—Å—Ç–∏"""
    if len(message) <= max_length:
        return [message]
    
    parts = []
    current_part = ""
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –∞–±–∑–∞—Ü–∞–º
    paragraphs = message.split('\n\n')
    
    for paragraph in paragraphs:
        # –ï—Å–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞ –ø—Ä–µ–≤—ã—Å–∏—Ç –ª–∏–º–∏—Ç
        if len(current_part) + len(paragraph) + 2 > max_length:
            if current_part:
                parts.append(current_part.strip())
                current_part = paragraph + '\n\n'
            else:
                # –ï—Å–ª–∏ —Å–∞–º –ø–∞—Ä–∞–≥—Ä–∞—Ñ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–æ —Å—Ç—Ä–æ–∫–∞–º
                lines = paragraph.split('\n')
                for line in lines:
                    if len(current_part) + len(line) + 1 > max_length:
                        if current_part:
                            parts.append(current_part.strip())
                            current_part = line + '\n'
                        else:
                            # –ï—Å–ª–∏ –¥–∞–∂–µ —Å—Ç—Ä–æ–∫–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è, –æ–±—Ä–µ–∑–∞–µ–º
                            parts.append(line[:max_length-10] + "...")
                    else:
                        current_part += line + '\n'
                current_part += '\n'
        else:
            current_part += paragraph + '\n\n'
    
    if current_part.strip():
        parts.append(current_part.strip())
    
    return parts


async def text_message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑"""
    user = update.effective_user
    text = update.message.text
    
    logger.info("üìù –ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞", 
               user_id=user.id, 
               text_length=len(text),
               first_50_chars=text[:50] + "..." if len(text) > 50 else text)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–∞—É—á–Ω–æ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
    if context.user_data.get('awaiting_research_data', False):
        return await handle_research_data(update, context, text)
    
    if len(text) < 20:
        await update.message.reply_text(
            "üìù –î–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –Ω—É–∂–µ–Ω —Ç–µ–∫—Å—Ç –æ—Ç 20+ —Å–∏–º–≤–æ–ª–æ–≤.\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ–ª–µ–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!"
        )
        return
    
    try:
        # –ü–æ–∫–∞–∑ –ø—Ä–æ—Ü–µ—Å—Å–∞
        processing_message = await update.message.reply_text(
            "üîÑ **–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —á–µ—Ä–µ–∑ AI...**\n\n"
            "‚è≥ –≠—Ç–æ –∑–∞–π–º–µ—Ç 30-60 —Å–µ–∫—É–Ω–¥...",
            parse_mode='Markdown'
        )
        
        logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞—é AI –∞–Ω–∞–ª–∏–∑", user_id=user.id, text_length=len(text))
        
        # üí∞ –≠–ö–û–ù–û–ú–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó (–ë–ï–°–ü–õ–ê–¢–ù–´–ô –£–†–û–í–ï–ù–¨)
        analysis_result = await economic_manager.perform_analysis(
            text=text,
            user_id=user.id,
            level=AnalysisLevel.FREE,  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ = –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
            telegram_id=user.id
        )
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        await processing_message.edit_text(
            analysis_result,
            parse_mode='Markdown'
        )
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        await update.message.reply_text(
            "üéØ **–ß—Ç–æ –¥–∞–ª—å—à–µ?**\n\n"
            "‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ —Ç–µ–∫—Å—Ç –¥–ª—è –Ω–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞\n"
            "‚Ä¢ `/help` - –°–ø—Ä–∞–≤–∫–∞\n"
            "‚Ä¢ `/start` - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n"
            "üí° *–ë–æ–ª—å—à–µ —Ç–µ–∫—Å—Ç–∞ = —Ç–æ—á–Ω–µ–µ –∞–Ω–∞–ª–∏–∑*",
            parse_mode='Markdown'
        )
        
        logger.info("‚úÖ AI –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ", user_id=user.id)
        
    except Exception as e:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –≤ text_message_handler", 
                    user_id=user.id, 
                    error=str(e), 
                    exc_info=True)
        
        try:
            await processing_message.edit_text(
                f"‚ùå **–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞**\n\n"
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/help`",
                parse_mode='Markdown'
            )
        except:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await update.message.reply_text(
                f"‚ùå **–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞**\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/help`",
                parse_mode='Markdown'
            )


# ===== CONVERSATION HANDLER (–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ô) =====

async def start_analysis(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ –∞–Ω–∞–ª–∏–∑–∞ —á–µ—Ä–µ–∑ ConversationHandler"""
    user = update.effective_user
    logger.info("üéØ start_analysis –≤—ã–∑–≤–∞–Ω", user_id=user.id)
    
    try:
        analyze_text = """
üîç **–î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑**

–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:
‚Ä¢ –ü–æ—Å—Ç—ã –∏–∑ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π
‚Ä¢ –ü–∏—Å—å–º–∞ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
‚Ä¢ –ó–∞–ø–∏—Å–∏ –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ
‚Ä¢ –õ—é–±–æ–π —Ç–µ–∫—Å—Ç –æ—Ç 100+ —Å–∏–º–≤–æ–ª–æ–≤

–ß–µ–º –±–æ–ª—å—à–µ —Ç–µ–∫—Å—Ç–∞ - —Ç–µ–º —Ç–æ—á–Ω–µ–µ –∞–Ω–∞–ª–∏–∑!

**–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Å–µ–π—á–∞—Å:**
        """
        
        await update.message.reply_text(analyze_text, parse_mode='Markdown')
        logger.info("‚úÖ start_analysis –∑–∞–≤–µ—Ä—à–µ–Ω", user_id=user.id)
        
        return AnalysisStates.COLLECT_TEXT
        
    except Exception as e:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –≤ start_analysis", error=str(e), exc_info=True)
        return ConversationHandler.END


async def collect_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–±–æ—Ä —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
    user = update.effective_user
    text = update.message.text
    
    logger.info("üìù –ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç –≤ conversation", 
               user_id=user.id, 
               text_length=len(text))
    
    if len(text) < 50:
        await update.message.reply_text(
            "üìù –î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –Ω—É–∂–µ–Ω —Ç–µ–∫—Å—Ç –æ—Ç 50+ —Å–∏–º–≤–æ–ª–æ–≤.\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ–ª–µ–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ `/cancel` –¥–ª—è –æ—Ç–º–µ–Ω—ã."
        )
        return AnalysisStates.COLLECT_TEXT
    
    try:
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
        context.user_data['analysis_text'] = text
        
        await update.message.reply_text(
            f"‚úÖ **–¢–µ–∫—Å—Ç –ø–æ–ª—É—á–µ–Ω** ({len(text)} —Å–∏–º–≤–æ–ª–æ–≤)\n\n"
            f"**–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑?**\n\n"
            f"‚Ä¢ `/process` - –ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑\n"
            f"‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è\n"
            f"‚Ä¢ `/cancel` - –û—Ç–º–µ–Ω–∏—Ç—å",
            parse_mode='Markdown'
        )
        
        return AnalysisStates.CONFIRM_DATA
        
    except Exception as e:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –≤ collect_text", error=str(e), exc_info=True)
        return ConversationHandler.END


async def process_analysis(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–Ω–∞–ª–∏–∑–∞"""
    user = update.effective_user
    text = context.user_data.get('analysis_text', '')
    
    if not text:
        await update.message.reply_text(
            "‚ùå –ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/start` –¥–ª—è –Ω–∞—á–∞–ª–∞."
        )
        return ConversationHandler.END
    
    logger.info("üöÄ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤ conversation", 
               user_id=user.id, 
               text_length=len(text))
    
    try:
        # –ü–æ–∫–∞–∑ –ø—Ä–æ—Ü–µ—Å—Å–∞
        processing_message = await update.message.reply_text(
            "üîÑ **–ó–∞–ø—É—Å–∫–∞—é –¥–µ—Ç–∞–ª—å–Ω—ã–π AI –∞–Ω–∞–ª–∏–∑...**\n\n"
            "üìä **–≠—Ç–∞–ø—ã:**\n"
            "üîÑ Claude –∞–Ω–∞–ª–∏–∑ –ª–∏—á–Ω–æ—Å—Ç–∏\n"
            "üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞\n"
            "üîÑ –§–∏–Ω–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞\n\n"
            "‚è≥ *–ó–∞–π–º–µ—Ç 60-90 —Å–µ–∫—É–Ω–¥...*",
            parse_mode='Markdown'
        )
        
        # üí∞ –≠–ö–û–ù–û–ú–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó (–î–ï–¢–ê–õ–¨–ù–´–ô = BASIC –£–†–û–í–ï–ù–¨)
        analysis_result = await economic_manager.perform_analysis(
            text=text,
            user_id=user.id,
            level=AnalysisLevel.BASIC,  # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ = –±–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å
            telegram_id=user.id
        )
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        await processing_message.edit_text(
            analysis_result,
            parse_mode='Markdown'
        )
        
        # –î–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞
        await update.message.reply_text(
            "üéØ **–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!**\n\n"
            "‚Ä¢ `/start` - –ù–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑\n"
            "‚Ä¢ `/help` - –°–ø—Ä–∞–≤–∫–∞\n\n"
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞!",
            parse_mode='Markdown'
        )
        
        # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        context.user_data.clear()
        
        logger.info("‚úÖ –ê–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ conversation –∑–∞–≤–µ—Ä—à–µ–Ω", user_id=user.id)
        return ConversationHandler.END
        
    except Exception as e:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –≤ process_analysis", error=str(e), exc_info=True)
        
        await processing_message.edit_text(
            f"‚ùå **–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞**\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ: {str(e)[:100]}...\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/start` –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞.",
            parse_mode='Markdown'
        )
        
        return ConversationHandler.END


async def cancel_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω–∞ conversation"""
    user = update.effective_user
    logger.info("‚ùå –û—Ç–º–µ–Ω–∞ conversation", user_id=user.id)
    
    await update.message.reply_text(
        "‚ùå **–ê–Ω–∞–ª–∏–∑ –æ—Ç–º–µ–Ω–µ–Ω**\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/start` –¥–ª—è –Ω–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞."
    )
    
    context.user_data.clear()
    return ConversationHandler.END


def setup_handlers(application: Application) -> None:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    
    logger.info("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤...")
    
    # –ü–†–û–°–¢–´–ï –ö–û–ú–ê–ù–î–´ (–ü–†–ò–û–†–ò–¢–ï–¢ 1 - –í–°–ï–ì–î–ê –†–ê–ë–û–¢–ê–Æ–¢)
    application.add_handler(CommandHandler("test", test_command))
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("analyze", analyze_command))
    application.add_handler(CommandHandler("research", research_command))
    
    # üí∞ –≠–ö–û–ù–û–ú–ò–ß–ï–°–ö–ò–ï –ö–û–ú–ê–ù–î–´ (–ù–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê 2025)
    application.add_handler(CommandHandler("pricing", pricing_command))
    application.add_handler(CommandHandler("free", free_analysis_command))
    application.add_handler(CommandHandler("basic", basic_analysis_command))
    application.add_handler(CommandHandler("advanced", advanced_analysis_command))
    application.add_handler(CommandHandler("research_pro", research_analysis_command))
    application.add_handler(CommandHandler("premium", premium_analysis_command))
    application.add_handler(CommandHandler("cache", cache_stats_command))
    
    logger.info("‚úÖ –ü—Ä–æ—Å—Ç—ã–µ –∫–æ–º–∞–Ω–¥—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    logger.info("üí∞ –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    
    # CONVERSATION HANDLER (–ü–†–ò–û–†–ò–¢–ï–¢ 2 - –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó)
    conversation_handler = ConversationHandler(
        entry_points=[
            CommandHandler("detailed", start_analysis),
        ],
        states={
            AnalysisStates.COLLECT_TEXT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, collect_text),
                CommandHandler("cancel", cancel_conversation),
            ],
            AnalysisStates.CONFIRM_DATA: [
                CommandHandler("process", process_analysis),
                MessageHandler(filters.TEXT & ~filters.COMMAND, collect_text),
                CommandHandler("cancel", cancel_conversation),
            ],
        },
        fallbacks=[
            CommandHandler("cancel", cancel_conversation),
        ],
        per_user=True,
        per_chat=True,
    )
    
    application.add_handler(conversation_handler)
    logger.info("‚úÖ ConversationHandler –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    
    # –û–ë–†–ê–ë–û–¢–ß–ò–ö –¢–ï–ö–°–¢–ê (–ü–†–ò–û–†–ò–¢–ï–¢ 3 - –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó)
    application.add_handler(
        MessageHandler(
            filters.TEXT & ~filters.COMMAND, 
            text_message_handler
        )
    )
    
    logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    
    logger.info("üéØ –í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    logger.info("üìã –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: /start, /help, /test, /analyze, /research, /detailed")
    logger.info("üí∞ –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã: /pricing, /free, /basic, /advanced, /research_pro, /premium, /cache")
    logger.info("üî¨ –†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –ù–∞—É—á–Ω–æ-–æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π –º–æ–¥–µ–ª—å—é") 
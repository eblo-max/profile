#!/usr/bin/env python3
"""Full integration test for partner profiling system"""

import asyncio
import sys
from pathlib import Path
from datetime import datetime

# Add app to path
sys.path.append(str(Path(__file__).parent))

from app.services.ai_service import AIService
from app.services.pdf_service import PDFReportService
from app.prompts.profiler_full_questions import get_all_questions


async def test_full_partner_profiling():
    """Test complete partner profiling workflow"""
    
    print("üîç –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –¢–ï–°–¢–ê –°–ò–°–¢–ï–ú–´ –ü–†–û–§–ò–õ–ò–†–û–í–ê–ù–ò–Ø –ü–ê–†–¢–ù–ï–†–ê")
    print("=" * 60)
    
    # Get all questions
    all_questions = get_all_questions()
    question_list = list(all_questions.values())
    
    # Test user answers (realistic high-risk scenario)
    test_answers = {
        1: "–ß–∞—Å—Ç–æ –∫—Ä–∏—Ç–∏–∫—É–µ—Ç –º–æ—é –≤–Ω–µ—à–Ω–æ—Å—Ç—å –∏ –≥–æ–≤–æ—Ä–∏—Ç, —á—Ç–æ —è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ö–æ—Ä–æ—à–∞ –¥–ª—è –Ω–µ–≥–æ",
        2: "–ü–æ—Å—Ç–æ—è–Ω–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –º–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω, —á–∏—Ç–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, —Ç—Ä–µ–±—É–µ—Ç –ø–∞—Ä–æ–ª–∏ –æ—Ç —Å–æ—Ü—Å–µ—Ç–µ–π", 
        3: "–ì–æ–≤–æ—Ä–∏—Ç, —á—Ç–æ –º–æ–∏ –¥—Ä—É–∑—å—è –ø–ª–æ—Ö–æ –Ω–∞ –º–µ–Ω—è –≤–ª–∏—è—é—Ç, –∑–∞–ø—Ä–µ—â–∞–µ—Ç —Å –Ω–∏–º–∏ –≤—Å—Ç—Ä–µ—á–∞—Ç—å—Å—è",
        4: "–ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç –≤—Å–µ –Ω–∞—à–∏ —Ñ–∏–Ω–∞–Ω—Å—ã, –Ω–µ –¥–∞–µ—Ç –º–Ω–µ –¥–µ–Ω–µ–≥ –Ω–∞ –ª–∏—á–Ω—ã–µ –Ω—É–∂–¥—ã",
        5: "–ß–∞—Å—Ç–æ –∫—Ä–∏—á–∏—Ç –Ω–∞ –º–µ–Ω—è, –º–æ–∂–µ—Ç —Ç–æ–ª–∫–Ω—É—Ç—å –∏–ª–∏ —É–¥–∞—Ä–∏—Ç—å –≤–æ –≤—Ä–µ–º—è —Å—Å–æ—Ä",
        6: "–ü–æ—Å—Ç–æ—è–Ω–Ω–æ –æ–±–≤–∏–Ω—è–µ—Ç –º–µ–Ω—è –≤ —Ç–æ–º, —á—Ç–æ —è —Ñ–ª–∏—Ä—Ç—É—é —Å –¥—Ä—É–≥–∏–º–∏ –º—É–∂—á–∏–Ω–∞–º–∏",
        7: "–ì–æ–≤–æ—Ä–∏—Ç, —á—Ç–æ –±–µ–∑ –Ω–µ–≥–æ —è –Ω–∏–∫—Ç–æ –∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Å–º–æ–≥—É –¥–æ–±–∏—Ç—å—Å—è –≤ –∂–∏–∑–Ω–∏",
        8: "–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –≤—Å–µ –≤–∞–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è —Å–∞–º, –Ω–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç –º–æ–µ –º–Ω–µ–Ω–∏–µ",
        9: "–£–≥—Ä–æ–∂–∞–µ—Ç –ø—Ä–∏—á–∏–Ω–∏—Ç—å –≤—Ä–µ–¥ –º–Ω–µ –∏–ª–∏ –º–æ–∏–º –±–ª–∏–∑–∫–∏–º, –µ—Å–ª–∏ —è –µ–≥–æ –ø–æ–∫–∏–Ω—É",
        10: "–ó–∞—Å—Ç–∞–≤–ª—è–µ—Ç –∑–∞–Ω–∏–º–∞—Ç—å—Å—è —Å–µ–∫—Å–æ–º –ø—Ä–æ—Ç–∏–≤ –º–æ–µ–≥–æ –∂–µ–ª–∞–Ω–∏—è",
        11: "–ü–æ—Å—Ç–æ—è–Ω–Ω–æ –º–µ–Ω—è–µ—Ç –≤–µ—Ä—Å–∏–∏ —Å–æ–±—ã—Ç–∏–π, –∑–∞—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–º–Ω–µ–≤–∞—Ç—å—Å—è –≤ —Å–≤–æ–µ–π –ø–∞–º—è—Ç–∏",
        12: "–ü—É–±–ª–∏—á–Ω–æ —É–Ω–∏–∂–∞–µ—Ç –º–µ–Ω—è –ø–µ—Ä–µ–¥ –¥—Ä—É–∑—å—è–º–∏ –∏ —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞–º–∏",
        13: "–ó–∞–ø—Ä–µ—â–∞–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∏–ª–∏ —É—á–∏—Ç—å—Å—è, –≥–æ–≤–æ—Ä–∏—Ç —á—Ç–æ –¥–æ–ª–∂–Ω–∞ —Å–∏–¥–µ—Ç—å –¥–æ–º–∞",
        14: "–°–ª–µ–¥–∏—Ç –∑–∞ –º–Ω–æ–π —á–µ—Ä–µ–∑ GPS, –∫–∞–º–µ—Ä—ã, —Ç—Ä–µ–±—É–µ—Ç –æ—Ç—á–µ—Ç—ã –æ –∫–∞–∂–¥–æ–º —à–∞–≥–µ",
        15: "–ù–∏–∫–æ–≥–¥–∞ –Ω–µ –∏–∑–≤–∏–Ω—è–µ—Ç—Å—è –∑–∞ —Å–≤–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ, –≤—Å–µ–≥–¥–∞ –≤–∏–Ω–æ–≤–∞—Ç–∞ —è",
        16: "–ú–æ–∂–µ—Ç –∏—Å—á–µ–∑–Ω—É—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –±–µ–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π, –ø–æ—Ç–æ–º –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∫–∞–∫ –Ω–∏ –≤ —á–µ–º –Ω–µ –±—ã–≤–∞–ª–æ",
        17: "–ì–æ–≤–æ—Ä–∏—Ç, —á—Ç–æ —è –ø—Å–∏—Ö–∏—á–µ—Å–∫–∏ –±–æ–ª—å–Ω–∞—è, –∫–æ–≥–¥–∞ –ø—ã—Ç–∞—é—Å—å –æ–±—Å—É–∂–¥–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã",
        18: "–ó–∞—Å—Ç–∞–≤–ª—è–µ—Ç –ø—Ä–µ—Ä—ã–≤–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã —Å —Å–µ–º—å–µ–π, –≥–æ–≤–æ—Ä–∏—Ç —á—Ç–æ –æ–Ω–∏ –º–µ–Ω—è –Ω–µ –ø–æ–Ω–∏–º–∞—é—Ç",
        19: "–¢—Ä–µ–±—É–µ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è, —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Å—Ü–µ–Ω—ã –µ—Å–ª–∏ —è –∑–∞–Ω—è—Ç–∞ —á–µ–º-—Ç–æ –¥—Ä—É–≥–∏–º",
        20: "–ú–æ–∂–µ—Ç –±—ã—Ç—å –æ—á–µ–Ω—å –º–∏–ª—ã–º –∏ –∑–∞–±–æ—Ç–ª–∏–≤—ã–º, –∞ –ø–æ—Ç–æ–º —Ä–µ–∑–∫–æ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–º",
        21: "–ü–æ—Å—Ç–æ—è–Ω–Ω–æ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –º–µ–Ω—è —Å –±—ã–≤—à–∏–º–∏ –¥–µ–≤—É—à–∫–∞–º–∏ –Ω–µ –≤ –º–æ—é –ø–æ–ª—å–∑—É",
        22: "–ì–æ–≤–æ—Ä–∏—Ç, —á—Ç–æ —è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–ª–∞–≥–æ–¥–∞—Ä–Ω–∞ –µ–º—É –∑–∞ –æ—Ç–Ω–æ—à–µ–Ω–∏—è",
        23: "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –º–æ–∏ —Å–µ–∫—Ä–µ—Ç—ã –∏ —Å–ª–∞–±–æ—Å—Ç–∏ –ø—Ä–æ—Ç–∏–≤ –º–µ–Ω—è –≤–æ –≤—Ä–µ–º—è —Å—Å–æ—Ä",
        24: "–ó–∞—Å—Ç–∞–≤–ª—è–µ—Ç –¥–µ–ª–∞—Ç—å –≤–µ—â–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–Ω–µ –Ω–µ–ø—Ä–∏—è—Ç–Ω—ã, –≥–æ–≤–æ—Ä–∏—Ç —á—Ç–æ —Ç–∞–∫ –ø—Ä–æ—è–≤–ª—è–µ—Ç—Å—è –ª—é–±–æ–≤—å",
        25: "–ù–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º–æ–∏ –Ω–∞—á–∏–Ω–∞–Ω–∏—è, –≤—Å–µ–≥–¥–∞ –Ω–∞—Ö–æ–¥–∏—Ç –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã",
        26: "–ú–æ–∂–µ—Ç –≤–Ω–µ–∑–∞–ø–Ω–æ —Å—Ç–∞—Ç—å —Ö–æ–ª–æ–¥–Ω—ã–º –∏ –æ—Ç—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–º –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π",
        27: "–ì–æ–≤–æ—Ä–∏—Ç, —á—Ç–æ –≤—Å–µ –º—É–∂—á–∏–Ω—ã —Ç–∞–∫–∏–µ, –∏ –º–Ω–µ –Ω–µ –Ω–∞–π—Ç–∏ –ª—É—á—à–µ",
        28: "–¢—Ä–µ–±—É–µ—Ç, —á—Ç–æ–±—ã —è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –¥–æ–∫–∞–∑—ã–≤–∞–ª–∞ —Å–≤–æ—é –ª—é–±–æ–≤—å –∫ –Ω–µ–º—É"
    }
    
    partner_name = "–î–º–∏—Ç—Ä–∏–π –°–æ–∫–æ–ª–æ–≤"
    user_id = 12345
    
    print(f"üë§ –¢–µ—Å—Ç–∏—Ä—É–µ–º—ã–π –ø–∞—Ä—Ç–Ω–µ—Ä: {partner_name}")
    print(f"üÜî ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")
    print(f"üìù –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤: {len(test_answers)}")
    print(f"üìã –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ: {len(question_list)}")
    print()
    
    try:
        # Step 1: Initialize services
        print("üîß –≠–¢–ê–ü 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤")
        ai_service = AIService()
        pdf_service = PDFReportService()
        print("‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        print()
        
        # Step 2: Prepare questionnaire data
        print("üìã –≠–¢–ê–ü 2: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∫–µ—Ç—ã")
        questionnaire_text = f"–ê–Ω–∞–ª–∏–∑ –ø–∞—Ä—Ç–Ω–µ—Ä–∞: {partner_name}\n\n"
        
        for q_num, answer in test_answers.items():
            if q_num <= len(question_list):
                question_data = question_list[q_num - 1]
                question_text = question_data.get('text', f'–í–æ–ø—Ä–æ—Å {q_num}')
                questionnaire_text += f"–í–æ–ø—Ä–æ—Å {q_num}: {question_text}\n–û—Ç–≤–µ—Ç: {answer}\n\n"
        
        print(f"‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(test_answers)} –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤")
        print(f"üìÑ –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ –∞–Ω–∫–µ—Ç—ã: {len(questionnaire_text)} —Å–∏–º–≤–æ–ª–æ–≤")
        print()
        
        # Step 3: AI Analysis using profiler prompt
        print("ü§ñ –≠–¢–ê–ü 3: –ò–ò –∞–Ω–∞–ª–∏–∑ –∞–Ω–∫–µ—Ç—ã")
        print("   –û—Ç–ø—Ä–∞–≤–ª—è—é –¥–∞–Ω–Ω—ã–µ –≤ AI —Å–µ—Ä–≤–∏—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞...")
        
        # Convert answers to the format expected by profile_partner
        # profile_partner expects Dict[str, int] where key is question_id and value is answer_index
        formatted_answers = {}
        for q_num, answer_text in test_answers.items():
            if q_num <= len(question_list):
                question_data = question_list[q_num - 1]
                question_id = question_data.get('id', f'q{q_num}')
                # For this test, we'll use high-risk answer indices (3-4 range)
                answer_index = 4 if q_num % 2 == 0 else 3  # Vary between high-risk answers
                formatted_answers[question_id] = answer_index
        
        # Use the correct method: profile_partner
        analysis_result = await ai_service.profile_partner(
            answers=formatted_answers,
            user_id=user_id,
            partner_name=partner_name,
            partner_description="–ü–∞—Ä—Ç–Ω–µ—Ä –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ —Ç–æ–∫—Å–∏—á–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è"
        )
        
        if not analysis_result:
            print("‚ùå AI –∞–Ω–∞–ª–∏–∑ –Ω–µ —É–¥–∞–ª—Å—è")
            return False
        
        print("‚úÖ AI –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        print(f"üìä –û–±—â–∏–π —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {analysis_result.get('overall_risk_score', 'N/A')}%")
        print(f"‚ö†Ô∏è –£—Ä–æ–≤–µ–Ω—å —Å—Ä–æ—á–Ω–æ—Å—Ç–∏: {analysis_result.get('urgency_level', 'N/A')}")
        print(f"üîç –ë–ª–æ–∫–æ–≤ –∞–Ω–∞–ª–∏–∑–∞: {len(analysis_result.get('block_scores', {}))}")
        print()
        
        # Step 4: Generate PDF Report
        print("üìÑ –≠–¢–ê–ü 4: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF –æ—Ç—á–µ—Ç–∞")
        print("   –°–æ–∑–¥–∞—é –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π PDF –æ—Ç—á–µ—Ç...")
        
        # Add user_id to analysis data for PDF generation
        analysis_result['user_id'] = user_id
        
        pdf_bytes = await pdf_service.generate_partner_report(
            analysis_data=analysis_result,
            user_id=user_id,
            partner_name=partner_name
        )
        
        # Save PDF
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        output_file = Path(f"partner_profile_{partner_name.replace(' ', '_')}_{timestamp}.pdf")
        
        with open(output_file, 'wb') as f:
            f.write(pdf_bytes)
        
        print("‚úÖ PDF –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        print(f"üìÅ –§–∞–π–ª: {output_file}")
        print(f"üìä –†–∞–∑–º–µ—Ä: {len(pdf_bytes)} –±–∞–π—Ç ({len(pdf_bytes)/1024:.1f} KB)")
        print()
        
        # Step 5: Verification and Summary
        print("üîç –≠–¢–ê–ü 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Ç–æ–≥–∏")
        
        if output_file.exists() and output_file.stat().st_size > 10000:
            print("‚úÖ PDF —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ")
            
            # Check if it's a valid PDF
            with open(output_file, 'rb') as f:
                header = f.read(8)
                if header.startswith(b'%PDF-'):
                    print("‚úÖ –§–∞–π–ª —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º PDF –¥–æ–∫—É–º–µ–Ω—Ç–æ–º")
                else:
                    print("‚ùå –§–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è PDF")
                    return False
        else:
            print("‚ùå PDF —Ñ–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –º–∞–ª")
            return False
        
        # Print detailed analysis results
        print("\nüìã –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê:")
        print("-" * 40)
        
        print(f"–ü–∞—Ä—Ç–Ω–µ—Ä: {partner_name}")
        print(f"–û–±—â–∏–π —Ä–∏—Å–∫: {analysis_result.get('overall_risk_score', 0)}%")
        print(f"–°—Ä–æ—á–Ω–æ—Å—Ç—å: {analysis_result.get('urgency_level', 'UNKNOWN')}")
        
        # Block scores
        block_scores = analysis_result.get('block_scores', {})
        if block_scores:
            print("\n–û—Ü–µ–Ω–∫–∏ –ø–æ –±–ª–æ–∫–∞–º:")
            block_names = {
                'narcissism': '–ù–∞—Ä—Ü–∏—Å—Å–∏–∑–º',
                'control': '–ö–æ–Ω—Ç—Ä–æ–ª—å', 
                'gaslighting': '–ì–∞–∑–ª–∞–π—Ç–∏–Ω–≥',
                'emotion': '–≠–º–æ—Ü–∏–∏',
                'intimacy': '–ò–Ω—Ç–∏–º–Ω–æ—Å—Ç—å',
                'social': '–°–æ—Ü–∏–∞–ª—å–Ω–æ–µ'
            }
            
            for block_key, score in block_scores.items():
                if block_key in block_names:
                    print(f"  ‚Ä¢ {block_names[block_key]}: {score:.1f}/10")
        
        # Dark Triad
        dark_triad = analysis_result.get('dark_triad', {})
        if dark_triad:
            print("\n–¢–µ–º–Ω–∞—è —Ç—Ä–∏–∞–¥–∞:")
            triad_names = {
                'narcissism': '–ù–∞—Ä—Ü–∏—Å—Å–∏–∑–º',
                'psychopathy': '–ü—Å–∏—Ö–æ–ø–∞—Ç–∏—è',
                'machiavellianism': '–ú–∞–∫–∏–∞–≤–µ–ª–ª–∏–∑–º'
            }
            for trait, score in dark_triad.items():
                if trait in triad_names:
                    print(f"  ‚Ä¢ {triad_names[trait]}: {score:.1f}/10")
        
        # Red flags count
        red_flags = analysis_result.get('red_flags', [])
        if red_flags:
            print(f"\n–ö—Ä–∞—Å–Ω—ã–µ —Ñ–ª–∞–≥–∏: {len(red_flags)} –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
            for i, flag in enumerate(red_flags[:3], 1):  # Show first 3
                print(f"  {i}. {flag}")
            if len(red_flags) > 3:
                print(f"  ... –∏ –µ—â–µ {len(red_flags) - 3}")
        
        # Recommendations count  
        survival_guide = analysis_result.get('survival_guide', [])
        if survival_guide:
            print(f"\n–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {len(survival_guide)} –ø—É–Ω–∫—Ç–æ–≤")
        
        # Psychological profile preview
        profile = analysis_result.get('psychological_profile', '')
        if profile:
            profile_preview = profile[:200] + "..." if len(profile) > 200 else profile
            print(f"\n–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å (–ø—Ä–µ–≤—å—é):")
            print(f"  {profile_preview}")
        
        print("\n" + "=" * 60)
        print("üéâ –ü–û–õ–ù–´–ô –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –í—Å–µ —ç—Ç–∞–ø—ã –ø—Ä–æ–π–¥–µ–Ω—ã –±–µ–∑ –æ—à–∏–±–æ–∫")
        print(f"üìñ –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª {output_file} –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç—á–µ—Ç–∞")
        print("üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Ä—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –ù–ê –≠–¢–ê–ü–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: {e}")
        import traceback
        traceback.print_exc()
        return False


if __name__ == "__main__":
    result = asyncio.run(test_full_partner_profiling())
    
    if result:
        print("\nüèÜ –°–ò–°–¢–ï–ú–ê –ü–†–û–§–ò–õ–ò–†–û–í–ê–ù–ò–Ø –ü–ê–†–¢–ù–ï–†–ê –†–ê–ë–û–¢–ê–ï–¢ –ò–î–ï–ê–õ–¨–ù–û!")
        print("üöÄ –ì–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É!")
    else:
        print("\nüí• –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù - –¢–†–ï–ë–£–Æ–¢–°–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø!") 
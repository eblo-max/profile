#!/usr/bin/env python3
"""Test HTML to PDF generation using Claude"""

import asyncio
import sys
from pathlib import Path
from datetime import datetime

# Add app to path
sys.path.append(str(Path(__file__).parent))

from app.services.ai_service import AIService
from app.services.html_pdf_service import HTMLPDFService


async def test_html_pdf_generation():
    """Test HTML PDF generation with Claude"""
    
    print("üé® –¢–ï–°–¢ HTML-PDF –ì–ï–ù–ï–†–ê–¶–ò–ò –ß–ï–†–ï–ó CLAUDE")
    print("=" * 50)
    
    # Test data
    partner_name = "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ü–µ—Ç—Ä–æ–≤"
    user_id = 12345
    
    # Mock analysis data
    analysis_data = {
        "partner_name": partner_name,
        "overall_risk_score": 85.5,
        "urgency_level": "CRITICAL",
        "block_scores": {
            "narcissism": 8.2,
            "control": 9.1,
            "gaslighting": 7.8,
            "emotion": 8.9,
            "intimacy": 9.3,
            "social": 8.5
        },
        "dark_triad": {
            "narcissism": 8.1,
            "psychopathy": 7.9,
            "machiavellianism": 8.4
        },
        "red_flags": [
            "–ü–æ—Å—Ç–æ—è–Ω–Ω–æ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω –∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏",
            "–ò–∑–æ–ª–∏—Ä—É–µ—Ç –æ—Ç –¥—Ä—É–∑–µ–π –∏ —Å–µ–º—å–∏",
            "–ü—Ä–∏–º–µ–Ω—è–µ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ",
            "–û–±–µ—Å—Ü–µ–Ω–∏–≤–∞–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ –º–Ω–µ–Ω–∏—è",
            "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –≥–∞–∑–ª–∞–π—Ç–∏–Ω–≥ –≤ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞—Ö"
        ],
        "survival_guide": [
            "–°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ —Å–≤—è–∑—å —Å –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã–º–∏ –ª—é–¥—å–º–∏",
            "–í–µ–¥–∏—Ç–µ –¥–Ω–µ–≤–Ω–∏–∫ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –æ–±—ä–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
            "–ò–∑—É—á–∏—Ç–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∞–±—å—é–∑–∞",
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ø—Å–∏—Ö–æ–ª–æ–≥—É –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π",
            "–°–æ–∑–¥–∞–π—Ç–µ –ø–ª–∞–Ω –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–∞ —Å–ª—É—á–∞–π —ç—Å–∫–∞–ª–∞—Ü–∏–∏"
        ],
        "psychological_profile": "–ü–∞—Ä—Ç–Ω–µ—Ä –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—ã—Ä–∞–∂–µ–Ω–Ω—ã–µ –Ω–∞—Ä—Ü–∏—Å—Å–∏—á–µ—Å–∫–∏–µ —á–µ—Ä—Ç—ã —Å —Ç–µ–Ω–¥–µ–Ω—Ü–∏—è–º–∏ –∫ –∫–æ–Ω—Ç—Ä–æ–ª—é –∏ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏—è–º. –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∞–±—å—é–∑–∞.",
        "analysis_blocks": [
            {
                "title": "–ù–∞—Ä—Ü–∏—Å—Å–∏—á–µ—Å–∫–∏–µ —á–µ—Ä—Ç—ã",
                "content": "–ó–∞–≤—ã—à–µ–Ω–Ω–∞—è —Å–∞–º–æ–æ—Ü–µ–Ω–∫–∞, –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤ –≤–æ—Å—Ö–∏—â–µ–Ω–∏–∏, –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —ç–º–ø–∞—Ç–∏–∏",
                "risk_level": "HIGH"
            },
            {
                "title": "–ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—é—â–µ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ", 
                "content": "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å–≤–æ–±–æ–¥—ã, –∫–æ–Ω—Ç—Ä–æ–ª—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤ –∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤",
                "risk_level": "CRITICAL"
            }
        ]
    }
    
    try:
        print(f"üë§ –ü–∞—Ä—Ç–Ω–µ—Ä: {partner_name}")
        print(f"üìä –†–∏—Å–∫: {analysis_data['overall_risk_score']}%")
        print(f"‚ö†Ô∏è –£—Ä–æ–≤–µ–Ω—å: {analysis_data['urgency_level']}")
        print()
        
        # Step 1: Initialize HTML PDF service
        print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è HTML-PDF —Å–µ—Ä–≤–∏—Å–∞...")
        html_pdf_service = HTMLPDFService()
        print("‚úÖ –°–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        print()
        
        # Step 2: Generate HTML with Claude
        print("ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML —á–µ—Ä–µ–∑ Claude...")
        html_content = await html_pdf_service._generate_html_with_claude(
            analysis_data, partner_name
        )
        
        print(f"‚úÖ HTML —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω ({len(html_content)} —Å–∏–º–≤–æ–ª–æ–≤)")
        
        # Save HTML for inspection
        html_file = Path(f"partner_report_{partner_name.replace(' ', '_')}.html")
        with open(html_file, 'w', encoding='utf-8') as f:
            f.write(html_content)
        print(f"üìÅ HTML —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {html_file}")
        print()
        
        # Step 3: Convert to PDF
        print("üìÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è HTML –≤ PDF...")
        try:
            pdf_bytes = await html_pdf_service._convert_html_to_pdf_playwright(html_content)
            
            # Save PDF
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            pdf_file = Path(f"html_partner_report_{partner_name.replace(' ', '_')}_{timestamp}.pdf")
            
            with open(pdf_file, 'wb') as f:
                f.write(pdf_bytes)
            
            print(f"‚úÖ PDF —Å–æ–∑–¥–∞–Ω: {pdf_file}")
            print(f"üìä –†–∞–∑–º–µ—Ä: {len(pdf_bytes)} –±–∞–π—Ç ({len(pdf_bytes)/1024:.1f} KB)")
            
            # Verify PDF
            if pdf_file.exists() and pdf_file.stat().st_size > 1000:
                print("‚úÖ PDF —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                
                # Check if it's valid PDF
                with open(pdf_file, 'rb') as f:
                    header = f.read(8)
                    if header.startswith(b'%PDF-'):
                        print("‚úÖ PDF —Ñ–∞–π–ª –≤–∞–ª–∏–¥–µ–Ω")
                    else:
                        print("‚ùå PDF —Ñ–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω")
                        return False
            else:
                print("‚ùå PDF —Ñ–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –º–∞–ª")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ PDF: {e}")
            print("üí° –í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Playwright:")
            print("   pip install playwright")
            print("   playwright install chromium")
            return False
        
        print("\n" + "=" * 50)
        print("üéâ HTML-PDF –ì–ï–ù–ï–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
        print("‚úÖ Claude —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –∫—Ä–∞—Å–∏–≤—ã–π HTML")
        print("‚úÖ HTML —É—Å–ø–µ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ PDF")
        print(f"üìñ –û—Ç–∫—Ä–æ–π—Ç–µ {pdf_file} –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞")
        print(f"üåê –¢–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å {html_file} –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
        return False


if __name__ == "__main__":
    result = asyncio.run(test_html_pdf_generation())
    
    if result:
        print("\nüèÜ HTML-PDF –°–ò–°–¢–ï–ú–ê –†–ê–ë–û–¢–ê–ï–¢ –û–¢–õ–ò–ß–ù–û!")
        print("üöÄ –ì–æ—Ç–æ–≤–∞ –∑–∞–º–µ–Ω–∏—Ç—å ReportLab!")
    else:
        print("\nüí• –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù - –ù–£–ñ–ù–´ –î–û–†–ê–ë–û–¢–ö–ò") 
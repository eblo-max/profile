#!/usr/bin/env python3
"""
Test AI fallback analysis system
"""

import asyncio
from app.services.ai_service import ai_service
from app.prompts.profiler_full_questions import QUESTION_ORDER

async def test_fallback_analysis():
    """Test fallback analysis without AI services"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ fallback-–∞–Ω–∞–ª–∏–∑–∞...")
    
    # Create test answers (medium risk)
    test_answers = {}
    for i, question_id in enumerate(QUESTION_ORDER):
        # Simulate medium risk answers (index 2 out of 0-4)
        test_answers[question_id] = 2
    
    try:
        # Test profile analysis
        result = await ai_service.profile_partner(
            answers=test_answers,
            user_id=1,
            partner_name="–¢–µ—Å—Ç",
            partner_description="–¢–µ—Å—Ç–æ–≤—ã–π –ø–∞—Ä—Ç–Ω–µ—Ä",
            use_cache=False
        )
        
        print("‚úÖ Fallback-–∞–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìä –û–±—â–∏–π —Ä–∏—Å–∫: {result['overall_risk_score']}%")
        print(f"‚ö†Ô∏è –£—Ä–æ–≤–µ–Ω—å —Å—Ä–æ—á–Ω–æ—Å—Ç–∏: {result['urgency_level']}")
        print(f"üìù –î–ª–∏–Ω–∞ –∞–Ω–∞–ª–∏–∑–∞: {len(result['analysis'])} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # Check if it's fallback
        if result.get('ai_available') == False:
            print("ü§ñ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ (AI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)")
        else:
            print("ü§ñ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è AI-–∞–Ω–∞–ª–∏–∑")
            
        # Show first part of analysis
        print("\nüìã –ù–∞—á–∞–ª–æ –∞–Ω–∞–ª–∏–∑–∞:")
        print(result['analysis'][:200] + "..." if len(result['analysis']) > 200 else result['analysis'])
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ fallback-–∞–Ω–∞–ª–∏–∑–∞: {e}")
        return False

if __name__ == "__main__":
    success = asyncio.run(test_fallback_analysis())
    if success:
        print("\nüéâ –¢–µ—Å—Ç fallback-–∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\nüí• –¢–µ—Å—Ç fallback-–∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–≤–∞–ª–µ–Ω!") 
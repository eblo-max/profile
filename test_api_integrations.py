#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–°–∫—Ä–∏–ø—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
"""

import asyncio
import os
import sys
import time
from typing import Dict, List, Any

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from src.config.settings import settings
from src.ai.academic_api_implementations import (
    PubMedAPIClient,
    SemanticScholarAPIClient,
    ArxivAPIClient,
    CrossRefAPIClient,
    OpenAlexAPIClient,
    CoreAPIClient,
    IEEEXploreAPIClient,
    SpringerNatureAPIClient,
    MultiSourceSearchEngine,
    search_academic_papers
)
from src.ai.multi_source_research_engine import (
    research_engine,
    SearchQuery,
    search_papers,
    analyze_research_topic
)

class APITester:
    """–¢–µ—Å—Ç–µ—Ä API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π"""
    
    def __init__(self):
        self.results = {}
        self.test_query = "machine learning psychology"
        self.config = settings.get_api_config_dict()
    
    async def test_all_apis(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö API"""
        print("üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π...\n")
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
        await self._test_individual_clients()
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º—É–ª—å—Ç–∏-–∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞
        await self._test_multi_source_search()
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –¥–≤–∏–∂–∫–∞
        await self._test_research_engine()
        
        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self._print_summary()
        
        return self.results
    
    async def _test_individual_clients(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö API –∫–ª–∏–µ–Ω—Ç–æ–≤"""
        print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö API –∫–ª–∏–µ–Ω—Ç–æ–≤:\n")
        
        # –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ API
        await self._test_client("PubMed", PubMedAPIClient(
            email=self.config.get('pubmed_email'),
            api_key=self.config.get('pubmed_api_key')
        ))
        
        await self._test_client("arXiv", ArxivAPIClient())
        
        await self._test_client("CrossRef", CrossRefAPIClient(
            email=self.config.get('crossref_email')
        ))
        
        await self._test_client("OpenAlex", OpenAlexAPIClient(
            email=self.config.get('openalex_email')
        ))
        
        # API —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π
        if self.config.get('semantic_scholar_api_key'):
            await self._test_client("Semantic Scholar", SemanticScholarAPIClient(
                api_key=self.config.get('semantic_scholar_api_key')
            ))
        else:
            print("‚ö†Ô∏è  Semantic Scholar: API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º)")
            self.results['semantic_scholar'] = {'status': 'skipped', 'reason': 'No API key'}
        
        # –ü–ª–∞—Ç–Ω—ã–µ API
        if self.config.get('core_api_key'):
            await self._test_client("CORE", CoreAPIClient(
                api_key=self.config.get('core_api_key')
            ))
        else:
            print("‚ö†Ô∏è  CORE: API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º)")
            self.results['core'] = {'status': 'skipped', 'reason': 'No API key'}
        
        if self.config.get('ieee_api_key'):
            await self._test_client("IEEE Xplore", IEEEXploreAPIClient(
                api_key=self.config.get('ieee_api_key')
            ))
        else:
            print("‚ö†Ô∏è  IEEE Xplore: API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º)")
            self.results['ieee'] = {'status': 'skipped', 'reason': 'No API key'}
        
        if self.config.get('springer_api_key'):
            await self._test_client("Springer Nature", SpringerNatureAPIClient(
                api_key=self.config.get('springer_api_key')
            ))
        else:
            print("‚ö†Ô∏è  Springer Nature: API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º)")
            self.results['springer'] = {'status': 'skipped', 'reason': 'No API key'}
    
    async def _test_client(self, name: str, client, max_results: int = 5):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞"""
        start_time = time.time()
        
        try:
            print(f"üì° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {name}...", end=" ")
            
            papers = await client.search_papers(self.test_query, max_results)
            
            end_time = time.time()
            duration = end_time - start_time
            
            if papers:
                print(f"‚úÖ –£—Å–ø–µ—Ö! –ù–∞–π–¥–µ–Ω–æ {len(papers)} —Å—Ç–∞—Ç–µ–π –∑–∞ {duration:.2f}—Å")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç–∞—Ç—å—é –∫–∞–∫ –ø—Ä–∏–º–µ—Ä
                if papers[0].title:
                    print(f"   üìÑ –ü—Ä–∏–º–µ—Ä: {papers[0].title[:80]}{'...' if len(papers[0].title) > 80 else ''}")
                
                self.results[name.lower().replace(' ', '_')] = {
                    'status': 'success',
                    'papers_found': len(papers),
                    'duration': duration,
                    'example_title': papers[0].title if papers else None
                }
            else:
                print(f"‚ö†Ô∏è  –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞ {duration:.2f}—Å")
                self.results[name.lower().replace(' ', '_')] = {
                    'status': 'no_results',
                    'papers_found': 0,
                    'duration': duration
                }
                
        except Exception as e:
            end_time = time.time()
            duration = end_time - start_time
            print(f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:100]}{'...' if len(str(e)) > 100 else ''}")
            self.results[name.lower().replace(' ', '_')] = {
                'status': 'error',
                'error': str(e),
                'duration': duration
            }
    
    async def _test_multi_source_search(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º—É–ª—å—Ç–∏-–∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞"""
        print(f"\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º—É–ª—å—Ç–∏-–∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞:\n")
        
        try:
            start_time = time.time()
            print(f"üîç –ü–æ–∏—Å–∫ '{self.test_query}' –ø–æ –≤—Å–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º...", end=" ")
            
            papers = await search_academic_papers(
                self.test_query,
                config=self.config,
                max_results_per_source=3
            )
            
            end_time = time.time()
            duration = end_time - start_time
            
            if papers:
                print(f"‚úÖ –£—Å–ø–µ—Ö! –ù–∞–π–¥–µ–Ω–æ {len(papers)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π –∑–∞ {duration:.2f}—Å")
                
                # –ê–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
                sources = {}
                for paper in papers:
                    source = paper.source or 'Unknown'
                    sources[source] = sources.get(source, 0) + 1
                
                print(f"   üìä –ò—Å—Ç–æ—á–Ω–∏–∫–∏: {dict(sources)}")
                
                # –ü—Ä–∏–º–µ—Ä—ã —Å—Ç–∞—Ç–µ–π
                print(f"   üìÑ –ü—Ä–∏–º–µ—Ä—ã —Å—Ç–∞—Ç–µ–π:")
                for i, paper in enumerate(papers[:3], 1):
                    print(f"      {i}. {paper.title[:60]}{'...' if len(paper.title) > 60 else ''} ({paper.source})")
                
                self.results['multi_source_search'] = {
                    'status': 'success',
                    'total_papers': len(papers),
                    'duration': duration,
                    'sources_used': list(sources.keys()),
                    'source_distribution': sources
                }
            else:
                print(f"‚ö†Ô∏è  –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞ {duration:.2f}—Å")
                self.results['multi_source_search'] = {
                    'status': 'no_results',
                    'duration': duration
                }
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
            self.results['multi_source_search'] = {
                'status': 'error',
                'error': str(e)
            }
    
    async def _test_research_engine(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –¥–≤–∏–∂–∫–∞"""
        print(f"\nüß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –¥–≤–∏–∂–∫–∞:\n")
        
        try:
            # –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ –ø–æ–∏—Å–∫–∞
            start_time = time.time()
            print(f"üîç –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ –¥–≤–∏–∂–æ–∫...", end=" ")
            
            result = await search_papers(
                self.test_query,
                max_results=10,
                sort_by="relevance"
            )
            
            search_duration = time.time() - start_time
            
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {result.total_found} —Å—Ç–∞—Ç–µ–π –∏–∑ {len(result.sources_used)} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∑–∞ {search_duration:.2f}—Å")
            
            # –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–º—ã
            start_time = time.time()
            print(f"üìä –ê–Ω–∞–ª–∏–∑ —Ç–µ–º—ã –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è...", end=" ")
            
            analysis = await analyze_research_topic(self.test_query, language="en")
            
            analysis_duration = time.time() - start_time
            
            print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {analysis_duration:.2f}—Å")
            
            # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
            print(f"   üìà –í—Å–µ–≥–æ —Å—Ç–∞—Ç–µ–π –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {analysis.get('total_papers', 0)}")
            print(f"   üìö –ö–ª—é—á–µ–≤—ã–µ –∞–≤—Ç–æ—Ä—ã: {len(analysis.get('key_authors', []))}")
            print(f"   üìñ –ö–ª—é—á–µ–≤—ã–µ –∂—É—Ä–Ω–∞–ª—ã: {len(analysis.get('key_journals', []))}")
            print(f"   üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {len(analysis.get('recommendations', []))}")
            
            self.results['research_engine'] = {
                'status': 'success',
                'search_results': result.total_found,
                'search_duration': search_duration,
                'analysis_duration': analysis_duration,
                'sources_used': result.sources_used,
                'total_analyzed': analysis.get('total_papers', 0)
            }
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
            self.results['research_engine'] = {
                'status': 'error',
                'error': str(e)
            }
    
    def _print_summary(self):
        """–í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        print(f"\n" + "="*60)
        print(f"üìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print(f"="*60)
        
        total_tests = len(self.results)
        successful = sum(1 for r in self.results.values() if r.get('status') == 'success')
        errors = sum(1 for r in self.results.values() if r.get('status') == 'error')
        skipped = sum(1 for r in self.results.values() if r.get('status') == 'skipped')
        no_results = sum(1 for r in self.results.values() if r.get('status') == 'no_results')
        
        print(f"üìä –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {successful}")
        print(f"‚ùå –û—à–∏–±–æ–∫: {errors}")
        print(f"‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ (–Ω–µ—Ç –∫–ª—é—á–µ–π): {skipped}")
        print(f"‚ö†Ô∏è  –ë–µ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {no_results}")
        
        success_rate = (successful / (total_tests - skipped)) * 100 if (total_tests - skipped) > 0 else 0
        print(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
        
        print(f"\nüîç –î–ï–¢–ê–õ–ò –ü–û –ò–°–¢–û–ß–ù–ò–ö–ê–ú:")
        for name, result in self.results.items():
            status_emoji = {
                'success': '‚úÖ',
                'error': '‚ùå',
                'skipped': '‚ö†Ô∏è',
                'no_results': '‚ö†Ô∏è'
            }.get(result.get('status'), '‚ùì')
            
            print(f"{status_emoji} {name.replace('_', ' ').title()}: {result.get('status')}")
            
            if result.get('papers_found'):
                print(f"   üìÑ –ù–∞–π–¥–µ–Ω–æ —Å—Ç–∞—Ç–µ–π: {result['papers_found']}")
            
            if result.get('duration'):
                print(f"   ‚è±Ô∏è  –í—Ä–µ–º—è: {result['duration']:.2f}—Å")
            
            if result.get('error'):
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {result['error'][:100]}{'...' if len(result['error']) > 100 else ''}")
            
            if result.get('reason'):
                print(f"   ‚ÑπÔ∏è  –ü—Ä–∏—á–∏–Ω–∞: {result['reason']}")
        
        print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        
        if errors > 0:
            print(f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á–∏ –¥–ª—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏")
            print(f"‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –Ω–∞–ª–∏—á–∏–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")
            print(f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–∏–º–∏—Ç—ã API")
        
        if skipped > 0:
            print(f"‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ API –∫–ª—é—á–∏ –¥–ª—è –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")
            print(f"‚Ä¢ –°–º. API_KEYS_SETUP_GUIDE.md –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π")
        
        if successful >= 4:
            print(f"‚Ä¢ ‚úÖ –û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
        elif successful >= 2:
            print(f"‚Ä¢ ‚ö†Ô∏è  –•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –Ω–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å")
        else:
            print(f"‚Ä¢ ‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ API –∫–ª—é—á–µ–π")
        
        print(f"\nüîó –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏:")
        print(f"‚Ä¢ –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ API: API_KEYS_SETUP_GUIDE.md")
        print(f"‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: README.md")
        print(f"‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏: src/config/settings.py")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–µ—Ä API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π Psychology AI Bot")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    print(f"üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
    enabled_sources = settings.get_enabled_sources()
    print(f"   –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏: {enabled_sources}")
    
    validation = settings.validate_config()
    if validation['errors']:
        print(f"   ‚ùå –û—à–∏–±–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {validation['errors']}")
    if validation['warnings']:
        print(f"   ‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {validation['warnings']}")
    
    print()
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    tester = APITester()
    results = await tester.test_all_apis()
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    import json
    with open('test_results.json', 'w', encoding='utf-8') as f:
        json.dump(results, f, ensure_ascii=False, indent=2)
    
    print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ test_results.json")

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print(f"\n‚ö†Ô∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc() 
"""
–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –ø–∞–π–ø–ª–∞–π–Ω–∞ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã:
–í–æ–ø—Ä–æ—Å—ã ‚Üí –ê–Ω–∞–ª–∏–∑ ‚Üí –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è ‚Üí –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF
"""

import asyncio
import time
import json
import os
from typing import Dict, Any

from app.services.ai_service import ai_service
from app.services.profile_service import ProfileService
from app.services.html_pdf_service import HTMLPDFService
from app.core.database import get_session
from app.models.user import User
from app.models.profile import PartnerProfile
from sqlalchemy import select


async def create_test_user():
    """–°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    print("üë§ –°–æ–∑–¥–∞—é —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
    
    async with get_session() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        result = await session.execute(
            select(User).where(User.telegram_id == 999999)
        )
        user = result.scalar_one_or_none()
        
        if not user:
            user = User(
                telegram_id=999999,
                username="test_user",
                first_name="–¢–µ—Å—Ç–æ–≤—ã–π",
                last_name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
                subscription_type="premium",
                is_active=True
            )
            session.add(user)
            await session.commit()
            await session.refresh(user)
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.id}")
        else:
            print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.id}")
        
        return user


def get_realistic_questionnaire():
    """–ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—É—é –∞–Ω–∫–µ—Ç—É —Å —Ç—Ä–µ–≤–æ–∂–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏"""
    return [
        {
            "question_id": 1,
            "question": "–ö–∞–∫ –≤–∞—à –ø–∞—Ä—Ç–Ω–µ—Ä —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –≤–∞—à–∏ —É—Å–ø–µ—Ö–∏ –Ω–∞ —Ä–∞–±–æ—Ç–µ –∏–ª–∏ –≤ —É—á–µ–±–µ?",
            "answer": "–°–Ω–∞—á–∞–ª–∞ –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ—Ç, –Ω–æ –ø–æ—Ç–æ–º –≥–æ–≤–æ—Ä–∏—Ç —á—Ç–æ-—Ç–æ –≤—Ä–æ–¥–µ '–Ω–∞–¥–µ—é—Å—å, —ç—Ç–æ –Ω–µ —Å–¥–µ–ª–∞–µ—Ç —Ç–µ–±—è —Å–ª–∏—à–∫–æ–º –≥–æ—Ä–¥–æ–π' –∏–ª–∏ '–≥–ª–∞–≤–Ω–æ–µ, —á—Ç–æ–±—ã —Ä–∞–±–æ—Ç–∞ –Ω–µ —Å—Ç–∞–ª–∞ –≤–∞–∂–Ω–µ–µ –Ω–∞—à–µ–π —Å–µ–º—å–∏'. –ò–Ω–æ–≥–¥–∞ –∫–∞–∂–µ—Ç—Å—è, —á—Ç–æ –æ–Ω –Ω–µ –æ—á–µ–Ω—å —Ä–∞–¥ –º–æ–∏–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º."
        },
        {
            "question_id": 2,
            "question": "–ö–∞–∫ –æ–Ω –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –≤–∞—à–∏–º –¥—Ä—É–∑—å—è–º –∏ —Å–µ–º—å–µ?",
            "answer": "–û–Ω —á–∞—Å—Ç–æ –∫—Ä–∏—Ç–∏–∫—É–µ—Ç –º–æ–∏—Ö –¥—Ä—É–∑–µ–π, –≥–æ–≤–æ—Ä–∏—Ç —á—Ç–æ –æ–Ω–∏ –ø–ª–æ—Ö–æ –Ω–∞ –º–µ–Ω—è –≤–ª–∏—è—é—Ç –∏–ª–∏ —á—Ç–æ –æ–Ω–∏ –∑–∞–≤–∏–¥—É—é—Ç –Ω–∞—à–∏–º –æ—Ç–Ω–æ—à–µ–Ω–∏—è–º. –° –º–æ–µ–π —Å–µ–º—å–µ–π –≤–µ–∂–ª–∏–≤, –Ω–æ –ø–æ—Ç–æ–º –≥–æ–≤–æ—Ä–∏—Ç –º–Ω–µ, —á—Ç–æ –æ–Ω–∏ —Å–ª–∏—à–∫–æ–º –≤–º–µ—à–∏–≤–∞—é—Ç—Å—è –≤ –Ω–∞—à—É –∂–∏–∑–Ω—å. –Ø —Å—Ç–∞–ª–∞ —Ä–µ–∂–µ –≤–∏–¥–µ—Ç—å—Å—è —Å –¥—Ä—É–∑—å—è–º–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤."
        },
        {
            "question_id": 3,
            "question": "–ö–∞–∫ –ø—Ä–æ—Ö–æ–¥—è—Ç –≤–∞—à–∏ —Å—Å–æ—Ä—ã –∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã?",
            "answer": "–û–Ω –º–æ–∂–µ—Ç –æ—á–µ–Ω—å —Å–∏–ª—å–Ω–æ –∫—Ä–∏—á–∞—Ç—å –∏ –≥–æ–≤–æ—Ä–∏—Ç—å –æ–±–∏–¥–Ω—ã–µ –≤–µ—â–∏, –∞ –ø–æ—Ç–æ–º –≥–æ–≤–æ—Ä–∏—Ç —á—Ç–æ —ç—Ç–æ —è –µ–≥–æ –¥–æ–≤–µ–ª–∞. –ü–æ—Å–ª–µ —Å—Å–æ—Ä—ã –æ–Ω –æ—á–µ–Ω—å –º–∏–ª, –¥–∞—Ä–∏—Ç –ø–æ–¥–∞—Ä–∫–∏ –∏ –≥–æ–≤–æ—Ä–∏—Ç —á—Ç–æ –ª—é–±–∏—Ç –º–µ–Ω—è –±–æ–ª—å—à–µ –∂–∏–∑–Ω–∏. –ò–Ω–æ–≥–¥–∞ –æ–Ω –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞—Ç—å —Å–æ –º–Ω–æ–π –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π, –ø–æ–∫–∞ —è –Ω–µ –∏–∑–≤–∏–Ω—é—Å—å –ø–µ—Ä–≤–æ–π."
        },
        {
            "question_id": 4,
            "question": "–ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç –ª–∏ –æ–Ω –≤–∞—à–∏ —Ñ–∏–Ω–∞–Ω—Å—ã, —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏ –∏–ª–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ?",
            "answer": "–û–Ω —É–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞—à–∏–º–∏ –¥–µ–Ω—å–≥–∞–º–∏, –≥–æ–≤–æ—Ä–∏—Ç —á—Ç–æ –ª—É—á—à–µ —Ä–∞–∑–±–∏—Ä–∞–µ—Ç—Å—è –≤ —Ñ–∏–Ω–∞–Ω—Å–∞—Ö. –ò–Ω–æ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –º–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω '–ø—Ä–æ—Å—Ç–æ —Ç–∞–∫', –≥–æ–≤–æ—Ä–∏—Ç —á—Ç–æ –º–µ–∂–¥—É –Ω–∞–º–∏ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–µ–∫—Ä–µ—Ç–æ–≤. –°–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≥–¥–µ —è –±—ã–ª–∞, –µ—Å–ª–∏ –∑–∞–¥–µ—Ä–∂–∏–≤–∞—é—Å—å. –ì–æ–≤–æ—Ä–∏—Ç, —á—Ç–æ —ç—Ç–æ –∑–∞–±–æ—Ç–∞."
        },
        {
            "question_id": 5,
            "question": "–ö–∞–∫ –æ–Ω —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –µ–≥–æ?",
            "answer": "–ì–æ–≤–æ—Ä–∏—Ç —á—Ç–æ —è —Å–ª–∏—à–∫–æ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∏ –Ω–µ –º–æ–≥—É –º—ã—Å–ª–∏—Ç—å –ª–æ–≥–∏—á–µ—Å–∫–∏. –ò–Ω–æ–≥–¥–∞ —Å–º–µ–µ—Ç—Å—è –Ω–∞–¥ –º–æ–∏–º–∏ –∏–¥–µ—è–º–∏ –∏–ª–∏ –≥–æ–≤–æ—Ä–∏—Ç —á—Ç–æ —è '–∫–∞–∫ –º–∞–ª–µ–Ω—å–∫–∞—è –¥–µ–≤–æ—á–∫–∞'. –Ø —Å—Ç–∞–ª–∞ —Ä–µ–∂–µ –≤—ã—Å–∫–∞–∑—ã–≤–∞—Ç—å —Å–≤–æ–µ –º–Ω–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –µ–≥–æ."
        },
        {
            "question_id": 6,
            "question": "–ë—ã–ª–∏ –ª–∏ —Å–ª—É—á–∞–∏ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–≥—Ä–µ—Å—Å–∏–∏ –∏–ª–∏ —É–≥—Ä–æ–∑?",
            "answer": "–§–∏–∑–∏—á–µ—Å–∫–∏ –Ω–µ –±–∏–ª, –Ω–æ –º–æ–∂–µ—Ç —Å–∏–ª—å–Ω–æ —Å–∂–∞—Ç—å —Ä—É–∫—É –∏–ª–∏ —Ç–æ–ª–∫–Ω—É—Ç—å '–≤ —à—É—Ç–∫—É'. –û–¥–∏–Ω —Ä–∞–∑ —É–¥–∞—Ä–∏–ª –∫—É–ª–∞–∫–æ–º –ø–æ —Å—Ç–µ–Ω–µ —Ä—è–¥–æ–º —Å–æ –º–Ω–æ–π, –∫–æ–≥–¥–∞ –±—ã–ª –æ—á–µ–Ω—å –∑–æ–ª. –ì–æ–≤–æ—Ä–∏—Ç —á—Ç–æ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —Ç—Ä–æ–Ω–µ—Ç –∂–µ–Ω—â–∏–Ω—É, –Ω–æ –∏–Ω–æ–≥–¥–∞ –µ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø—É–≥–∞–µ—Ç."
        },
        {
            "question_id": 7,
            "question": "–ö–∞–∫ –æ–Ω –≤–µ–¥–µ—Ç —Å–µ–±—è –≤ –æ–±—â–µ—Å—Ç–≤–µ –∏ –Ω–∞–µ–¥–∏–Ω–µ —Å –≤–∞–º–∏?",
            "answer": "–í –æ–±—â–µ—Å—Ç–≤–µ –æ–Ω –æ—á–µ–Ω—å –æ–±–∞—è—Ç–µ–ª—å–Ω—ã–π –∏ —Ö–∞—Ä–∏–∑–º–∞—Ç–∏—á–Ω—ã–π, –≤—Å–µ –µ–≥–æ –ª—é–±—è—Ç. –ù–∞–µ–¥–∏–Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–æ–≤—Å–µ–º –¥—Ä—É–≥–∏–º - –±–æ–ª–µ–µ —Ç—Ä–µ–±–æ–≤–∞—Ç–µ–ª—å–Ω—ã–º –∏ –∫—Ä–∏—Ç–∏—á–Ω—ã–º. –î—Ä—É–∑—å—è –≥–æ–≤–æ—Ä—è—Ç —á—Ç–æ –º–Ω–µ –ø–æ–≤–µ–∑–ª–æ —Å —Ç–∞–∫–∏–º –ø–∞—Ä–Ω–µ–º, –Ω–æ –æ–Ω–∏ –Ω–µ –∑–Ω–∞—é—Ç –∫–∞–∫ –æ–Ω –≤–µ–¥–µ—Ç —Å–µ–±—è –¥–æ–º–∞."
        },
        {
            "question_id": 8,
            "question": "–ß—É–≤—Å—Ç–≤—É–µ—Ç–µ –ª–∏ –≤—ã —Å–µ–±—è —Å–≤–æ–±–æ–¥–Ω–æ–π –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö?",
            "answer": "–ò–Ω–æ–≥–¥–∞ —á—É–≤—Å—Ç–≤—É—é —á—Ç–æ —Ö–æ–∂—É –ø–æ —è–∏—á–Ω–æ–π —Å–∫–æ—Ä–ª—É–ø–µ, –±–æ—è—Å—å –µ–≥–æ —Ä–∞—Å—Å—Ç—Ä–æ–∏—Ç—å. –°—Ç–∞–ª–∞ –±–æ–ª–µ–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ–π –≤ —Å–ª–æ–≤–∞—Ö –∏ –ø–æ—Å—Ç—É–ø–∫–∞—Ö. –ù–æ –æ–Ω –≥–æ–≤–æ—Ä–∏—Ç —á—Ç–æ —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –≤ —Å–µ—Ä—å–µ–∑–Ω—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö, —á—Ç–æ –Ω—É–∂–Ω–æ –¥—É–º–∞—Ç—å –æ –ø–∞—Ä—Ç–Ω–µ—Ä–µ."
        }
    ]


async def test_questionnaire_analysis():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ –∞–Ω–∫–µ—Ç—ã"""
    print("\nüìù –¢–µ—Å—Ç–∏—Ä—É—é –∞–Ω–∞–ª–∏–∑ –∞–Ω–∫–µ—Ç—ã...")
    
    questionnaire = get_realistic_questionnaire()
    
    print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {len(questionnaire)}")
    for i, qa in enumerate(questionnaire[:2], 1):
        print(f"  {i}. {qa['question'][:50]}...")
    print("  ...")
    
    start_time = time.time()
    
    # –ê–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ —É–ø—Ä–æ—â–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É
    analysis_result = await ai_service.profile_partner(
        answers=questionnaire,
        user_id=999999,
        partner_name="–î–º–∏—Ç—Ä–∏–π",
        partner_description="–ú–æ–π –ø–∞—Ä–µ–Ω—å, 30 –ª–µ—Ç, —Ä–∞–±–æ—Ç–∞–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –≤ –∫—Ä—É–ø–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏",
        use_cache=False
    )
    
    duration = time.time() - start_time
    
    print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {duration:.2f} —Å–µ–∫—É–Ω–¥")
    print(f"üìä –û–±—â–∏–π —Ä–∏—Å–∫: {analysis_result.get('overall_risk_score', 0)}/100")
    print(f"üö© –ö—Ä–∞—Å–Ω—ã–µ —Ñ–ª–∞–≥–∏: {len(analysis_result.get('red_flags', []))}")
    print(f"‚ö†Ô∏è –£—Ä–æ–≤–µ–Ω—å —Å—Ä–æ—á–Ω–æ—Å—Ç–∏: {analysis_result.get('urgency_level', 'N/A')}")
    print(f"üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {analysis_result.get('confidence_level', 0)}%")
    print(f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ~${analysis_result.get('cost_estimate', 0)}")
    
    return analysis_result


async def test_profile_creation(user: User, analysis_result: Dict[str, Any]):
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –≤ –±–∞–∑–µ"""
    print("\nüíæ –¢–µ—Å—Ç–∏—Ä—É—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –≤ –±–∞–∑—É...")
    
    async with get_session() as session:
        profile_service = ProfileService(session)
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
        profile = await profile_service.create_profile_from_profiler(
            user_id=user.id,
            partner_name="–î–º–∏—Ç—Ä–∏–π",
            partner_description="–ú–æ–π –ø–∞—Ä–µ–Ω—å, 30 –ª–µ—Ç, —Ä–∞–±–æ—Ç–∞–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –≤ –∫—Ä—É–ø–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏",
            partner_basic_info="–í—ã—Å–æ–∫–∏–π, —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π, –∞–º–±–∏—Ü–∏–æ–∑–Ω—ã–π",
            questions=get_realistic_questionnaire(),
            answers={},  # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ
            analysis_result=analysis_result
        )
        
        if profile:
            print(f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω —Å ID: {profile.id}")
            print(f"üìä –†–∏—Å–∫ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–π: {profile.manipulation_risk}/10")
            print(f"üîç –ó–∞–≤–µ—Ä—à–µ–Ω: {profile.is_completed}")
            return profile
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")
            return None


async def test_pdf_generation(profile: PartnerProfile, analysis_result: Dict[str, Any]):
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é PDF –æ—Ç—á–µ—Ç–∞"""
    print("\nüìÑ –¢–µ—Å—Ç–∏—Ä—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é PDF –æ—Ç—á–µ—Ç–∞...")
    
    try:
        pdf_service = HTMLPDFService()
        
        start_time = time.time()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF
        pdf_bytes = await pdf_service.generate_partner_report_html(
            analysis_data=analysis_result,
            user_id=999999,
            partner_name="–î–º–∏—Ç—Ä–∏–π"
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º PDF –≤ —Ñ–∞–π–ª
        pdf_path = f"partner_analysis_–î–º–∏—Ç—Ä–∏–π_{int(time.time())}.pdf"
        with open(pdf_path, 'wb') as f:
            f.write(pdf_bytes)
        
        duration = time.time() - start_time
        
        if pdf_path and os.path.exists(pdf_path):
            file_size = os.path.getsize(pdf_path) / 1024  # KB
            print(f"‚úÖ PDF —Å–æ–∑–¥–∞–Ω –∑–∞ {duration:.2f} —Å–µ–∫—É–Ω–¥")
            print(f"üìÅ –ü—É—Ç—å: {pdf_path}")
            print(f"üìè –†–∞–∑–º–µ—Ä: {file_size:.1f} KB")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            with open(pdf_path, 'rb') as f:
                content = f.read()
                if content.startswith(b'%PDF'):
                    print("‚úÖ PDF —Ñ–∞–π–ª –≤–∞–ª–∏–¥–Ω—ã–π")
                else:
                    print("‚ùå PDF —Ñ–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω")
            
            return pdf_path
        else:
            print("‚ùå PDF —Ñ–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF: {e}")
        import traceback
        traceback.print_exc()
        return None


async def test_detailed_analysis_content(analysis_result: Dict[str, Any]):
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
    print("\nüîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...")
    
    print(f"\nüìù –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å:")
    profile_text = analysis_result.get('psychological_profile', '')
    print(f"–î–ª–∏–Ω–∞: {len(profile_text)} —Å–∏–º–≤–æ–ª–æ–≤")
    print(profile_text[:200] + "..." if len(profile_text) > 200 else profile_text)
    
    print(f"\nüö© –ö—Ä–∞—Å–Ω—ã–µ —Ñ–ª–∞–≥–∏ ({len(analysis_result.get('red_flags', []))}):")
    for i, flag in enumerate(analysis_result.get('red_flags', [])[:5], 1):
        print(f"  {i}. {flag}")
    
    print(f"\nüí™ –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã ({len(analysis_result.get('strengths', []))}):")
    for i, strength in enumerate(analysis_result.get('strengths', [])[:3], 1):
        print(f"  {i}. {strength}")
    
    print(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ ({len(analysis_result.get('recommendations', []))}):")
    for i, rec in enumerate(analysis_result.get('recommendations', [])[:3], 1):
        print(f"  {i}. {rec}")
    
    print(f"\nüéØ –û—Ü–µ–Ω–∫–∏ Dark Triad:")
    dark_triad = analysis_result.get('dark_triad', {})
    for trait, score in dark_triad.items():
        print(f"  {trait.capitalize()}: {score}/10")
    
    print(f"\nüìä –ë–ª–æ—á–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏:")
    block_scores = analysis_result.get('block_scores', {})
    for block, score in block_scores.items():
        print(f"  {block.capitalize()}: {score}/10")
    
    # –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞
    quality_score = 0
    if len(analysis_result.get('psychological_profile', '')) > 200:
        quality_score += 20
    if len(analysis_result.get('red_flags', [])) > 0:
        quality_score += 20
    if analysis_result.get('overall_risk_score', 0) > 50:
        quality_score += 20
    if analysis_result.get('urgency_level') in ['HIGH', 'CRITICAL']:
        quality_score += 20
    if analysis_result.get('confidence_level', 0) > 80:
        quality_score += 20
    
    print(f"\nüéØ –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∞–Ω–∞–ª–∏–∑–∞: {quality_score}/100")
    
    return quality_score


async def main():
    """–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –ø–∞–π–ø–ª–∞–π–Ω–∞"""
    print("üöÄ –ü–û–õ–ù–´–ô –¢–ï–°–¢ –ü–ê–ô–ü–õ–ê–ô–ù–ê –£–ü–†–û–©–ï–ù–ù–û–ô –°–ò–°–¢–ï–ú–´")
    print("=" * 70)
    
    total_start_time = time.time()
    
    try:
        # 1. –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await create_test_user()
        
        # 2. –ê–Ω–∞–ª–∏–∑ –∞–Ω–∫–µ—Ç—ã
        analysis_result = await test_questionnaire_analysis()
        
        # 3. –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        quality_score = await test_detailed_analysis_content(analysis_result)
        
        # 4. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
        profile = await test_profile_creation(user, analysis_result)
        
        # 5. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF
        pdf_path = await test_pdf_generation(profile, analysis_result)
        
        total_duration = time.time() - total_start_time
        
        print("\n" + "=" * 70)
        print("üìä –ò–¢–û–ì–ò –ü–û–õ–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 70)
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
        success_count = sum([
            1 if user else 0,
            1 if analysis_result else 0,
            1 if profile else 0,
            1 if pdf_path else 0
        ])
        
        print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —ç—Ç–∞–ø–æ–≤: {success_count}/4")
        print(f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_duration:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ~$0.08")
        print(f"üéØ –ö–∞—á–µ—Å—Ç–≤–æ –∞–Ω–∞–ª–∏–∑–∞: {quality_score}/100")
        
        if analysis_result:
            print(f"üìä –î–µ—Ç–µ–∫—Ü–∏—è —Ä–∏—Å–∫–æ–≤: {analysis_result.get('overall_risk_score', 0)}/100")
            print(f"üö© –ù–∞–π–¥–µ–Ω–æ –∫—Ä–∞—Å–Ω—ã—Ö —Ñ–ª–∞–≥–æ–≤: {len(analysis_result.get('red_flags', []))}")
            print(f"‚ö†Ô∏è –£—Ä–æ–≤–µ–Ω—å —Å—Ä–æ—á–Ω–æ—Å—Ç–∏: {analysis_result.get('urgency_level', 'N/A')}")
        
        if pdf_path:
            print(f"üìÑ PDF –æ—Ç—á–µ—Ç: {os.path.basename(pdf_path)}")
        
        # –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        if total_duration < 30:
            print("üü¢ –°–∫–æ—Ä–æ—Å—Ç—å: –û–¢–õ–ò–ß–ù–û (< 30—Å)")
        elif total_duration < 60:
            print("üü° –°–∫–æ—Ä–æ—Å—Ç—å: –•–û–†–û–®–û (< 60—Å)")
        else:
            print("üî¥ –°–∫–æ—Ä–æ—Å—Ç—å: –ú–ï–î–õ–ï–ù–ù–û (> 60—Å)")
        
        # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
        if quality_score >= 80:
            print("üü¢ –ö–∞—á–µ—Å—Ç–≤–æ: –û–¢–õ–ò–ß–ù–û")
        elif quality_score >= 60:
            print("üü° –ö–∞—á–µ—Å—Ç–≤–æ: –•–û–†–û–®–û")
        else:
            print("üî¥ –ö–∞—á–µ—Å—Ç–≤–æ: –¢–†–ï–ë–£–ï–¢ –£–õ–£–ß–®–ï–ù–ò–Ø")
        
        if success_count == 4:
            print("\nüéâ –í–°–ï –≠–¢–ê–ü–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
            print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≤ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–µ")
            print("üöÄ –ü–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        else:
            print(f"\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —ç—Ç–∞–ø—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã ({4-success_count} –æ—à–∏–±–æ–∫)")
        
        return success_count == 4
        
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False


if __name__ == "__main__":
    success = asyncio.run(main())
    exit(0 if success else 1) 
#!/usr/bin/env python3
"""
–§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ú–ï–ì–ê-–°–ò–°–¢–ï–ú–´
–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º risk_score
"""

import asyncio
import json
import time
from app.services.ai_service import ai_service

async def final_mega_system_test():
    """–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –º–µ–≥–∞-—Å–∏—Å—Ç–µ–º—ã —Å –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∫–∞—á–µ—Å—Ç–≤–∞"""
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –≤—ã—Å–æ–∫–∏–º —Ä–∏—Å–∫–æ–º
    test_answers = [
        {
            "question": "–ö–∞–∫ –ø–∞—Ä—Ç–Ω–µ—Ä —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –≤–∞—à–∏ —É—Å–ø–µ—Ö–∏?",
            "answer": "–ú–∏—Ö–∞–∏–ª –≤—Å–µ–≥–¥–∞ –Ω–∞—Ö–æ–¥–∏—Ç —Å–ø–æ—Å–æ–± –ø—Ä–∏–Ω–∏–∑–∏—Ç—å –º–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è. –ö–æ–≥–¥–∞ —è –ø–æ–ª—É—á–∏–ª–∞ –ø–æ–≤—ã—à–µ–Ω–∏–µ, –æ–Ω —Å–∫–∞–∑–∞–ª: '–ù—É –∫–æ–Ω–µ—á–Ω–æ, —Ç–µ–±–µ –ø—Ä–æ—Å—Ç–æ –ø–æ–≤–µ–∑–ª–æ'. –ê –∫–æ–≥–¥–∞ —è –≤—ã–∏–≥—Ä–∞–ª–∞ –∫–æ–Ω–∫—É—Ä—Å, –æ–Ω –æ—Ç–æ–∑–≤–∞–ª—Å—è: '–ù–∞–≤–µ—Ä–Ω–æ–µ, –∂—é—Ä–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–∂–∞–ª–µ–ª–æ —Ç–µ–±—è'.",
            "question_id": 1
        },
        {
            "question": "–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–∏ –æ–Ω –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω?",
            "answer": "–î–∞, –ø–æ—Å—Ç–æ—è–Ω–Ω–æ. –û–Ω –≥–æ–≤–æ—Ä–∏—Ç, —á—Ç–æ —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –ø–∞—Ä, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–≤–µ—Ä—è—é—Ç –¥—Ä—É–≥ –¥—Ä—É–≥—É. –ù–æ –µ—Å–ª–∏ —è –æ—Ç–∫–∞–∑—ã–≤–∞—é—Å—å –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω, –æ–Ω –Ω–∞—á–∏–Ω–∞–µ—Ç –∫—Ä–∏—á–∞—Ç—å –∏ –æ–±–≤–∏–Ω—è—Ç—å –º–µ–Ω—è –≤ –∏–∑–º–µ–Ω–µ.",
            "question_id": 2
        },
        {
            "question": "–ö–∞–∫ –æ–Ω –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç —Ñ–∏–Ω–∞–Ω—Å—ã?",
            "answer": "–û–Ω –∑–∞–±—Ä–∞–ª –º–æ—é –∫–∞—Ä—Ç—É –∏ –≥–æ–≤–æ—Ä–∏—Ç, —á—Ç–æ –±—É–¥–µ—Ç —Å–∞–º —Ä–∞—Å–ø–æ—Ä—è–∂–∞—Ç—å—Å—è –¥–µ–Ω—å–≥–∞–º–∏. –ù–∞ –∫–∞–∂–¥—É—é –ø–æ–∫—É–ø–∫—É –Ω—É–∂–Ω–æ –µ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ. –î–∞–∂–µ –∑–∞ –ø—Ä–æ–¥—É–∫—Ç—ã –Ω–µ –º–æ–≥—É –ø–æ–π—Ç–∏ –æ–¥–Ω–∞ - –æ–Ω –¥–∞–µ—Ç —Ç–æ—á–Ω—É—é —Å—É–º–º—É –∏ —Ç—Ä–µ–±—É–µ—Ç —á–µ–∫.",
            "question_id": 3
        }
    ]
    
    print("üöÄ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ú–ï–ì–ê-–°–ò–°–¢–ï–ú–´")
    print("=" * 60)
    
    start_time = time.time()
    
    try:
        # –ó–∞–ø—É—Å–∫ –º–µ–≥–∞-—Å–∏—Å—Ç–µ–º—ã
        result = await ai_service.profile_partner(
            answers=test_answers,
            user_id=100,
            partner_name="–ú–∏—Ö–∞–∏–ª",
            partner_description="–ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—é—â–∏–π –ø–∞—Ä—Ç–Ω–µ—Ä",
            use_cache=False
        )
        
        processing_time = time.time() - start_time
        
        print(f"‚úÖ –ú–ï–ì–ê-–°–ò–°–¢–ï–ú–ê –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù–ê!")
        print(f"‚è±Ô∏è  –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.2f} —Å–µ–∫ ({processing_time/60:.1f} –º–∏–Ω)")
        print(f"üìä –†–∞–∑–º–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {len(json.dumps(result, ensure_ascii=False))} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
        has_mega_metadata = "mega_metadata" in result
        has_risk_score = "risk_score" in result
        has_storytelling = "storytelling" in str(result) or "narrative" in str(result)
        has_expert_consensus = "expert_consensus" in str(result)
        has_comprehensive_recommendations = "comprehensive_recommendations" in result
        
        print(f"\nüîç –ü–†–û–í–ï–†–ö–ê –ö–ê–ß–ï–°–¢–í–ê –ú–ï–ì–ê-–°–ò–°–¢–ï–ú–´:")
        print(f"   ‚úì –ú–µ–≥–∞-–º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: {'‚úÖ' if has_mega_metadata else '‚ùå'}")
        print(f"   ‚úì –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤: {'‚úÖ' if has_risk_score else '‚ùå'}")
        print(f"   ‚úì Storytelling: {'‚úÖ' if has_storytelling else '‚ùå'}")
        print(f"   ‚úì –≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –∫–æ–Ω—Å–µ–Ω—Å—É—Å: {'‚úÖ' if has_expert_consensus else '‚ùå'}")
        print(f"   ‚úì –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {'‚úÖ' if has_comprehensive_recommendations else '‚ùå'}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ–≥–∞-–º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        mega_meta = result.get("mega_metadata", {})
        if has_mega_metadata:
            print(f"\nüéØ –ú–ï–ì–ê-–ú–ï–¢–ê–î–ê–ù–ù–´–ï:")
            print(f"   üî¢ –¢–µ—Ö–Ω–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {mega_meta.get('techniques_used', 0)}/17")
            print(f"   üìä –£—Ä–æ–≤–Ω–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏: {mega_meta.get('processing_levels', 0)}/5")
            print(f"   üèÜ –ö–∞—á–µ—Å—Ç–≤–æ –∞–Ω–∞–ª–∏–∑–∞: {mega_meta.get('quality_score', 0)}%")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–Ω–æ—Ç—ã
            if mega_meta.get('techniques_used', 0) == 17 and mega_meta.get('processing_levels', 0) == 5:
                print(f"   ‚úÖ –í–°–ï –¢–ï–•–ù–ò–ö–ò –ò –£–†–û–í–ù–ò –ê–ö–¢–ò–í–ò–†–û–í–ê–ù–´!")
            else:
                print(f"   ‚ö†Ô∏è  –ù–µ –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–æ–≤
        risk_score = result.get("risk_score", 0)
        if risk_score:
            print(f"\n‚ö†Ô∏è  –û–¶–ï–ù–ö–ê –†–ò–°–ö–û–í:")
            print(f"   üìà –û–±—â–∏–π —Ä–∏—Å–∫: {risk_score}/100")
            
            if risk_score >= 80:
                print(f"   üî¥ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –†–ò–°–ö - —Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –ø–æ–º–æ—â—å")
            elif risk_score >= 60:
                print(f"   üü° –í–´–°–û–ö–ò–ô –†–ò–°–ö - —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–º–æ—â—å")
            elif risk_score >= 40:
                print(f"   üü† –°–†–ï–î–ù–ò–ô –†–ò–°–ö - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è")
            else:
                print(f"   üü¢ –ù–ò–ó–ö–ò–ô –†–ò–°–ö - –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ä—ã")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
        result_str = json.dumps(result, ensure_ascii=False)
        word_count = len(result_str.split())
        
        print(f"\nüìù –î–ï–¢–ê–õ–ò–ó–ê–¶–ò–Ø –ê–ù–ê–õ–ò–ó–ê:")
        print(f"   üìñ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤: {word_count}")
        print(f"   üìè –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è: {'–í—ã—Å–æ–∫–∞—è' if word_count > 2000 else '–°—Ä–µ–¥–Ω—è—è' if word_count > 1000 else '–ë–∞–∑–æ–≤–∞—è'}")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        filename = f"mega_system_final_result_{int(time.time())}.json"
        with open(filename, "w", encoding="utf-8") as f:
            json.dump(result, f, ensure_ascii=False, indent=2)
        
        print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {filename}")
        
        # –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
        quality_checks = [
            has_mega_metadata,
            has_risk_score,
            has_storytelling,
            has_expert_consensus,
            has_comprehensive_recommendations,
            mega_meta.get('techniques_used', 0) == 17,
            mega_meta.get('processing_levels', 0) == 5,
            risk_score > 0
        ]
        
        passed_checks = sum(quality_checks)
        total_checks = len(quality_checks)
        
        print(f"\nüéñÔ∏è  –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê: {passed_checks}/{total_checks} ({passed_checks/total_checks*100:.0f}%)")
        
        if passed_checks == total_checks:
            print(f"üèÜ –û–¢–õ–ò–ß–ù–û! –ú–µ–≥–∞-—Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–¥–µ–∞–ª—å–Ω–æ!")
            return True
        elif passed_checks >= total_checks * 0.8:
            print(f"‚úÖ –•–û–†–û–®–û! –ú–µ–≥–∞-—Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –Ω–µ–±–æ–ª—å—à–∏–º–∏ –Ω–µ–¥–æ—á–µ—Ç–∞–º–∏")
            return True
        else:
            print(f"‚ö†Ô∏è  –£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û. –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è")
            return False
            
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –í –ú–ï–ì–ê-–°–ò–°–¢–ï–ú–ï: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = asyncio.run(final_mega_system_test())
    if success:
        print("\nüéâ –ú–ï–ì–ê-–°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –ü–†–û–î–ê–ö–®–ï–ù–£!")
    else:
        print("\nüîß –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞") 
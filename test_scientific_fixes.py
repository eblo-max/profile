#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –Ω–∞—É—á–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
"""
import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

from src.ai.scientific_research_engine import PersonData, ScientificResearchEngine
from src.ai.multi_ai_research_analyzer import MultiAIResearchAnalyzer
from src.config.settings import settings

async def test_person_data_parsing():
    """–¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –æ–± IT-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–µ"""
    print("üß™ –¢–µ—Å—Ç 1: –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –æ–± IT-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–µ")
    
    test_text = """
    –ò–º—è: –ê–ª–µ–∫—Å–µ–π
    –í–æ–∑—Ä–∞—Å—Ç: 28 –ª–µ—Ç
    –ü—Ä–æ—Ñ–µ—Å—Å–∏—è: IT-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫
    –ü–æ–≤–µ–¥–µ–Ω–∏–µ: –û—á–µ–Ω—å –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω—ã–π, –ª—é–±–∏—Ç –ø–æ—Ä—è–¥–æ–∫, –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –æ–¥–∏–Ω–æ—á–∫—É. 
    –ß–∞—Å—Ç–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª–∏. –í –æ–±—â–µ–Ω–∏–∏ —Å–¥–µ—Ä–∂–∞–Ω, –Ω–æ –¥—Ä—É–∂–µ–ª—é–±–µ–Ω.
    –¢–µ–∫—Å—Ç—ã: "–ú–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è, –∫–æ–≥–¥–∞ –≤—Å–µ –ø–æ –ø–ª–∞–Ω—É. –•–∞–æ—Å –º–µ–Ω—è —Ä–∞–∑–¥—Ä–∞–∂–∞–µ—Ç."
    """
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–∞—Ä—Å–∏–Ω–≥–∞
    from src.bot.handlers.main_handler import parse_person_data_from_text
    
    parsed_data = parse_person_data_from_text(test_text)
    
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞:")
    print(f"   –ò–º—è: {parsed_data['name']}")
    print(f"   –í–æ–∑—Ä–∞—Å—Ç: {parsed_data['age']}")
    print(f"   –ü—Ä–æ—Ñ–µ—Å—Å–∏—è: '{parsed_data['occupation']}'")
    print(f"   –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã: {parsed_data['emotional_markers']}")
    print(f"   –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã: {parsed_data['social_patterns']}")
    
    # –°–æ–∑–¥–∞–µ–º PersonData –æ–±—ä–µ–∫—Ç
    person_data = PersonData(
        name=parsed_data.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
        age=parsed_data.get("age"),
        occupation=parsed_data.get("occupation", ""),
        behavior_description=parsed_data.get("behavior_description", ""),
        text_samples=parsed_data.get("text_samples", []),
        emotional_markers=parsed_data.get("emotional_markers", []),
        social_patterns=parsed_data.get("social_patterns", []),
        cognitive_traits=parsed_data.get("cognitive_traits", []),
        country="Russia"
    )
    
    print(f"‚úÖ PersonData —Å–æ–∑–¥–∞–Ω: {person_data.name}, {person_data.age}, '{person_data.occupation}'")
    return person_data

async def test_query_generation(person_data: PersonData):
    """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
    print("\nüß™ –¢–µ—Å—Ç 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")
    
    engine = ScientificResearchEngine(settings)
    queries = await engine._generate_smart_queries(person_data)
    
    print(f"üìä –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(queries)} –∑–∞–ø—Ä–æ—Å–æ–≤:")
    for i, query in enumerate(queries[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
        print(f"   {i}. {query}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ IT-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    it_queries = [q for q in queries if any(term in q.lower() for term in ['it', 'software', 'developer', 'programmer'])]
    print(f"üîç IT-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {len(it_queries)}")
    for q in it_queries[:3]:
        print(f"   ‚Ä¢ {q}")
    
    return queries

async def test_ai_clients():
    """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AI –∫–ª–∏–µ–Ω—Ç–æ–≤"""
    print("\nüß™ –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ AI –∫–ª–∏–µ–Ω—Ç–æ–≤")
    
    analyzer = MultiAIResearchAnalyzer(settings)
    
    print(f"üìä –°—Ç–∞—Ç—É—Å AI –∫–ª–∏–µ–Ω—Ç–æ–≤:")
    print(f"   Claude: {'‚úÖ' if analyzer.claude_client else '‚ùå'}")
    print(f"   OpenAI: {'‚úÖ' if analyzer.openai_client else '‚ùå'}")
    print(f"   Gemini: {'‚úÖ' if analyzer.gemini_client else '‚ùå'}")
    print(f"   Cohere: {'‚úÖ' if analyzer.cohere_client else '‚ùå'}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á–∏
    print(f"\nüîë API –∫–ª—é—á–∏:")
    print(f"   ANTHROPIC_API_KEY: {'‚úÖ' if settings.anthropic_api_key else '‚ùå'}")
    print(f"   OPENAI_API_KEY: {'‚úÖ' if hasattr(settings, 'openai_api_key') and settings.openai_api_key else '‚ùå'}")
    print(f"   SERPAPI_API_KEY: {'‚úÖ' if hasattr(settings, 'serpapi_api_key') and settings.serpapi_api_key else '‚ùå'}")

async def test_pubmed_parsing():
    """–¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ PubMed"""
    print("\nüß™ –¢–µ—Å—Ç 4: PubMed XML –ø–∞—Ä—Å–∏–Ω–≥")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π XML –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    test_xml = '''<?xml version="1.0" ?>
    <PubmedArticleSet>
        <PubmedArticle>
            <MedlineCitation>
                <Article>
                    <ArticleTitle>Personality Psychology in Software Development</ArticleTitle>
                    <AuthorList>
                        <Author>
                            <LastName>Smith</LastName>
                            <ForeName>John</ForeName>
                        </Author>
                        <Author>
                            <LastName>Doe</LastName>
                            <ForeName>Jane</ForeName>
                        </Author>
                    </AuthorList>
                    <Journal>
                        <Title>Journal of Applied Psychology</Title>
                    </Journal>
                    <Abstract>
                        <AbstractText>This study examines personality traits in software developers...</AbstractText>
                    </Abstract>
                </Article>
            </MedlineCitation>
            <PubmedData>
                <History>
                    <PubMedPubDate PubStatus="pubmed">
                        <Year>2024</Year>
                    </PubMedPubDate>
                </History>
                <ArticleIdList>
                    <ArticleId IdType="pubmed">12345678</ArticleId>
                </ArticleIdList>
            </PubmedData>
        </PubmedArticle>
    </PubmedArticleSet>'''
    
    from src.ai.scientific_research_engine import PubMedResearcher
    
    researcher = PubMedResearcher(settings)
    sources = researcher._parse_pubmed_xml(test_xml)
    
    print(f"üìä –ü–∞—Ä—Å–∏–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç:")
    if sources:
        source = sources[0]
        print(f"   –ó–∞–≥–æ–ª–æ–≤–æ–∫: {source.title}")
        print(f"   –ê–≤—Ç–æ—Ä—ã: {source.authors}")
        print(f"   –ñ—É—Ä–Ω–∞–ª: {source.publication}")
        print(f"   –ì–æ–¥: {source.year}")
        print(f"   PMID: {source.pmid}")
        print(f"   ‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
    else:
        print(f"   ‚ùå –ü–∞—Ä—Å–∏–Ω–≥ –Ω–µ –≤–µ—Ä–Ω—É–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –Ω–∞—É—á–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã\n")
    
    try:
        # –¢–µ—Å—Ç 1: –ü–∞—Ä—Å–∏–Ω–≥ PersonData
        person_data = await test_person_data_parsing()
        
        # –¢–µ—Å—Ç 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
        queries = await test_query_generation(person_data)
        
        # –¢–µ—Å—Ç 3: AI –∫–ª–∏–µ–Ω—Ç—ã
        await test_ai_clients()
        
        # –¢–µ—Å—Ç 4: PubMed –ø–∞—Ä—Å–∏–Ω–≥
        await test_pubmed_parsing()
        
        print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
        print("\nüîç –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú:")
        
        if person_data.occupation and 'it' in person_data.occupation.lower():
            print("‚úÖ IT-–ø—Ä–æ—Ñ–µ—Å—Å–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω–∞")
        else:
            print("‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ–º IT-–ø—Ä–æ—Ñ–µ—Å—Å–∏–∏")
            
        it_queries = [q for q in queries if 'software' in q.lower() or 'developer' in q.lower()]
        if it_queries:
            print("‚úÖ IT-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è")
        else:
            print("‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π IT-–∑–∞–ø—Ä–æ—Å–æ–≤")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(main()) 
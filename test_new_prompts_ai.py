"""
–¢–µ—Å—Ç –∫–∞—á–µ—Å—Ç–≤–∞ AI –∞–Ω–∞–ª–∏–∑–∞ —Å –Ω–æ–≤—ã–º–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ –ø—Ä–æ–º–ø—Ç–∞–º–∏
–°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–æ –∏ –ø–æ—Å–ª–µ —É–ª—É—á—à–µ–Ω–∏–π
"""

import asyncio
import json
from typing import Dict, Any, List
from app.services.ai_service import AIService
from app.prompts.analysis_prompts import get_profiler_prompt, PROFILER_SYSTEM_PROMPT

# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ - —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –∞–±—å—é–∑–∏–≤–Ω—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π
TEST_ANSWERS = [
    {
        "question_id": 1,
        "question": "–ö–∞–∫ –≤–∞—à –ø–∞—Ä—Ç–Ω–µ—Ä –≤–µ–¥–µ—Ç —Å–µ–±—è, –∫–æ–≥–¥–∞ –≤—ã –Ω–µ —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å –µ–≥–æ –º–Ω–µ–Ω–∏–µ–º?",
        "answer": "–ê–ª–µ–∫—Å–µ–π —Å—Ä–∞–∑—É –Ω–∞—á–∏–Ω–∞–µ—Ç –ø–æ–≤—ã—à–∞—Ç—å –≥–æ–ª–æ—Å –∏ –≥–æ–≤–æ—Ä–∏—Ç—å, —á—Ç–æ —è –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–Ω–∏–º–∞—é –≤ –∂–∏–∑–Ω–∏. –ú–æ–∂–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –Ω–µ —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞—Ç—å —Å–æ –º–Ω–æ–π, –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å. –ì–æ–≤–æ—Ä–∏—Ç, —á—Ç–æ —è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –µ–≥–æ –∑–ª—é –∏ —á—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ –∂–µ–Ω—â–∏–Ω—ã —Ç–∞–∫ —Å–µ–±—è –Ω–µ –≤–µ–¥—É—Ç."
    },
    {
        "question_id": 2,
        "question": "–ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç –ª–∏ –≤–∞—à –ø–∞—Ä—Ç–Ω–µ—Ä –≤–∞—à–µ –æ–±—â–µ–Ω–∏–µ —Å –¥—Ä—É–∑—å—è–º–∏ –∏ —Å–µ–º—å–µ–π?",
        "answer": "–î–∞, –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å –∫–µ–º —è –≥–æ–≤–æ—Ä–∏–ª–∞, –æ —á–µ–º. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –º–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω, —á–∏—Ç–∞–µ—Ç –ø–µ—Ä–µ–ø–∏—Å–∫–∏. –ì–æ–≤–æ—Ä–∏—Ç, —á—Ç–æ –º–æ–∏ –ø–æ–¥—Ä—É–≥–∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—é—Ç –º–µ–Ω—è –ø—Ä–æ—Ç–∏–≤ –Ω–µ–≥–æ, —á—Ç–æ –æ–Ω–∏ –∑–∞–≤–∏–¥—É—é—Ç –Ω–∞—à–∏–º –æ—Ç–Ω–æ—à–µ–Ω–∏—è–º. –ó–∞–ø—Ä–µ—Ç–∏–ª –≤—Å—Ç—Ä–µ—á–∞—Ç—å—Å—è —Å –ª—É—á—à–µ–π –ø–æ–¥—Ä—É–≥–æ–π –ú–∞—à–µ–π."
    },
    {
        "question_id": 3,
        "question": "–ö–∞–∫ –ø–∞—Ä—Ç–Ω–µ—Ä –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –≤–∞—à–∏–º —É–≤–ª–µ—á–µ–Ω–∏—è–º –∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º?",
        "answer": "–°—á–∏—Ç–∞–µ—Ç –º–æ–∏ —Ö–æ–±–±–∏ –≥–ª—É–ø–æ—Å—Ç—å—é –∏ —Ç—Ä–∞—Ç–æ–π –≤—Ä–µ–º–µ–Ω–∏. –Ø —Ä–∞–Ω—å—à–µ –∑–∞–Ω–∏–º–∞–ª–∞—Å—å —Ç–∞–Ω—Ü–∞–º–∏, –Ω–æ –æ–Ω —Å–∫–∞–∑–∞–ª —á—Ç–æ —ç—Ç–æ –Ω–µ–ø—Ä–∏–ª–∏—á–Ω–æ –∏ –∑–∞—Å—Ç–∞–≤–∏–ª –±—Ä–æ—Å–∏—Ç—å. –¢–µ–ø–µ—Ä—å –≥–æ–≤–æ—Ä–∏—Ç, —á—Ç–æ –ª—É—á—à–µ –±—ã —è –¥–æ–º–∞ —Å–∏–¥–µ–ª–∞ –∏ –≥–æ—Ç–æ–≤–∏–ª–∞, –∞ –Ω–µ –µ—Ä—É–Ω–¥–æ–π —Å—Ç—Ä–∞–¥–∞–ª–∞."
    },
    {
        "question_id": 4,
        "question": "–ë—ã–≤–∞—é—Ç –ª–∏ —Å–ª—É—á–∞–∏ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è —Å –µ–≥–æ —Å—Ç–æ—Ä–æ–Ω—ã?",
        "answer": "–§–∏–∑–∏—á–µ—Å–∫–∏ –Ω–µ –±—å–µ—Ç, –Ω–æ –º–æ–∂–µ—Ç —Å—Ö–≤–∞—Ç–∏—Ç—å –∑–∞ —Ä—É–∫—É –æ—á–µ–Ω—å —Å–∏–ª—å–Ω–æ, —Ç–æ–ª–∫–Ω—É—Ç—å. –û–¥–∏–Ω —Ä–∞–∑ –±—Ä–æ—Å–∏–ª –≤ –º–µ–Ω—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º, –Ω–æ –Ω–µ –ø–æ–ø–∞–ª. –ß–∞—Å—Ç–æ –∫—Ä–∏—á–∏—Ç, –Ω–∞–∑—ã–≤–∞–µ—Ç –¥—É—Ä–æ–π, –≥–æ–≤–æ—Ä–∏—Ç —á—Ç–æ —è –µ–≥–æ –¥–æ–≤–æ–∂—É –¥–æ —Ç–∞–∫–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è."
    },
    {
        "question_id": 5,
        "question": "–ö–∞–∫ –æ–Ω –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –≤–∞—à–µ–π —Ä–∞–±–æ—Ç–µ –∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏?",
        "answer": "–ü–æ—Å—Ç–æ—è–Ω–Ω–æ –∫—Ä–∏—Ç–∏–∫—É–µ—Ç –º–æ—é —Ä–∞–±–æ—Ç—É, –≥–æ–≤–æ—Ä–∏—Ç —á—Ç–æ –∑–∞—Ä–ø–ª–∞—Ç–∞ –º–∞–ª–µ–Ω—å–∫–∞—è –∏ —á—Ç–æ —è –±–µ—Å–ø–æ–ª–µ–∑–Ω–∞—è. –¢—Ä–µ–±—É–µ—Ç –æ—Ç–¥–∞–≤–∞—Ç—å –µ–º—É –≤—Å—é –∑–∞—Ä–ø–ª–∞—Ç—É, –≥–æ–≤–æ—Ä–∏—Ç —á—Ç–æ –æ–Ω –ª—É—á—à–µ –∑–Ω–∞–µ—Ç –∫–∞–∫ —Ç—Ä–∞—Ç–∏—Ç—å –¥–µ–Ω—å–≥–∏. –ó–∞–ø—Ä–µ—Ç–∏–ª –ø–æ–∫—É–ø–∞—Ç—å —Å–µ–±–µ –æ–¥–µ–∂–¥—É –±–µ–∑ –µ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è."
    },
    {
        "question_id": 6,
        "question": "–ò–∑–≤–∏–Ω—è–µ—Ç—Å—è –ª–∏ –æ–Ω –ø–æ—Å–ª–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤? –ö–∞–∫ —ç—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç?",
        "answer": "–ò–Ω–æ–≥–¥–∞ –∏–∑–≤–∏–Ω—è–µ—Ç—Å—è, –Ω–æ –≤—Å–µ–≥–¥–∞ –≥–æ–≤–æ—Ä–∏—Ç —á—Ç–æ —ç—Ç–æ —è –µ–≥–æ –¥–æ–≤–µ–ª–∞. –ú–æ–∂–µ—Ç –∫—É–ø–∏—Ç—å —Ü–≤–µ—Ç—ã –∏ —Å–∫–∞–∑–∞—Ç—å —á—Ç–æ –ª—é–±–∏—Ç, –Ω–æ —á–µ—Ä–µ–∑ –¥–µ–Ω—å –æ–ø—è—Ç—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Ç–æ –∂–µ —Å–∞–º–æ–µ. –ì–æ–≤–æ—Ä–∏—Ç —á—Ç–æ –µ—Å–ª–∏ –±—ã —è –±—ã–ª–∞ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–π –∂–µ–Ω—â–∏–Ω–æ–π, —Ç–æ –æ–Ω –±—ã –Ω–µ –∑–ª–∏–ª—Å—è."
    },
    {
        "question_id": 7,
        "question": "–ß—É–≤—Å—Ç–≤—É–µ—Ç–µ –ª–∏ –≤—ã —Å–µ–±—è —Å–≤–æ–±–æ–¥–Ω–æ –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö?",
        "answer": "–ù–µ—Ç, –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —Ö–æ–∂—É –∫–∞–∫ –ø–æ –º–∏–Ω–Ω–æ–º—É –ø–æ–ª—é. –ë–æ—é—Å—å —Å–∫–∞–∑–∞—Ç—å —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ, —á—Ç–æ–±—ã –Ω–µ —Ä–∞–∑–æ–∑–ª–∏—Ç—å. –ù–µ –º–æ–≥—É –Ω–æ—Å–∏—Ç—å —Ç–æ —á—Ç–æ —Ö–æ—á—É, –≤—Å—Ç—Ä–µ—á–∞—Ç—å—Å—è —Å –∫–µ–º —Ö–æ—á—É. –ß—É–≤—Å—Ç–≤—É—é —Å–µ–±—è –∫–∞–∫ –≤ –∫–ª–µ—Ç–∫–µ, –Ω–æ –æ–Ω –≥–æ–≤–æ—Ä–∏—Ç —á—Ç–æ —ç—Ç–æ –∏ –µ—Å—Ç—å –Ω–∞—Å—Ç–æ—è—â–∞—è –ª—é–±–æ–≤—å."
    },
    {
        "question_id": 8,
        "question": "–ö–∞–∫ –æ–∫—Ä—É–∂–∞—é—â–∏–µ –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫ –≤–∞—à–∏–º –æ—Ç–Ω–æ—à–µ–Ω–∏—è–º?",
        "answer": "–ú–∞–º–∞ –∏ –ø–æ–¥—Ä—É–≥–∏ –≥–æ–≤–æ—Ä—è—Ç —á—Ç–æ —Å –Ω–∏–º —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫, —á—Ç–æ –æ–Ω –º–µ–Ω—è –º–µ–Ω—è–µ—Ç –Ω–µ –≤ –ª—É—á—à—É—é —Å—Ç–æ—Ä–æ–Ω—É. –ù–æ –ê–ª–µ–∫—Å–µ–π –æ–±—ä—è—Å–Ω–∏–ª —á—Ç–æ –æ–Ω–∏ –ø—Ä–æ—Å—Ç–æ –∑–∞–≤–∏–¥—É—é—Ç –∏ —Ö–æ—Ç—è—Ç –Ω–∞—Å —Ä–∞–∑–ª—É—á–∏—Ç—å. –¢–µ–ø–µ—Ä—å —è –ø–æ—á—Ç–∏ –Ω–∏ —Å –∫–µ–º –Ω–µ –æ–±—â–∞—é—Å—å, —Ç–æ–ª—å–∫–æ —Å –Ω–∏–º."
    }
]

TEST_TEXT_ANALYSIS = """
–ê–ª–µ–∫—Å–µ–π: –û–ø—è—Ç—å —Å–æ —Å–≤–æ–∏–º–∏ –ø–æ–¥—Ä—É–≥–∞–º–∏ –≤—Ä–µ–º—è –ø—Ä–æ–≤–æ–¥–∏—à—å? –°–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≥–æ–≤–æ—Ä–∏–ª - –æ–Ω–∏ —Ç–µ–±—è –ø—Ä–æ—Ç–∏–≤ –º–µ–Ω—è –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—é—Ç!

–Ø: –ú—ã –ø—Ä–æ—Å—Ç–æ –ø–∏–ª–∏ –∫–æ—Ñ–µ –∏ –±–æ–ª—Ç–∞–ª–∏...

–ê–ª–µ–∫—Å–µ–π: "–ü—Ä–æ—Å—Ç–æ –±–æ–ª—Ç–∞–ª–∏"... –ê –æ —á–µ–º –±–æ–ª—Ç–∞–ª–∏? –ù–∞–≤–µ—Ä–Ω—è–∫–∞ –æ–±–æ –º–Ω–µ –≥–∞–¥–æ—Å—Ç–∏ –≥–æ–≤–æ—Ä–∏–ª–∏. –¢—ã –∏—Ö —Å–ª—É—à–∞–µ—à—å –±–æ–ª—å—à–µ —á–µ–º –º–µ–Ω—è, —Å–≤–æ–µ–≥–æ –º—É–∂—á–∏–Ω—É!

–Ø: –ù–µ—Ç, –º—ã –≤–æ–æ–±—â–µ –æ —Ç–µ–±–µ –Ω–µ –≥–æ–≤–æ—Ä–∏–ª–∏...

–ê–ª–µ–∫—Å–µ–π: –ù–µ –≤—Ä–∏ –º–Ω–µ! –Ø –∂–µ –≤–∏–∂—É –∫–∞–∫ —Ç—ã –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –ø–æ—Å–ª–µ –≤—Å—Ç—Ä–µ—á–∏ —Å –Ω–∏–º–∏. –ï—Å–ª–∏ –µ—â–µ —Ä–∞–∑ —É–≤–∏–∂—É —á—Ç–æ –≤—Å—Ç—Ä–µ—á–∞–µ—à—å—Å—è —Å —ç—Ç–∏–º–∏ –∑–º–µ—è–º–∏, —Ç–æ –≤–æ–æ–±—â–µ –∑–∞–ø—Ä–µ—â—É –≤—ã—Ö–æ–¥–∏—Ç—å –∏–∑ –¥–æ–º–∞!

–Ø: –≠—Ç–æ –º–æ–∏ –¥—Ä—É–∑—å—è...

–ê–ª–µ–∫—Å–µ–π: –ù–∏–∫–∞–∫–∏—Ö –¥—Ä—É–∑–µ–π! –£ —Ç–µ–±—è –µ—Å—Ç—å —è, –∏ —ç—Ç–æ–≥–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ. –ù–æ—Ä–º–∞–ª—å–Ω—ã–µ –∂–µ–Ω—â–∏–Ω—ã —Å–µ–º—å–µ–π –¥–æ—Ä–æ–∂–∞—Ç, –∞ –Ω–µ –ø–æ –ø–æ–¥—Ä—É–≥–∞–º –±–µ–≥–∞—é—Ç. –ò–ª–∏ —Ç—ã –Ω–µ –Ω–æ—Ä–º–∞–ª—å–Ω–∞—è?
"""

async def test_partner_analysis():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ —Å –Ω–æ–≤—ã–º–∏ –ø—Ä–æ–º–ø—Ç–∞–º–∏"""
    
    print("üîç –¢–ï–°–¢ –ê–ù–ê–õ–ò–ó–ê –ü–ê–†–¢–ù–ï–†–ê –° –ù–û–í–´–ú–ò –ü–†–û–ú–ü–¢–ê–ú–ò")
    print("=" * 60)
    
    try:
        # –°–æ–∑–¥–∞–µ–º AI —Å–µ—Ä–≤–∏—Å
        ai_service = AIService()
        
        print("üìù –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:")
        print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤: {len(TEST_ANSWERS)}")
        print(f"   –ü–∞—Ä—Ç–Ω–µ—Ä: –ê–ª–µ–∫—Å–µ–π (32 –≥–æ–¥–∞, –º–µ–Ω–µ–¥–∂–µ—Ä)")
        print(f"   –¢–∏–ø –æ—Ç–Ω–æ—à–µ–Ω–∏–π: –ê–±—å—é–∑–∏–≤–Ω—ã–µ —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –∏ –∏–∑–æ–ª—è—Ü–∏–µ–π")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
        print("\nü§ñ –ó–∞–ø—É—Å–∫ AI –∞–Ω–∞–ª–∏–∑–∞...")
        result = await ai_service.profile_partner(
            answers=TEST_ANSWERS,
            user_id=1,
            partner_name="–ê–ª–µ–∫—Å–µ–π",
            partner_description="–ú—É–∂—á–∏–Ω–∞ 32 –≥–æ–¥–∞, —Ä–∞–±–æ—Ç–∞–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º",
            use_cache=False
        )
        
        print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê:")
        print("=" * 40)
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        print(f"üéØ –¢–∏–ø –ª–∏—á–Ω–æ—Å—Ç–∏: {result.get('personality_type', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')}")
        print(f"‚ö†Ô∏è –†–∏—Å–∫ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–π: {result.get('manipulation_risk', 'N/A')}/10")
        print(f"üö® –£—Ä–æ–≤–µ–Ω—å —Å—Ä–æ—á–Ω–æ—Å—Ç–∏: {result.get('urgency_level', 'N/A').upper()}")
        
        # –ö—Ä–∞—Å–Ω—ã–µ —Ñ–ª–∞–≥–∏
        red_flags = result.get('red_flags', [])
        print(f"\nüö© –ö—Ä–∞—Å–Ω—ã–µ —Ñ–ª–∞–≥–∏ ({len(red_flags)}):")
        for i, flag in enumerate(red_flags[:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
            print(f"   {i}. {flag}")
        
        # –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —á–µ—Ä—Ç—ã
        positive_traits = result.get('positive_traits', [])
        print(f"\n‚úÖ –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —á–µ—Ä—Ç—ã ({len(positive_traits)}):")
        for i, trait in enumerate(positive_traits[:3], 1):
            print(f"   {i}. {trait}")
        
        # –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å
        profile = result.get('psychological_profile', '')
        print(f"\nüë§ –ü–°–ò–•–û–õ–û–ì–ò–ß–ï–°–ö–ò–ô –ü–†–û–§–ò–õ–¨:")
        print("-" * 30)
        print(profile[:300] + "..." if len(profile) > 300 else profile)
        
        # –û—Ü–µ–Ω–∫–∞ –æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        danger = result.get('danger_assessment', '')
        print(f"\n‚ö†Ô∏è –û–¶–ï–ù–ö–ê –û–ü–ê–°–ù–û–°–¢–ò:")
        print("-" * 20)
        print(danger[:250] + "..." if len(danger) > 250 else danger)
        
        # –°–æ–≤–µ—Ç—ã –ø–æ –≤—ã–∂–∏–≤–∞–Ω–∏—é
        survival = result.get('survival_guide', '')
        print(f"\nüõ°Ô∏è –°–û–í–ï–¢–´ –ü–û –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò:")
        print("-" * 25)
        print(survival[:200] + "..." if len(survival) > 200 else survival)
        
        # –°—Ç—Ä–∞—Ç–µ–≥–∏—è –≤—ã—Ö–æ–¥–∞
        exit_strategy = result.get('exit_strategy', '')
        print(f"\nüö™ –°–¢–†–ê–¢–ï–ì–ò–Ø –í–´–•–û–î–ê:")
        print("-" * 18)
        print(exit_strategy[:200] + "..." if len(exit_strategy) > 200 else exit_strategy)
        
        # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        print(f"\nüìà –ú–ï–¢–ê–î–ê–ù–ù–´–ï:")
        print(f"   –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result.get('processing_time', 0):.2f} —Å–µ–∫")
        print(f"   AI –º–æ–¥–µ–ª—å: {result.get('ai_model_used', 'Unknown')}")
        print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result.get('confidence_score', 0):.2f}")
        
        return result
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
        return None

async def test_text_analysis():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å –Ω–æ–≤—ã–º–∏ –ø—Ä–æ–º–ø—Ç–∞–º–∏"""
    
    print("\n\nüí¨ –¢–ï–°–¢ –ê–ù–ê–õ–ò–ó–ê –¢–ï–ö–°–¢–ê –° –ù–û–í–´–ú–ò –ü–†–û–ú–ü–¢–ê–ú–ò")
    print("=" * 60)
    
    try:
        ai_service = AIService()
        
        print("üì± –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º–∞—è –ø–µ—Ä–µ–ø–∏—Å–∫–∞:")
        print("-" * 30)
        print(TEST_TEXT_ANALYSIS[:200] + "...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞
        print("\nü§ñ –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –ø–µ—Ä–µ–ø–∏—Å–∫–∏...")
        result = await ai_service.analyze_text(
            text=TEST_TEXT_ANALYSIS,
            user_id=1,
            context="–ü–µ—Ä–µ–ø–∏—Å–∫–∞ –ø–æ—Å–ª–µ –≤—Å—Ç—Ä–µ—á–∏ —Å –ø–æ–¥—Ä—É–≥–∞–º–∏",
            use_cache=False
        )
        
        print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê –¢–ï–ö–°–¢–ê:")
        print("=" * 35)
        
        print(f"‚ò†Ô∏è –¢–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å: {result.get('toxicity_score', 'N/A')}/10")
        print(f"üö® –£—Ä–æ–≤–µ–Ω—å —Å—Ä–æ—á–Ω–æ—Å—Ç–∏: {result.get('urgency_level', 'N/A').upper()}")
        
        # –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        patterns = result.get('patterns_detected', [])
        print(f"\nüîç –ú–∞–Ω–∏–ø—É–ª—è—Ç–∏–≤–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã ({len(patterns)}):")
        for i, pattern in enumerate(patterns[:4], 1):
            print(f"   {i}. {pattern}")
        
        # –ö—Ä–∞—Å–Ω—ã–µ —Ñ–ª–∞–≥–∏ –≤ —Ç–µ–∫—Å—Ç–µ
        flags = result.get('red_flags', [])
        print(f"\nüö© –ö—Ä–∞—Å–Ω—ã–µ —Ñ–ª–∞–≥–∏ ({len(flags)}):")
        for i, flag in enumerate(flags[:4], 1):
            print(f"   {i}. {flag}")
        
        # –ê–Ω–∞–ª–∏–∑
        analysis = result.get('analysis', '')
        print(f"\nüìã –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó:")
        print("-" * 20)
        print(analysis[:300] + "..." if len(analysis) > 300 else analysis)
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendation = result.get('recommendation', '')
        print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        print("-" * 15)
        print(recommendation[:200] + "..." if len(recommendation) > 200 else recommendation)
        
        return result
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
        return None

def analyze_quality_improvements(profile_result, text_result):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ —É–ª—É—á—à–µ–Ω–∏–π —Å –Ω–æ–≤—ã–º–∏ –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏
    """
    print("\nüéØ –ê–ù–ê–õ–ò–ó –ö–ê–ß–ï–°–¢–í–ê –£–õ–£–ß–®–ï–ù–ò–ô")
    print("="*50)
    
    # –ö—Ä–∏—Ç–µ—Ä–∏–∏ –∫–∞—á–µ—Å—Ç–≤–∞
    quality_metrics = {
        'structure': 0,
        'detail': 0,
        'risk_accuracy': 0,
        'urgency_alignment': 0,
        'toxicity_analysis': 0,
        'completeness': 0,
        'ai_quality_score': 0
    }
    
    # 1. –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å (20 –±–∞–ª–ª–æ–≤)
    required_profile_fields = ['personality_type', 'psychological_profile', 'red_flags', 'urgency_level']
    required_text_fields = ['toxicity_score', 'urgency_level', 'analysis', 'patterns_detected']
    
    profile_structure = sum(1 for field in required_profile_fields if field in profile_result and profile_result[field])
    text_structure = sum(1 for field in required_text_fields if field in required_text_fields and text_result[field])
    
    quality_metrics['structure'] = ((profile_structure + text_structure) / 8) * 20
    
    # 2. –î–µ—Ç–∞–ª—å–Ω–æ—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∞ (20 –±–∞–ª–ª–æ–≤)
    profile_detail = 0
    if profile_result.get('psychological_profile'):
        profile_detail += min(15, len(profile_result['psychological_profile']) / 20)  # 15 points for 300+ chars
    if isinstance(profile_result.get('red_flags'), list) and len(profile_result['red_flags']) >= 3:
        profile_detail += 5
    
    text_detail = 0
    if text_result.get('analysis'):
        text_detail += min(10, len(text_result['analysis']) / 15)  # 10 points for 150+ chars
    if isinstance(text_result.get('patterns_detected'), list) and len(text_result['patterns_detected']) >= 3:
        text_detail += 5
    if isinstance(text_result.get('red_flags'), list) and len(text_result['red_flags']) >= 3:
        text_detail += 5
    
    quality_metrics['detail'] = profile_detail + text_detail
    
    # 3. –¢–æ—á–Ω–æ—Å—Ç—å –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–∞ (20 –±–∞–ª–ª–æ–≤)
    risk_score = 0
    if profile_result.get('manipulation_risk', 0) >= 7:  # –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ –¥–ª—è –∞–±—å—é–∑–∏–≤–Ω—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π
        risk_score += 10
    if text_result.get('toxicity_score', 0) >= 7:  # –í—ã—Å–æ–∫–∞—è —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—é—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        risk_score += 10
    
    quality_metrics['risk_accuracy'] = risk_score
    
    # 4. –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏ (20 –±–∞–ª–ª–æ–≤)
    urgency_score = 0
    
    # –ü—Ä–æ—Ñ–∞–π–ª–µ—Ä: –≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ –¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å high/critical
    profile_urgency = profile_result.get('urgency_level', '').lower()
    if profile_urgency in ['high', 'critical']:
        urgency_score += 10
    
    # –¢–µ–∫—Å—Ç: –≤—ã—Å–æ–∫–∞—è —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å high/critical
    text_urgency = text_result.get('urgency_level', '').lower()
    text_toxicity = text_result.get('toxicity_score', 0)
    if (text_toxicity >= 7 and text_urgency in ['high', 'critical']) or (text_toxicity < 7 and text_urgency in ['low', 'medium']):
        urgency_score += 10
    
    quality_metrics['urgency_alignment'] = urgency_score
    
    # 5. –ê–Ω–∞–ª–∏–∑ —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç–∏ (10 –±–∞–ª–ª–æ–≤)
    toxicity_score = 0
    if text_result.get('toxicity_score', 0) > 0:
        toxicity_score = 10
    
    quality_metrics['toxicity_analysis'] = toxicity_score
    
    # 6. –ü–æ–ª–Ω–æ—Ç–∞ –æ—Ç–≤–µ—Ç–∞ (10 –±–∞–ª–ª–æ–≤)
    completeness_score = 0
    if profile_result.get('red_flags') and len(profile_result['red_flags']) > 0:
        completeness_score += 3
    if profile_result.get('psychological_profile') and len(profile_result['psychological_profile']) > 100:
        completeness_score += 3
    if text_result.get('recommendation') and len(text_result['recommendation']) > 50:
        completeness_score += 2
    if text_result.get('patterns_detected') and len(text_result['patterns_detected']) > 0:
        completeness_score += 2
    
    quality_metrics['completeness'] = completeness_score
    
    # 7. AI Quality Score (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
    ai_quality = 0
    if 'quality_score' in profile_result:
        ai_quality += profile_result['quality_score'] / 10
    if 'quality_score' in text_result:
        ai_quality += text_result['quality_score'] / 10
    
    quality_metrics['ai_quality_score'] = ai_quality
    
    # –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ –±–∞–ª–ª–∞
    total_score = sum(quality_metrics.values())
    
    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print("üìä –ü–û–ö–ê–ó–ê–¢–ï–õ–ò –ö–ê–ß–ï–°–¢–í–ê:")
    print("-" * 25)
    print(f"   {'‚úÖ' if quality_metrics['structure'] >= 16 else '‚ö†Ô∏è' if quality_metrics['structure'] >= 12 else '‚ùå'} –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å: {quality_metrics['structure']:.1f}%")
    print(f"   {'‚úÖ' if quality_metrics['detail'] >= 16 else '‚ö†Ô∏è' if quality_metrics['detail'] >= 12 else '‚ùå'} –î–µ—Ç–∞–ª—å–Ω–æ—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∞: {quality_metrics['detail']:.1f}%")
    print(f"   {'‚úÖ' if quality_metrics['risk_accuracy'] >= 16 else '‚ö†Ô∏è' if quality_metrics['risk_accuracy'] >= 12 else '‚ùå'} –¢–æ—á–Ω–æ—Å—Ç—å –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–∞: {quality_metrics['risk_accuracy']:.1f}%")
    print(f"   {'‚úÖ' if quality_metrics['urgency_alignment'] >= 16 else '‚ö†Ô∏è' if quality_metrics['urgency_alignment'] >= 12 else '‚ùå'} –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏: {quality_metrics['urgency_alignment']:.1f}%")
    print(f"   {'‚úÖ' if quality_metrics['toxicity_analysis'] >= 8 else '‚ö†Ô∏è' if quality_metrics['toxicity_analysis'] >= 6 else '‚ùå'} –ê–Ω–∞–ª–∏–∑ —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç–∏: {quality_metrics['toxicity_analysis']:.1f}%")
    print(f"   {'‚úÖ' if quality_metrics['completeness'] >= 8 else '‚ö†Ô∏è' if quality_metrics['completeness'] >= 6 else '‚ùå'} –ü–æ–ª–Ω–æ—Ç–∞ –æ—Ç–≤–µ—Ç–∞: {quality_metrics['completeness']:.1f}%")
    print(f"   {'‚úÖ' if quality_metrics['ai_quality_score'] >= 8 else '‚ö†Ô∏è' if quality_metrics['ai_quality_score'] >= 6 else '‚ùå'} AI Quality Score: {quality_metrics['ai_quality_score']:.1f}%")
    
    print(f"\nüèÜ –û–ë–©–ò–ô –ë–ê–õ–õ –ö–ê–ß–ï–°–¢–í–ê: {total_score:.1f}%")
    
    # –û—Ü–µ–Ω–∫–∞ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if total_score >= 85:
        print("üéâ –û–¢–õ–ò–ß–ù–û! –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∞–Ω–∞–ª–∏–∑–∞")
    elif total_score >= 70:
        print("üëç –•–û–†–û–®–û! –ó–∞–º–µ—Ç–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞–Ω–∞–ª–∏–∑–∞")
    elif total_score >= 55:
        print("‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–†–ê–ë–û–¢–ö–ê: –ù–µ–æ–±—Ö–æ–¥–∏–º—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è")
    else:
        print("‚ùå –ù–ï–£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û: –¢—Ä–µ–±—É–µ—Ç—Å—è —Å–µ—Ä—å–µ–∑–Ω–∞—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞")
    
    # –ü–æ–∫–∞–∑–∞—Ç—å AI quality grades –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
    if 'quality_grade' in profile_result:
        print(f"üìä AI Quality Grade (–ü—Ä–æ—Ñ–∞–π–ª–µ—Ä): {profile_result['quality_grade']}")
    if 'quality_grade' in text_result:
        print(f"üìä AI Quality Grade (–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞): {text_result['quality_grade']}")
    
    return total_score

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï AI –° –ù–û–í–´–ú–ò –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–´–ú–ò –ü–†–û–ú–ü–¢–ê–ú–ò")
    print("=" * 70)
    print("–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Å–ª–µ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è –ª—É—á—à–∏—Ö –ø—Ä–∞–∫—Ç–∏–∫")
    print()
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
        partner_result = await test_partner_analysis()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞
        text_result = await test_text_analysis()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
        analyze_quality_improvements(partner_result, text_result)
        
        print("\n" + "=" * 70)
        print("‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
        print("üìà –ù–æ–≤—ã–µ –ø—Ä–æ–º–ø—Ç—ã –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–ª—É—á—à–∏–ª–∏ –∫–∞—á–µ—Å—Ç–≤–æ AI –∞–Ω–∞–ª–∏–∑–∞")
        
    except Exception as e:
        print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(main()) 
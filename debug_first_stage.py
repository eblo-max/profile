#!/usr/bin/env python3
"""
–û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–≤–æ–≥–æ —ç—Ç–∞–ø–∞ –∏—Ç–µ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞
"""

import asyncio
import json
from app.services.ai_service import ai_service
from app.prompts.ultra_personalization_prompt import create_storytelling_analysis_prompt
from app.utils.helpers import extract_json_from_text, safe_json_loads

async def debug_first_stage():
    """–û—Ç–ª–∞–¥–∫–∞ –ø–µ—Ä–≤–æ–≥–æ —ç—Ç–∞–ø–∞ - –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    
    try:
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_answers = [
            {"question": "–ö–∞–∫ –ø–∞—Ä—Ç–Ω–µ—Ä —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –≤–∞—à–∏ —É—Å–ø–µ—Ö–∏?", "answer": "–ú–∏—Ö–∞–∏–ª –≤—Å–µ–≥–¥–∞ –Ω–∞—Ö–æ–¥–∏—Ç —Å–ø–æ—Å–æ–± –ø—Ä–∏–Ω–∏–∑–∏—Ç—å –º–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è. –ö–æ–≥–¥–∞ —è –ø–æ–ª—É—á–∏–ª–∞ –ø–æ–≤—ã—à–µ–Ω–∏–µ, –æ–Ω —Å–∫–∞–∑–∞–ª: '–ù—É –∫–æ–Ω–µ—á–Ω–æ, —Ç–µ–±–µ –ø—Ä–æ—Å—Ç–æ –ø–æ–≤–µ–∑–ª–æ'. –ê –∫–æ–≥–¥–∞ —è –≤—ã–∏–≥—Ä–∞–ª–∞ –∫–æ–Ω–∫—É—Ä—Å, –æ–Ω –æ—Ç–æ–∑–≤–∞–ª—Å—è: '–ù–∞–≤–µ—Ä–Ω–æ–µ, –∂—é—Ä–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–∂–∞–ª–µ–ª–æ —Ç–µ–±—è'."},
            {"question": "–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–∏ –æ–Ω –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω?", "answer": "–î–∞, –ø–æ—Å—Ç–æ—è–Ω–Ω–æ. –û–Ω –≥–æ–≤–æ—Ä–∏—Ç, —á—Ç–æ —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –ø–∞—Ä, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–≤–µ—Ä—è—é—Ç –¥—Ä—É–≥ –¥—Ä—É–≥—É. –ù–æ –µ—Å–ª–∏ —è –æ—Ç–∫–∞–∑—ã–≤–∞—é—Å—å –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω, –æ–Ω –Ω–∞—á–∏–Ω–∞–µ—Ç –∫—Ä–∏—á–∞—Ç—å –∏ –æ–±–≤–∏–Ω—è—Ç—å –º–µ–Ω—è –≤ –∏–∑–º–µ–Ω–µ."},
            {"question": "–ö–∞–∫ –æ–Ω –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç —Ñ–∏–Ω–∞–Ω—Å—ã?", "answer": "–û–Ω –∑–∞–±—Ä–∞–ª –º–æ—é –∫–∞—Ä—Ç—É –∏ –≥–æ–≤–æ—Ä–∏—Ç, —á—Ç–æ –±—É–¥–µ—Ç —Å–∞–º —Ä–∞—Å–ø–æ—Ä—è–∂–∞—Ç—å—Å—è –¥–µ–Ω—å–≥–∞–º–∏. –ù–∞ –∫–∞–∂–¥—É—é –ø–æ–∫—É–ø–∫—É –Ω—É–∂–Ω–æ –µ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ. –î–∞–∂–µ –∑–∞ –ø—Ä–æ–¥—É–∫—Ç—ã –Ω–µ –º–æ–≥—É –ø–æ–π—Ç–∏ –æ–¥–Ω–∞ - –æ–Ω –¥–∞–µ—Ç —Ç–æ—á–Ω—É—é —Å—É–º–º—É –∏ —Ç—Ä–µ–±—É–µ—Ç —á–µ–∫."},
            {"question": "–ò–∑–æ–ª–∏—Ä—É–µ—Ç –ª–∏ –æ–Ω –≤–∞—Å –æ—Ç –¥—Ä—É–∑–µ–π?", "answer": "–ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —è –ø–µ—Ä–µ—Å—Ç–∞–ª–∞ –≤–∏–¥–µ—Ç—å—Å—è —Å –¥—Ä—É–∑—å—è–º–∏. –ú–∏—Ö–∞–∏–ª –≤—Å–µ–≥–¥–∞ –Ω–∞—Ö–æ–¥–∏–ª –ø–æ–≤–æ–¥ –Ω–µ –æ—Ç–ø—É—Å–∫–∞—Ç—å: —Ç–æ —É –Ω–µ–≥–æ –±—ã–ª–∏ –ø–ª–∞–Ω—ã, —Ç–æ –º–æ–∏ –ø–æ–¥—Ä—É–≥–∏ '–ø–ª–æ—Ö–æ –Ω–∞ –º–µ–Ω—è –≤–ª–∏—è—é—Ç'. –¢–µ–ø–µ—Ä—å —è –ø–æ—á—Ç–∏ –Ω–∏–∫–æ–≥–æ –Ω–µ –≤–∏–∂—É."},
            {"question": "–ö–∞–∫ –æ–Ω —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –∫—Ä–∏—Ç–∏–∫—É?", "answer": "–û—á–µ–Ω—å –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ. –ï—Å–ª–∏ —è –ø—ã—Ç–∞—é—Å—å –≤—ã—Å–∫–∞–∑–∞—Ç—å –Ω–µ–¥–æ–≤–æ–ª—å—Å—Ç–≤–æ, –æ–Ω –∫—Ä–∏—á–∏—Ç, —á—Ç–æ —è –Ω–µ–±–ª–∞–≥–æ–¥–∞—Ä–Ω–∞—è, —á—Ç–æ –≤—Å–µ –∂–µ–Ω—â–∏–Ω—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ. –ú–æ–∂–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –Ω–µ —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞—Ç—å –∏–ª–∏ —É–π—Ç–∏ –∏–∑ –¥–æ–º–∞."}
        ]
        
        print("üîç –û–¢–õ–ê–î–ö–ê –ü–ï–†–í–û–ì–û –≠–¢–ê–ü–ê –ò–¢–ï–†–ê–¢–ò–í–ù–û–ì–û –ü–û–î–•–û–î–ê")
        print("=" * 60)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç—ã –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
        answers_text = "\n".join([f"Q: {q['question']}\nA: {q['answer']}" for q in test_answers])
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —ç—Ç–∞–ø–∞
        prompt = create_storytelling_analysis_prompt(
            answers_text=answers_text,
            partner_name="–ú–∏—Ö–∞–∏–ª",
            partner_description="–ü–∞—Ä—Ç–Ω–µ—Ä –∏–∑ –∞–Ω–∫–µ—Ç—ã"
        )
        
        print("üìù –ü–†–û–ú–ü–¢ –ü–ï–†–í–û–ì–û –≠–¢–ê–ü–ê:")
        print("-" * 30)
        print(prompt[:1000] + "..." if len(prompt) > 1000 else prompt)
        print("-" * 30)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI
        print("\nüì° –ó–∞–ø—Ä–æ—Å –∫ AI...")
        response = await ai_service._get_ai_response(
            system_prompt="–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø—Å–∏—Ö–æ–ª–æ–≥. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞.",
            user_prompt=prompt,
            response_format="json",
            max_tokens=4000,
            technique="storytelling"
        )
        
        print("‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω!")
        print(f"üìä –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: {len(response)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ü–∞—Ä—Å–∏–º JSON
        try:
            structured_data = extract_json_from_text(response)
            if not structured_data:
                structured_data = safe_json_loads(response, {})
            
            print("\nüèóÔ∏è –°–¢–†–£–ö–¢–£–†–ò–†–û–í–ê–ù–ù–´–ï –î–ê–ù–ù–´–ï:")
            print("-" * 40)
            print(json.dumps(structured_data, indent=2, ensure_ascii=False))
            print("-" * 40)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            print("\nüìä –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–ò–†–û–í–ê–ù–ù–´–• –î–ê–ù–ù–´–•:")
            print(f"   –¢–∏–ø –ª–∏—á–Ω–æ—Å—Ç–∏: {structured_data.get('personality_type', 'N/A')[:100]}...")
            print(f"   Red flags: {len(structured_data.get('red_flags', []))}")
            print(f"   –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã: {len(structured_data.get('personalized_insights', []))}")
            print(f"   –ü–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞: {len(structured_data.get('behavioral_evidence', []))}")
            print(f"   –†–∏—Å–∫ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–π: {structured_data.get('manipulation_risk', 'N/A')}")
            print(f"   –£—Ä–æ–≤–µ–Ω—å —Å—Ä–æ—á–Ω–æ—Å—Ç–∏: {structured_data.get('urgency_level', 'N/A')}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è
            if structured_data.get('red_flags'):
                print("\nüö® RED FLAGS:")
                for i, flag in enumerate(structured_data['red_flags'], 1):
                    print(f"   {i}. {flag}")
            
            if structured_data.get('personalized_insights'):
                print("\nüí° –ü–ï–†–°–û–ù–ê–õ–¨–ù–´–ï –ò–ù–°–ê–ô–¢–´:")
                for i, insight in enumerate(structured_data['personalized_insights'], 1):
                    print(f"   {i}. {insight}")
            
            return structured_data
            
        except Exception as e:
            print(f"‚ùå –û–®–ò–ë–ö–ê –ü–ê–†–°–ò–ù–ì–ê JSON: {e}")
            print("üîç –°–´–†–û–ô –û–¢–í–ï–¢:")
            print(response)
            return None
            
    except Exception as e:
        print(f"‚ùå –û–ë–©–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
        return None

if __name__ == "__main__":
    asyncio.run(debug_first_stage()) 
#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ—Ñ–∞–π–ª–µ—Ä–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç: –∞–Ω–∫–µ—Ç—É, AI –∞–Ω–∞–ª–∏–∑, fallback —Ä–µ–∂–∏–º—ã, —Å–∏—Å—Ç–µ–º—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, UI
"""

import asyncio
import json
import sys
import os
from typing import Dict, Any

# Add project root to path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from app.prompts.profiler_full_questions import (
    get_all_questions, calculate_weighted_scores, get_safety_alerts,
    validate_full_answers, get_question_progress, get_next_question_state,
    QUESTION_ORDER
)
from app.prompts.profiler_full_prompts import (
    get_profiler_full_analysis_prompt, get_safety_assessment_prompt
)
from app.services.ai_service import ai_service


class ProfilerSystemTester:
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç–µ—Ä —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ—Ñ–∞–π–ª–µ—Ä–∞"""
    
    def __init__(self):
        self.test_results = {
            "questions_system": False,
            "scoring_system": False,
            "safety_system": False,
            "ai_analysis": False,
            "fallback_system": False,
            "validation_system": False,
            "ui_components": False
        }
        self.errors = []
        
    def log(self, message: str, level: str = "INFO"):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ü–≤–µ—Ç–∞–º–∏"""
        colors = {
            "INFO": "\033[94m",  # Blue
            "SUCCESS": "\033[92m",  # Green  
            "ERROR": "\033[91m",  # Red
            "WARNING": "\033[93m",  # Yellow
            "RESET": "\033[0m"
        }
        
        print(f"{colors.get(level, '')}{level}: {message}{colors['RESET']}")
        
        if level == "ERROR":
            self.errors.append(message)

    def test_questions_system(self) -> bool:
        """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –≤–æ–ø—Ä–æ—Å–æ–≤"""
        self.log("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –≤–æ–ø—Ä–æ—Å–æ–≤...")
        
        try:
            # Test 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
            all_questions = get_all_questions()
            
            if len(all_questions) != 28:
                self.log(f"–û–®–ò–ë–ö–ê: –û–∂–∏–¥–∞–ª–æ—Å—å 28 –≤–æ–ø—Ä–æ—Å–æ–≤, –ø–æ–ª—É—á–µ–Ω–æ {len(all_questions)}", "ERROR")
                return False
            
            self.log(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(all_questions)} –≤–æ–ø—Ä–æ—Å–æ–≤", "SUCCESS")
            
            # Test 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤
            required_fields = ['id', 'block', 'text', 'options', 'weight', 'context']
            
            for q_id, question in all_questions.items():
                for field in required_fields:
                    if field not in question:
                        self.log(f"–û–®–ò–ë–ö–ê: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ '{field}' –≤ –≤–æ–ø—Ä–æ—Å–µ {q_id}", "ERROR")
                        return False
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–ø—Ü–∏–π
                if len(question['options']) != 5:
                    self.log(f"–û–®–ò–ë–ö–ê: –û–∂–∏–¥–∞–ª–æ—Å—å 5 –æ–ø—Ü–∏–π –≤ –≤–æ–ø—Ä–æ—Å–µ {q_id}, –ø–æ–ª—É—á–µ–Ω–æ {len(question['options'])}", "ERROR")
                    return False
            
            self.log("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤—Å–µ—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞", "SUCCESS")
            
            # Test 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—è–¥–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
            if len(QUESTION_ORDER) != 28:
                self.log(f"–û–®–ò–ë–ö–ê: –ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤, –æ–∂–∏–¥–∞–ª–æ—Å—å 28, –ø–æ–ª—É—á–µ–Ω–æ {len(QUESTION_ORDER)}", "ERROR")
                return False
            
            # Test 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            for i, current_state in enumerate(QUESTION_ORDER):
                current_num, total = get_question_progress(current_state)
                
                if current_num != i + 1:
                    self.log(f"–û–®–ò–ë–ö–ê: –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è {current_state}: {current_num} != {i + 1}", "ERROR")
                    return False
                
                if total != 28:
                    self.log(f"–û–®–ò–ë–ö–ê: –ù–µ–≤–µ—Ä–Ω–æ–µ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {total} != 28", "ERROR")
                    return False
            
            self.log("‚úÖ –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ", "SUCCESS")
            return True
            
        except Exception as e:
            self.log(f"–û–®–ò–ë–ö–ê –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤: {e}", "ERROR")
            return False

    def generate_test_answers(self, risk_level: str = "medium") -> Dict[str, int]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π —Ä–∏—Å–∫–∞"""
        all_questions = get_all_questions()
        answers = {}
        
        # –†–∞–∑–ª–∏—á–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏ –æ—Ç–≤–µ—Ç–æ–≤
        risk_profiles = {
            "low": {
                "narcissism": 0,  # –ù–∏–∑–∫–∏–µ –±–∞–ª–ª—ã –Ω–∞—Ä—Ü–∏—Å—Å–∏–∑–º–∞
                "control": 1,     # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å
                "gaslighting": 0, # –ë–µ–∑ –≥–∞–∑–ª–∞–π—Ç–∏–Ω–≥–∞
                "emotion": 1,     # –•–æ—Ä–æ—à–∞—è —Ä–µ–≥—É–ª—è—Ü–∏—è —ç–º–æ—Ü–∏–π
                "intimacy": 0,    # –£–≤–∞–∂–µ–Ω–∏–µ –∫ –≥—Ä–∞–Ω–∏—Ü–∞–º
                "social": 1       # –ó–¥–æ—Ä–æ–≤–æ–µ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
            },
            "medium": {
                "narcissism": 2,  
                "control": 2,     
                "gaslighting": 2, 
                "emotion": 2,     
                "intimacy": 2,    
                "social": 2       
            },
            "high": {
                "narcissism": 3,  
                "control": 3,     
                "gaslighting": 3, 
                "emotion": 3,     
                "intimacy": 3,    
                "social": 3       
            },
            "critical": {
                "narcissism": 4,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –±–∞–ª–ª—ã —Ä–∏—Å–∫–∞
                "control": 4,     
                "gaslighting": 4, 
                "emotion": 4,     
                "intimacy": 4,    
                "social": 4       
            }
        }
        
        profile = risk_profiles.get(risk_level, risk_profiles["medium"])
        
        for q_id, question in all_questions.items():
            block = question['block']
            base_answer = profile.get(block, 2)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å
            import random
            random_offset = random.randint(-1, 1) if base_answer > 0 and base_answer < 4 else 0
            final_answer = max(0, min(4, base_answer + random_offset))
            
            answers[q_id] = final_answer
        
        return answers

    def test_scoring_system(self) -> bool:
        """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥—Å—á–µ—Ç–∞ –±–∞–ª–ª–æ–≤"""
        self.log("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Å–∫–æ—Ä–∏–Ω–≥–∞...")
        
        try:
            # –¢–µ—Å—Ç –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω—è—Ö —Ä–∏—Å–∫–∞
            risk_levels = ["low", "medium", "high", "critical"]
            
            for risk_level in risk_levels:
                answers = self.generate_test_answers(risk_level)
                scores = calculate_weighted_scores(answers)
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                required_keys = ["block_scores", "overall_risk_score", "urgency_level"]
                for key in required_keys:
                    if key not in scores:
                        self.log(f"–û–®–ò–ë–ö–ê: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á '{key}' –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö —Å–∫–æ—Ä–∏–Ω–≥–∞", "ERROR")
                        return False
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
                overall_risk = scores["overall_risk_score"]
                if not (0 <= overall_risk <= 100):
                    self.log(f"–û–®–ò–ë–ö–ê: –û–±—â–∏–π —Ä–∏—Å–∫ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ 0-100: {overall_risk}", "ERROR")
                    return False
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ—á–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫
                block_scores = scores["block_scores"]
                expected_blocks = ["narcissism", "control", "gaslighting", "emotion", "intimacy", "social"]
                
                for block in expected_blocks:
                    if block not in block_scores:
                        self.log(f"–û–®–ò–ë–ö–ê: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –±–ª–æ–∫ '{block}' –≤ –æ—Ü–µ–Ω–∫–∞—Ö", "ERROR")
                        return False
                    
                    score = block_scores[block]
                    if not (0 <= score <= 10):
                        self.log(f"–û–®–ò–ë–ö–ê: –û—Ü–µ–Ω–∫–∞ –±–ª–æ–∫–∞ {block} –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ 0-10: {score}", "ERROR")
                        return False
                
                self.log(f"‚úÖ –°–∫–æ—Ä–∏–Ω–≥ –¥–ª—è —É—Ä–æ–≤–Ω—è '{risk_level}': {overall_risk:.1f}% —Ä–∏—Å–∫–∞", "SUCCESS")
            
            return True
            
        except Exception as e:
            self.log(f"–û–®–ò–ë–ö–ê –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–∫–æ—Ä–∏–Ω–≥–∞: {e}", "ERROR")
            return False

    def test_safety_system(self) -> bool:
        """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        self.log("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...")
        
        try:
            # –¢–µ—Å—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
            critical_answers = self.generate_test_answers("critical")
            safety_alerts = get_safety_alerts(critical_answers)
            
            if not safety_alerts:
                self.log("–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –≤—ã–∑–≤–∞–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", "WARNING")
            else:
                self.log(f"‚úÖ –°–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –æ–±–Ω–∞—Ä—É–∂–∏–ª–∞ {len(safety_alerts)} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π", "SUCCESS")
                for alert in safety_alerts[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                    self.log(f"   ‚Ä¢ {alert[:100]}...", "INFO")
            
            # –¢–µ—Å—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
            safe_answers = self.generate_test_answers("low")
            safe_alerts = get_safety_alerts(safe_answers)
            
            if len(safe_alerts) > 2:  # –î–ª—è –Ω–∏–∑–∫–æ–≥–æ —Ä–∏—Å–∫–∞ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–Ω–æ–≥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
                self.log(f"–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –≤—ã–∑–≤–∞–ª {len(safe_alerts)} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π", "WARNING")
            else:
                self.log("‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ü–µ–Ω–µ–Ω", "SUCCESS")
            
            return True
            
        except Exception as e:
            self.log(f"–û–®–ò–ë–ö–ê –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {e}", "ERROR")
            return False

    def test_validation_system(self) -> bool:
        """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        self.log("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏...")
        
        try:
            # –¢–µ—Å—Ç 1: –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–æ–≤
            complete_answers = self.generate_test_answers("medium")
            is_valid, error_msg = validate_full_answers(complete_answers)
            
            if not is_valid:
                self.log(f"–û–®–ò–ë–ö–ê: –ü–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –æ—Ç–≤–µ—Ç–æ–≤ –Ω–µ –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é: {error_msg}", "ERROR")
                return False
            
            self.log("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–æ–≤ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ", "SUCCESS")
            
            # –¢–µ—Å—Ç 2: –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ–ø–æ–ª–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞
            incomplete_answers = dict(list(complete_answers.items())[:10])  # –¢–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10 –æ—Ç–≤–µ—Ç–æ–≤
            is_valid, error_msg = validate_full_answers(incomplete_answers)
            
            if is_valid:
                self.log("–û–®–ò–ë–ö–ê: –ù–µ–ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –æ—Ç–≤–µ—Ç–æ–≤ –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é", "ERROR")
                return False
            
            self.log("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–∏–ª–∞ –Ω–µ–ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –æ—Ç–≤–µ—Ç–æ–≤", "SUCCESS")
            
            # –¢–µ—Å—Ç 3: –í–∞–ª–∏–¥–∞—Ü–∏—è —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
            invalid_answers = complete_answers.copy()
            invalid_answers["narcissism_q1"] = 10  # –ó–Ω–∞—á–µ–Ω–∏–µ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ 0-4
            
            is_valid, error_msg = validate_full_answers(invalid_answers)
            
            if is_valid:
                self.log("–û–®–ò–ë–ö–ê: –ù–∞–±–æ—Ä —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é", "ERROR")
                return False
            
            self.log("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–∏–ª–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è", "SUCCESS")
            
            return True
            
        except Exception as e:
            self.log(f"–û–®–ò–ë–ö–ê –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}", "ERROR")
            return False

    async def test_ai_analysis(self) -> bool:
        """–¢–µ—Å—Ç AI –∞–Ω–∞–ª–∏–∑–∞"""
        self.log("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI –∞–Ω–∞–ª–∏–∑–∞...")
        
        try:
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            test_answers = self.generate_test_answers("high")
            scores = calculate_weighted_scores(test_answers)
            
            # –¢–µ—Å—Ç AI –∞–Ω–∞–ª–∏–∑–∞
            result = await ai_service.profile_partner(
                answers=test_answers,
                user_id=1,  # –¢–µ—Å—Ç–æ–≤—ã–π ID
                partner_name="–¢–µ—Å—Ç–æ–≤—ã–π –ø–∞—Ä—Ç–Ω–µ—Ä",
                partner_description="–¢–µ—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ AI –∞–Ω–∞–ª–∏–∑–∞"
            )
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            required_keys = [
                "overall_risk_score", "urgency_level", "block_scores",
                "analysis", "immediate_recommendations"
            ]
            
            for key in required_keys:
                if key not in result:
                    self.log(f"–û–®–ò–ë–ö–ê: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á '{key}' –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ AI –∞–Ω–∞–ª–∏–∑–∞", "ERROR")
                    return False
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∞–Ω–∞–ª–∏–∑–∞
            analysis_text = result.get("analysis", "")
            if len(analysis_text) < 100:
                self.log("–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: AI –∞–Ω–∞–ª–∏–∑ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π", "WARNING")
            
            recommendations = result.get("immediate_recommendations", [])
            if not recommendations:
                self.log("–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: AI –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", "WARNING")
            
            self.log("‚úÖ AI –∞–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ", "SUCCESS")
            self.log(f"   –û–±—â–∏–π —Ä–∏—Å–∫: {result['overall_risk_score']:.1f}%", "INFO")
            self.log(f"   –£—Ä–æ–≤–µ–Ω—å —Å—Ä–æ—á–Ω–æ—Å—Ç–∏: {result['urgency_level']}", "INFO")
            self.log(f"   –î–ª–∏–Ω–∞ –∞–Ω–∞–ª–∏–∑–∞: {len(analysis_text)} —Å–∏–º–≤–æ–ª–æ–≤", "INFO")
            
            return True
            
        except Exception as e:
            self.log(f"–û–®–ò–ë–ö–ê –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ AI –∞–Ω–∞–ª–∏–∑–∞: {e}", "ERROR")
            return False

    async def test_fallback_system(self) -> bool:
        """–¢–µ—Å—Ç fallback —Å–∏—Å—Ç–µ–º—ã"""
        self.log("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ fallback —Å–∏—Å—Ç–µ–º—ã...")
        
        try:
            # –°–æ–∑–¥–∞–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è fallback (–æ—Ç–∫–ª—é—á–∞–µ–º AI)
            original_claude_key = ai_service.claude_client
            ai_service.claude_client = None  # –ò–º–∏—Ç–∏—Ä—É–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ AI
            
            test_answers = self.generate_test_answers("medium")
            
            # –ü–æ–ø—ã—Ç–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –±–µ–∑ AI (–¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å fallback)
            result = await ai_service.profile_partner(
                answers=test_answers,
                user_id=1,
                partner_name="–¢–µ—Å—Ç–æ–≤—ã–π –ø–∞—Ä—Ç–Ω–µ—Ä (fallback)",
                partner_description=""
            )
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º AI –∫–ª–∏–µ–Ω—Ç
            ai_service.claude_client = original_claude_key
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ fallback —Å—Ä–∞–±–æ—Ç–∞–ª
            if "analysis" not in result:
                self.log("–û–®–ò–ë–ö–ê: Fallback —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª–∞ –∞–Ω–∞–ª–∏–∑", "ERROR")
                return False
            
            if result["overall_risk_score"] == 0:
                self.log("–û–®–ò–ë–ö–ê: Fallback —Å–∏—Å—Ç–µ–º–∞ –Ω–µ —Ä–∞—Å—Å—á–∏—Ç–∞–ª–∞ —Ä–∏—Å–∫", "ERROR")
                return False
            
            self.log("‚úÖ Fallback —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ", "SUCCESS")
            self.log(f"   Fallback —Ä–∏—Å–∫: {result['overall_risk_score']:.1f}%", "INFO")
            
            return True
            
        except Exception as e:
            self.log(f"–û–®–ò–ë–ö–ê –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ fallback —Å–∏—Å—Ç–µ–º—ã: {e}", "ERROR")
            return False

    def test_ui_components(self) -> bool:
        """–¢–µ—Å—Ç UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        self.log("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä
            from app.bot.keyboards.inline import (
                profiler_full_navigation_kb, profiler_results_navigation_kb,
                profiler_block_analysis_kb, profiler_safety_plan_kb,
                profiler_my_profiles_kb, profiler_confirmation_kb,
                profiler_progress_visual_kb
            )
            
            # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä
            test_keyboards = [
                ("Navigation keyboard", profiler_full_navigation_kb, 
                 ("test_state", 5, 28, "–¢–µ—Å—Ç–æ–≤—ã–π –±–ª–æ–∫", False)),
                ("Results keyboard", profiler_results_navigation_kb, 
                 ("MEDIUM", False, 45.0)),
                ("Block analysis keyboard", profiler_block_analysis_kb, 
                 ({"narcissism": 5.0, "control": 6.0}, "")),
                ("Safety plan keyboard", profiler_safety_plan_kb, 
                 ("HIGH",)),
                ("My profiles keyboard", profiler_my_profiles_kb, 
                 (0,)),
                ("Confirmation keyboard", profiler_confirmation_kb, 
                 ("exit", "")),
                ("Progress visual keyboard", profiler_progress_visual_kb, 
                 (15, 28, {"narcissism_completed": 5, "narcissism_total": 7}))
            ]
            
            for name, func, args in test_keyboards:
                try:
                    keyboard = func(*args)
                    if not keyboard.inline_keyboard:
                        self.log(f"–û–®–ò–ë–ö–ê: {name} –ø—É—Å—Ç–∞—è", "ERROR")
                        return False
                    self.log(f"‚úÖ {name} —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ", "SUCCESS")
                except Exception as e:
                    self.log(f"–û–®–ò–ë–ö–ê –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ {name}: {e}", "ERROR")
                    return False
            
            return True
            
        except Exception as e:
            self.log(f"–û–®–ò–ë–ö–ê –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ UI: {e}", "ERROR")
            return False

    async def run_all_tests(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        self.log("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ—Ñ–∞–π–ª–µ—Ä–∞", "INFO")
        self.log("=" * 60, "INFO")
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
        self.test_results["questions_system"] = self.test_questions_system()
        self.test_results["scoring_system"] = self.test_scoring_system()
        self.test_results["safety_system"] = self.test_safety_system()
        self.test_results["validation_system"] = self.test_validation_system()
        self.test_results["ui_components"] = self.test_ui_components()
        
        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
        self.test_results["ai_analysis"] = await self.test_ai_analysis()
        self.test_results["fallback_system"] = await self.test_fallback_system()
        
        # –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        self.log("=" * 60, "INFO")
        self.log("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:", "INFO")
        
        all_passed = True
        for test_name, passed in self.test_results.items():
            status = "‚úÖ –ü–†–û–ô–î–ï–ù" if passed else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
            color = "SUCCESS" if passed else "ERROR"
            self.log(f"{test_name.replace('_', ' ').title()}: {status}", color)
            
            if not passed:
                all_passed = False
        
        self.log("=" * 60, "INFO")
        
        if all_passed:
            self.log("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!", "SUCCESS")
        else:
            self.log(f"‚ö†Ô∏è  {len(self.errors)} –û–®–ò–ë–û–ö –û–ë–ù–ê–†–£–ñ–ï–ù–û:", "ERROR")
            for error in self.errors:
                self.log(f"   ‚Ä¢ {error}", "ERROR")
        
        return {
            "all_passed": all_passed,
            "test_results": self.test_results,
            "errors": self.errors,
            "total_tests": len(self.test_results),
            "passed_tests": sum(self.test_results.values())
        }


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    tester = ProfilerSystemTester()
    results = await tester.run_all_tests()
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    with open("test_results.json", "w", encoding="utf-8") as f:
        json.dump(results, f, ensure_ascii=False, indent=2)
    
    print(f"\nüìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ test_results.json")
    
    # –í–æ–∑–≤—Ä–∞—Ç –∫–æ–¥–∞ –≤—ã—Ö–æ–¥–∞
    return 0 if results["all_passed"] else 1


if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code) 
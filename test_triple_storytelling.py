#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ç—Ä–µ—Ö—ç—Ç–∞–ø–Ω–æ–≥–æ storytelling –ø–æ–¥—Ö–æ–¥–∞
"""

import asyncio
from app.services.ai_service import ai_service

async def test_triple_storytelling():
    """–¢–µ—Å—Ç —Ç—Ä–µ—Ö—ç—Ç–∞–ø–Ω–æ–≥–æ storytelling –∞–Ω–∞–ª–∏–∑–∞"""
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_answers = [
        {"question": "–ö–∞–∫ –ø–∞—Ä—Ç–Ω–µ—Ä —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –≤–∞—à–∏ —É—Å–ø–µ—Ö–∏?", "answer": "–ú–∏—Ö–∞–∏–ª –≤—Å–µ–≥–¥–∞ –Ω–∞—Ö–æ–¥–∏—Ç —Å–ø–æ—Å–æ–± –ø—Ä–∏–Ω–∏–∑–∏—Ç—å –º–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è. –ö–æ–≥–¥–∞ —è –ø–æ–ª—É—á–∏–ª–∞ –ø–æ–≤—ã—à–µ–Ω–∏–µ, –æ–Ω —Å–∫–∞–∑–∞–ª: '–ù—É –∫–æ–Ω–µ—á–Ω–æ, —Ç–µ–±–µ –ø—Ä–æ—Å—Ç–æ –ø–æ–≤–µ–∑–ª–æ'. –ê –∫–æ–≥–¥–∞ —è –≤—ã–∏–≥—Ä–∞–ª–∞ –∫–æ–Ω–∫—É—Ä—Å, –æ–Ω –æ—Ç–æ–∑–≤–∞–ª—Å—è: '–ù–∞–≤–µ—Ä–Ω–æ–µ, –∂—é—Ä–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–∂–∞–ª–µ–ª–æ —Ç–µ–±—è'."},
        {"question": "–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–∏ –æ–Ω –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω?", "answer": "–î–∞, –ø–æ—Å—Ç–æ—è–Ω–Ω–æ. –û–Ω –≥–æ–≤–æ—Ä–∏—Ç, —á—Ç–æ —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –ø–∞—Ä, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–≤–µ—Ä—è—é—Ç –¥—Ä—É–≥ –¥—Ä—É–≥—É. –ù–æ –µ—Å–ª–∏ —è –æ—Ç–∫–∞–∑—ã–≤–∞—é—Å—å –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω, –æ–Ω –Ω–∞—á–∏–Ω–∞–µ—Ç –∫—Ä–∏—á–∞—Ç—å –∏ –æ–±–≤–∏–Ω—è—Ç—å –º–µ–Ω—è –≤ –∏–∑–º–µ–Ω–µ."},
        {"question": "–ö–∞–∫ –æ–Ω –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç —Ñ–∏–Ω–∞–Ω—Å—ã?", "answer": "–û–Ω –∑–∞–±—Ä–∞–ª –º–æ—é –∫–∞—Ä—Ç—É –∏ –≥–æ–≤–æ—Ä–∏—Ç, —á—Ç–æ –±—É–¥–µ—Ç —Å–∞–º —Ä–∞—Å–ø–æ—Ä—è–∂–∞—Ç—å—Å—è –¥–µ–Ω—å–≥–∞–º–∏. –ù–∞ –∫–∞–∂–¥—É—é –ø–æ–∫—É–ø–∫—É –Ω—É–∂–Ω–æ –µ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ. –î–∞–∂–µ –∑–∞ –ø—Ä–æ–¥—É–∫—Ç—ã –Ω–µ –º–æ–≥—É –ø–æ–π—Ç–∏ –æ–¥–Ω–∞ - –æ–Ω –¥–∞–µ—Ç —Ç–æ—á–Ω—É—é —Å—É–º–º—É –∏ —Ç—Ä–µ–±—É–µ—Ç —á–µ–∫."},
        {"question": "–ò–∑–æ–ª–∏—Ä—É–µ—Ç –ª–∏ –æ–Ω –≤–∞—Å –æ—Ç –¥—Ä—É–∑–µ–π?", "answer": "–ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —è –ø–µ—Ä–µ—Å—Ç–∞–ª–∞ –≤–∏–¥–µ—Ç—å—Å—è —Å –¥—Ä—É–∑—å—è–º–∏. –ú–∏—Ö–∞–∏–ª –≤—Å–µ–≥–¥–∞ –Ω–∞—Ö–æ–¥–∏–ª –ø–æ–≤–æ–¥ –Ω–µ –æ—Ç–ø—É—Å–∫–∞—Ç—å: —Ç–æ —É –Ω–µ–≥–æ –±—ã–ª–∏ –ø–ª–∞–Ω—ã, —Ç–æ –º–æ–∏ –ø–æ–¥—Ä—É–≥–∏ '–ø–ª–æ—Ö–æ –Ω–∞ –º–µ–Ω—è –≤–ª–∏—è—é—Ç'. –¢–µ–ø–µ—Ä—å —è –ø–æ—á—Ç–∏ –Ω–∏–∫–æ–≥–æ –Ω–µ –≤–∏–∂—É."},
        {"question": "–ö–∞–∫ –æ–Ω —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –∫—Ä–∏—Ç–∏–∫—É?", "answer": "–û—á–µ–Ω—å –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ. –ï—Å–ª–∏ —è –ø—ã—Ç–∞—é—Å—å –≤—ã—Å–∫–∞–∑–∞—Ç—å –Ω–µ–¥–æ–≤–æ–ª—å—Å—Ç–≤–æ, –æ–Ω –∫—Ä–∏—á–∏—Ç, —á—Ç–æ —è –Ω–µ–±–ª–∞–≥–æ–¥–∞—Ä–Ω–∞—è, —á—Ç–æ –≤—Å–µ –∂–µ–Ω—â–∏–Ω—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ. –ú–æ–∂–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –Ω–µ —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞—Ç—å –∏–ª–∏ —É–π—Ç–∏ –∏–∑ –¥–æ–º–∞."}
    ]
    
    print("üöÄ –¢–ï–°–¢ –¢–†–ï–•–≠–¢–ê–ü–ù–û–ì–û STORYTELLING –ü–û–î–•–û–î–ê")
    print("=" * 60)
    print("üîÑ –ó–∞–ø—É—Å–∫–∞—é —Ç—Ä–µ—Ö—ç—Ç–∞–ø–Ω—ã–π storytelling...")
    print("   –≠—Ç–∞–ø 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    print("   –≠—Ç–∞–ø 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä–≤–æ–π –ø–æ–ª–æ–≤–∏–Ω—ã narrative")
    print("   –≠—Ç–∞–ø 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Ç–æ—Ä–æ–π –ø–æ–ª–æ–≤–∏–Ω—ã narrative")
    print()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
    result = await ai_service.profile_partner_advanced(
        answers=test_answers,
        user_id=999,
        partner_name="–ú–∏—Ö–∞–∏–ª",
        technique="storytelling"
    )
    
    print("‚úÖ –¢–†–ï–•–≠–¢–ê–ü–ù–´–ô –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù!")
    print("=" * 60)
    
    # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    generation_method = result.get("generation_method", "unknown")
    narrative_words = result.get("narrative_words", 0)
    first_half_words = result.get("first_half_words", 0)
    second_half_words = result.get("second_half_words", 0)
    red_flags = result.get("red_flags", [])
    insights = result.get("personalized_insights", [])
    
    print(f"üìä –ú–ï–¢–ê–î–ê–ù–ù–´–ï:")
    print(f"   –ú–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {generation_method}")
    print(f"   –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤: {narrative_words}")
    print(f"   –ü–µ—Ä–≤–∞—è –ø–æ–ª–æ–≤–∏–Ω–∞: {first_half_words} —Å–ª–æ–≤")
    print(f"   –í—Ç–æ—Ä–∞—è –ø–æ–ª–æ–≤–∏–Ω–∞: {second_half_words} —Å–ª–æ–≤")
    print(f"   Red flags: {len(red_flags)}")
    print(f"   –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã: {len(insights)}")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    personality_type = result.get("personality_type", "N/A")
    manipulation_risk = result.get("manipulation_risk", "N/A")
    urgency_level = result.get("urgency_level", "N/A")
    
    print(f"\nüèóÔ∏è –°–¢–†–£–ö–¢–£–†–ò–†–û–í–ê–ù–ù–´–ï –î–ê–ù–ù–´–ï:")
    print(f"   –¢–∏–ø –ª–∏—á–Ω–æ—Å—Ç–∏: {personality_type}")
    print(f"   –†–∏—Å–∫ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–π: {manipulation_risk}")
    print(f"   –£—Ä–æ–≤–µ–Ω—å —Å—Ä–æ—á–Ω–æ—Å—Ç–∏: {urgency_level}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º storytelling
    storytelling_text = result.get("psychological_profile", "")
    words_count = len(storytelling_text.split())
    chars_count = len(storytelling_text)
    
    print(f"\nüìñ STORYTELLING –ê–ù–ê–õ–ò–ó:")
    print(f"   –°–∏–º–≤–æ–ª–æ–≤: {chars_count}")
    print(f"   –°–ª–æ–≤: {words_count}")
    print(f"   –¶–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: 1500+ —Å–ª–æ–≤")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –ø–æ –æ–±—ä–µ–º—É
    if words_count >= 1500:
        quality = "‚úÖ –û–¢–õ–ò–ß–ù–û"
    elif words_count >= 1000:
        quality = "üü° –•–û–†–û–®–û"
    elif words_count >= 500:
        quality = "üü† –£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û"
    else:
        quality = "‚ùå –ü–õ–û–•–û"
    
    print(f"   –ö–∞—á–µ—Å—Ç–≤–æ: {quality}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∫–∞—á–µ—Å—Ç–≤–∞
    has_name = "–ú–∏—Ö–∞–∏–ª" in storytelling_text
    has_dialogues = "‚Äì" in storytelling_text or ":" in storytelling_text
    has_scenarios = any(word in storytelling_text.lower() for word in ["—É—Ç—Ä–æ–º", "–≤–µ—á–µ—Ä–æ–º", "–∫–æ–≥–¥–∞", "—Å–∏—Ç—É–∞—Ü–∏—è", "—Å—Ü–µ–Ω–∞"])
    has_emotions = any(word in storytelling_text.lower() for word in ["—á—É–≤—Å—Ç–≤—É–µ—Ç", "–ø–µ—Ä–µ–∂–∏–≤–∞–µ—Ç", "–±–æ–∏—Ç—Å—è", "–≤–æ–ª–Ω—É–µ—Ç", "—ç–º–æ—Ü–∏"])
    has_details = len(storytelling_text) > 3000
    
    print(f"\nüé≠ –ö–ê–ß–ï–°–¢–í–û STORYTELLING:")
    print(f"   üë§ –ò–º—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞ (–ú–∏—Ö–∞–∏–ª): {'‚úÖ' if has_name else '‚ùå'}")
    print(f"   üí¨ –î–∏–∞–ª–æ–≥–∏ –∏ —Ü–∏—Ç–∞—Ç—ã: {'‚úÖ' if has_dialogues else '‚ùå'}")
    print(f"   üé¨ –°—Ü–µ–Ω–∞—Ä–∏–∏ –∏ –∏—Å—Ç–æ—Ä–∏–∏: {'‚úÖ' if has_scenarios else '‚ùå'}")
    print(f"   üòä –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è: {'‚úÖ' if has_emotions else '‚ùå'}")
    print(f"   üîç –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è: {'‚úÖ' if has_details else '‚ùå'}")
    
    # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
    quality_score = sum([has_name, has_dialogues, has_scenarios, has_emotions, has_details])
    print(f"\nüéØ –û–ë–©–ê–Ø –û–¶–ï–ù–ö–ê: {quality_score}/5")
    
    if quality_score >= 4:
        print("‚úÖ –û–¢–õ–ò–ß–ù–û! –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ storytelling")
    elif quality_score >= 3:
        print("üü° –•–û–†–û–®–û! –ï—Å—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è")
    else:
        print("‚ùå –ü–õ–û–•–û! –ù—É–∂–Ω—ã –¥–æ—Ä–∞–±–æ—Ç–∫–∏")
    
    # –ü—Ä–µ–≤—å—é storytelling
    preview = storytelling_text[:1000] + "..." if len(storytelling_text) > 1000 else storytelling_text
    print(f"\nüìñ –ü–†–ï–í–¨–Æ STORYTELLING –¢–ï–ö–°–¢–ê:")
    print("-" * 60)
    print(preview)
    print("-" * 60)
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏
    print(f"\nüìä –°–†–ê–í–ù–ï–ù–ò–ï –° –¢–†–ï–ë–û–í–ê–ù–ò–Ø–ú–ò:")
    print(f"   –¢—Ä–µ–±—É–µ—Ç—Å—è: 1500+ —Å–ª–æ–≤")
    print(f"   –ü–æ–ª—É—á–µ–Ω–æ: {words_count} —Å–ª–æ–≤")
    print(f"   –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {words_count / 1500 * 100:.1f}%")
    
    if words_count >= 1500:
        print("‚úÖ –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!")
    else:
        print("‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –æ–±—ä–µ–º–∞")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º red flags
    if red_flags:
        print(f"\nüö® RED FLAGS ({len(red_flags)}):")
        for i, flag in enumerate(red_flags, 1):
            print(f"   {i}. {flag}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Å–∞–π—Ç—ã
    if insights:
        print(f"\nüí° –ü–ï–†–°–û–ù–ê–õ–¨–ù–´–ï –ò–ù–°–ê–ô–¢–´ ({len(insights)}):")
        for i, insight in enumerate(insights, 1):
            print(f"   {i}. {insight}")
    
    return result

if __name__ == "__main__":
    asyncio.run(test_triple_storytelling()) 
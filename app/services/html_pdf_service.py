"""HTML to PDF conversion service using CloudLayer.io API"""

import asyncio
import logging
from typing import Dict, Any, Optional, List
from datetime import datetime
import aiohttp
import base64
import json

from app.core.config import settings
from app.utils.exceptions import ServiceError

logger = logging.getLogger(__name__)


class HTMLPDFService:
    """Service for generating PDF reports from HTML using CloudLayer.io API"""
    
    def __init__(self):
        logger.info("üé® Initializing HTMLPDFService")
        self._cloudlayer_available = None
        self.template = None
        self.api_key = settings.CLOUDLAYER_API_KEY
        self.api_url = "https://api.cloudlayer.io"
        if not self.api_key:
            logger.warning("‚ö†Ô∏è CloudLayer.io API key not configured! Set CLOUDLAYER_API_KEY environment variable.")
    
    def reset_cloudlayer_check(self):
        """Reset CloudLayer availability check (for testing)"""
        pass
    
    def _decline_name(self, name: str, case: str = "nominative") -> str:
        """
        –°–∫–ª–æ–Ω—è–µ—Ç –∏–º—è –ø–æ –ø–∞–¥–µ–∂–∞–º
        
        Args:
            name: –∏–º—è –¥–ª—è —Å–∫–ª–æ–Ω–µ–Ω–∏—è
            case: –ø–∞–¥–µ–∂ (nominative, genitive, dative, accusative, instrumental, prepositional)
        
        Returns:
            —Å–∫–ª–æ–Ω–µ–Ω–Ω–æ–µ –∏–º—è
        """
        if not name or not isinstance(name, str):
            return name or "–ø–∞—Ä—Ç–Ω–µ—Ä"
        
        name = name.strip()
        if not name:
            return "–ø–∞—Ä—Ç–Ω–µ—Ä"
        
        # –°–ª–æ–≤–∞—Ä—å –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∂–µ–Ω—Å–∫–∏—Ö –∏–º–µ–Ω
        female_names = {
            "–∞–Ω–Ω–∞": {
                "nominative": "–ê–Ω–Ω–∞", "genitive": "–ê–Ω–Ω—ã", "dative": "–ê–Ω–Ω–µ",
                "accusative": "–ê–Ω–Ω—É", "instrumental": "–ê–Ω–Ω–æ–π", "prepositional": "–ê–Ω–Ω–µ"
            },
            "–º–∞—Ä–∏—è": {
                "nominative": "–ú–∞—Ä–∏—è", "genitive": "–ú–∞—Ä–∏–∏", "dative": "–ú–∞—Ä–∏–∏", 
                "accusative": "–ú–∞—Ä–∏—é", "instrumental": "–ú–∞—Ä–∏–µ–π", "prepositional": "–ú–∞—Ä–∏–∏"
            },
            "–µ–ª–µ–Ω–∞": {
                "nominative": "–ï–ª–µ–Ω–∞", "genitive": "–ï–ª–µ–Ω—ã", "dative": "–ï–ª–µ–Ω–µ",
                "accusative": "–ï–ª–µ–Ω—É", "instrumental": "–ï–ª–µ–Ω–æ–π", "prepositional": "–ï–ª–µ–Ω–µ"
            },
            "—Ç–∞—Ç—å—è–Ω–∞": {
                "nominative": "–¢–∞—Ç—å—è–Ω–∞", "genitive": "–¢–∞—Ç—å—è–Ω—ã", "dative": "–¢–∞—Ç—å—è–Ω–µ",
                "accusative": "–¢–∞—Ç—å—è–Ω—É", "instrumental": "–¢–∞—Ç—å—è–Ω–æ–π", "prepositional": "–¢–∞—Ç—å—è–Ω–µ"
            },
            "–æ–ª—å–≥–∞": {
                "nominative": "–û–ª—å–≥–∞", "genitive": "–û–ª—å–≥–∏", "dative": "–û–ª—å–≥–µ",
                "accusative": "–û–ª—å–≥—É", "instrumental": "–û–ª—å–≥–æ–π", "prepositional": "–û–ª—å–≥–µ"
            },
            "–Ω–∞—Ç–∞–ª—å—è": {
                "nominative": "–ù–∞—Ç–∞–ª—å—è", "genitive": "–ù–∞—Ç–∞–ª—å–∏", "dative": "–ù–∞—Ç–∞–ª—å–µ",
                "accusative": "–ù–∞—Ç–∞–ª—å—é", "instrumental": "–ù–∞—Ç–∞–ª—å–µ–π", "prepositional": "–ù–∞—Ç–∞–ª—å–µ"
            },
            "–∏—Ä–∏–Ω–∞": {
                "nominative": "–ò—Ä–∏–Ω–∞", "genitive": "–ò—Ä–∏–Ω—ã", "dative": "–ò—Ä–∏–Ω–µ",
                "accusative": "–ò—Ä–∏–Ω—É", "instrumental": "–ò—Ä–∏–Ω–æ–π", "prepositional": "–ò—Ä–∏–Ω–µ"
            },
            "—Å–≤–µ—Ç–ª–∞–Ω–∞": {
                "nominative": "–°–≤–µ—Ç–ª–∞–Ω–∞", "genitive": "–°–≤–µ—Ç–ª–∞–Ω—ã", "dative": "–°–≤–µ—Ç–ª–∞–Ω–µ",
                "accusative": "–°–≤–µ—Ç–ª–∞–Ω—É", "instrumental": "–°–≤–µ—Ç–ª–∞–Ω–æ–π", "prepositional": "–°–≤–µ—Ç–ª–∞–Ω–µ"
            },
            "—é–ª–∏—è": {
                "nominative": "–Æ–ª–∏—è", "genitive": "–Æ–ª–∏–∏", "dative": "–Æ–ª–∏–∏",
                "accusative": "–Æ–ª–∏—é", "instrumental": "–Æ–ª–∏–µ–π", "prepositional": "–Æ–ª–∏–∏"
            },
            "–µ–∫–∞—Ç–µ—Ä–∏–Ω–∞": {
                "nominative": "–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞", "genitive": "–ï–∫–∞—Ç–µ—Ä–∏–Ω—ã", "dative": "–ï–∫–∞—Ç–µ—Ä–∏–Ω–µ",
                "accusative": "–ï–∫–∞—Ç–µ—Ä–∏–Ω—É", "instrumental": "–ï–∫–∞—Ç–µ—Ä–∏–Ω–æ–π", "prepositional": "–ï–∫–∞—Ç–µ—Ä–∏–Ω–µ"
            }
        }
        
        # –°–ª–æ–≤–∞—Ä—å –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –º—É–∂—Å–∫–∏—Ö –∏–º–µ–Ω
        male_names = {
            "–∞–ª–µ–∫—Å–∞–Ω–¥—Ä": {
                "nominative": "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä", "genitive": "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞", "dative": "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä—É",
                "accusative": "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞", "instrumental": "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–º", "prepositional": "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–µ"
            },
            "–∞–ª–µ–∫—Å–µ–π": {
                "nominative": "–ê–ª–µ–∫—Å–µ–π", "genitive": "–ê–ª–µ–∫—Å–µ—è", "dative": "–ê–ª–µ–∫—Å–µ—é",
                "accusative": "–ê–ª–µ–∫—Å–µ—è", "instrumental": "–ê–ª–µ–∫—Å–µ–µ–º", "prepositional": "–ê–ª–µ–∫—Å–µ–µ"
            },
            "–∞–Ω–¥—Ä–µ–π": {
                "nominative": "–ê–Ω–¥—Ä–µ–π", "genitive": "–ê–Ω–¥—Ä–µ—è", "dative": "–ê–Ω–¥—Ä–µ—é",
                "accusative": "–ê–Ω–¥—Ä–µ—è", "instrumental": "–ê–Ω–¥—Ä–µ–µ–º", "prepositional": "–ê–Ω–¥—Ä–µ–µ"
            },
            "–¥–º–∏—Ç—Ä–∏–π": {
                "nominative": "–î–º–∏—Ç—Ä–∏–π", "genitive": "–î–º–∏—Ç—Ä–∏—è", "dative": "–î–º–∏—Ç—Ä–∏—é",
                "accusative": "–î–º–∏—Ç—Ä–∏—è", "instrumental": "–î–º–∏—Ç—Ä–∏–µ–º", "prepositional": "–î–º–∏—Ç—Ä–∏–∏"
            },
            "—Å–µ—Ä–≥–µ–π": {
                "nominative": "–°–µ—Ä–≥–µ–π", "genitive": "–°–µ—Ä–≥–µ—è", "dative": "–°–µ—Ä–≥–µ—é",
                "accusative": "–°–µ—Ä–≥–µ—è", "instrumental": "–°–µ—Ä–≥–µ–µ–º", "prepositional": "–°–µ—Ä–≥–µ–µ"
            },
            "–≤–ª–∞–¥–∏–º–∏—Ä": {
                "nominative": "–í–ª–∞–¥–∏–º–∏—Ä", "genitive": "–í–ª–∞–¥–∏–º–∏—Ä–∞", "dative": "–í–ª–∞–¥–∏–º–∏—Ä—É",
                "accusative": "–í–ª–∞–¥–∏–º–∏—Ä–∞", "instrumental": "–í–ª–∞–¥–∏–º–∏—Ä–æ–º", "prepositional": "–í–ª–∞–¥–∏–º–∏—Ä–µ"
            },
            "–º–∏—Ö–∞–∏–ª": {
                "nominative": "–ú–∏—Ö–∞–∏–ª", "genitive": "–ú–∏—Ö–∞–∏–ª–∞", "dative": "–ú–∏—Ö–∞–∏–ª—É",
                "accusative": "–ú–∏—Ö–∞–∏–ª–∞", "instrumental": "–ú–∏—Ö–∞–∏–ª–æ–º", "prepositional": "–ú–∏—Ö–∞–∏–ª–µ"
            },
            "–Ω–∏–∫–æ–ª–∞–π": {
                "nominative": "–ù–∏–∫–æ–ª–∞–π", "genitive": "–ù–∏–∫–æ–ª–∞—è", "dative": "–ù–∏–∫–æ–ª–∞—é",
                "accusative": "–ù–∏–∫–æ–ª–∞—è", "instrumental": "–ù–∏–∫–æ–ª–∞–µ–º", "prepositional": "–ù–∏–∫–æ–ª–∞–µ"
            },
            "–∏–≥–æ—Ä—å": {
                "nominative": "–ò–≥–æ—Ä—å", "genitive": "–ò–≥–æ—Ä—è", "dative": "–ò–≥–æ—Ä—é",
                "accusative": "–ò–≥–æ—Ä—è", "instrumental": "–ò–≥–æ—Ä–µ–º", "prepositional": "–ò–≥–æ—Ä–µ"
            },
            "–µ–≤–≥–µ–Ω–∏–π": {
                "nominative": "–ï–≤–≥–µ–Ω–∏–π", "genitive": "–ï–≤–≥–µ–Ω–∏—è", "dative": "–ï–≤–≥–µ–Ω–∏—é",
                "accusative": "–ï–≤–≥–µ–Ω–∏—è", "instrumental": "–ï–≤–≥–µ–Ω–∏–µ–º", "prepositional": "–ï–≤–≥–µ–Ω–∏–∏"
            }
        }
        
        name_lower = name.lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏
        if name_lower in female_names:
            return female_names[name_lower].get(case, name)
        elif name_lower in male_names:
            return male_names[name_lower].get(case, name)
        
        # –≠–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∏–º–µ–Ω
        return self._decline_name_heuristic(name, case)
    
    def _decline_name_heuristic(self, name: str, case: str) -> str:
        """–°–∫–ª–æ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω –ø–æ —ç–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–º –ø—Ä–∞–≤–∏–ª–∞–º"""
        if case == "nominative":
            return name
        
        name_lower = name.lower()
        
        # –ñ–µ–Ω—Å–∫–∏–µ –∏–º–µ–Ω–∞ –Ω–∞ -–∞/-—è
        if name_lower.endswith(('–∞', '—è')):
            if case == "genitive":
                if name_lower.endswith('—è'):
                    return name[:-1] + '–∏'
                else:
                    return name[:-1] + '—ã'
            elif case == "dative":
                return name[:-1] + '–µ'
            elif case == "accusative":
                if name_lower.endswith('—è'):
                    return name[:-1] + '—é'
                else:
                    return name[:-1] + '—É'
            elif case == "instrumental":
                if name_lower.endswith('—è'):
                    return name[:-1] + '–µ–π'
                else:
                    return name[:-1] + '–æ–π'
            elif case == "prepositional":
                return name[:-1] + '–µ'
        
        # –ú—É–∂—Å–∫–∏–µ –∏–º–µ–Ω–∞ –Ω–∞ —Å–æ–≥–ª–∞—Å–Ω—É—é
        elif not name_lower.endswith(('–∞', '—è', '—å')):
            if case in ["genitive", "accusative"]:
                return name + '–∞'
            elif case == "dative":
                return name + '—É'
            elif case == "instrumental":
                return name + '–æ–º'
            elif case == "prepositional":
                return name + '–µ'
        
        # –ò–º–µ–Ω–∞ –Ω–∞ -—å (–º–æ–≥—É—Ç –±—ã—Ç—å –º—É–∂—Å–∫–∏–º–∏ –∏–ª–∏ –∂–µ–Ω—Å–∫–∏–º–∏)
        elif name_lower.endswith('—å'):
            if case == "genitive":
                return name[:-1] + '—è'
            elif case == "dative":
                return name[:-1] + '—é'
            elif case == "accusative":
                return name[:-1] + '—è'
            elif case == "instrumental":
                return name[:-1] + '–µ–º'
            elif case == "prepositional":
                return name[:-1] + '–µ'
        
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –∏–º—è
        return name
    
    async def _ensure_cloudlayer_available(self) -> bool:
        """Ensure CloudLayer.io API is available"""
        if not self.api_key:
            logger.error("‚ùå CloudLayer.io API key not configured!")
            return False
        
        try:
            logger.info("üîç Checking CloudLayer.io API availability...")
            
            async with aiohttp.ClientSession() as session:
                headers = {
                    'x-api-key': self.api_key,
                    'Content-Type': 'application/json'
                }
                
                # Test with minimal HTML (base64 encoded)
                test_html = '<html><body><h1>Test</h1></body></html>'
                test_html_b64 = base64.b64encode(test_html.encode('utf-8')).decode('utf-8')
                
                test_data = {
                    'html': test_html_b64
                }
                
                async with session.post(
                    f'{self.api_url}/v2/html/pdf',
                    headers=headers,
                    json=test_data,
                    timeout=aiohttp.ClientTimeout(total=30)
                ) as response:
                    if response.status in [200, 202]:  # 202 = async processing
                        logger.info("‚úÖ CloudLayer.io API is available and working")
                        return True
                    else:
                        error_text = await response.text()
                        logger.error(f"‚ùå CloudLayer.io API test failed with status {response.status}: {error_text}")
                        return False
                        
        except Exception as e:
            logger.error(f"üí• CloudLayer.io API availability check failed: {e}")
            return False

    async def _wait_for_job_completion(self, session: aiohttp.ClientSession, job_id: str) -> str:
        """Wait for CloudLayer.io job completion and return download URL"""
        max_attempts = 30  # Max 30 attempts (30 seconds with 1 second delay)
        attempt = 0
        
        while attempt < max_attempts:
            try:
                headers = {'x-api-key': self.api_key}
                
                async with session.get(
                    f'{self.api_url}/v2/jobs/{job_id}',
                    headers=headers,
                    timeout=aiohttp.ClientTimeout(total=10)
                ) as response:
                    
                    if response.status == 200:
                        job_data = await response.json()
                        status = job_data.get('status')
                        
                        if status in ['completed', 'success']:
                            # Log full response to understand structure
                            logger.debug(f"üìã CloudLayer.io job response: {job_data}")
                            
                            # First check for assetUrl specifically
                            download_url = job_data.get('assetUrl')
                            logger.debug(f"üîç Checking assetUrl: {download_url}")
                            
                            # If not found, try other fields
                            if not download_url:
                                download_url = job_data.get('url')
                                logger.debug(f"üîç Checking url: {download_url}")
                            
                            if not download_url:
                                download_url = job_data.get('download_url')
                                logger.debug(f"üîç Checking download_url: {download_url}")
                            
                            if not download_url:
                                download_url = job_data.get('file_url')
                                logger.debug(f"üîç Checking file_url: {download_url}")
                            
                            if download_url:
                                logger.info(f"‚úÖ CloudLayer.io job {job_id} completed successfully! URL: {download_url}")
                                return download_url
                            else:
                                logger.error(f"Job completed but no download URL found in response: {job_data}")
                                raise ServiceError(f"Job completed but no download URL provided")
                        
                        elif status == 'failed':
                            error_message = job_data.get('error', 'Unknown error')
                            raise ServiceError(f"CloudLayer.io job failed: {error_message}")
                        
                        elif status in ['processing', 'pending']:
                            logger.debug(f"üîÑ CloudLayer.io job {job_id} is {status}, waiting...")
                            await asyncio.sleep(1)
                            attempt += 1
                            continue
                        
                        else:
                            raise ServiceError(f"Unknown job status: {status}")
                    
                    else:
                        error_text = await response.text()
                        raise ServiceError(f"Failed to check job status: {response.status} - {error_text}")
                        
            except asyncio.TimeoutError:
                logger.warning(f"‚è∞ Timeout checking job {job_id} status, retrying...")
                await asyncio.sleep(1)
                attempt += 1
                continue
        
        raise ServiceError(f"Job {job_id} did not complete within {max_attempts} seconds")

    async def generate_partner_report_html(
        self,
        analysis_data: Dict[str, Any],
        user_id: int,
        partner_name: str
    ) -> bytes:
        """
        Generate professional partner analysis PDF report using CloudLayer.io API
        
        Args:
            analysis_data: Analysis results from psychological assessment
            user_id: User ID
            partner_name: Partner name
            
        Returns:
            PDF bytes
        """
        try:
            logger.info(f"Starting PROFESSIONAL PDF generation for user {user_id}, partner: {partner_name}")
            logger.debug(f"Analysis data keys: {list(analysis_data.keys())}")
            
            # Check CloudLayer.io availability
            logger.info("üîÑ Checking CloudLayer.io API availability...")
            cloudlayer_available = await self._ensure_cloudlayer_available()
            
            if not cloudlayer_available:
                logger.error("‚ùå CloudLayer.io API is required for professional PDF generation!")
                raise ServiceError("CloudLayer.io API is not available. Please check your API key and internet connection.")
            
            logger.info("‚úÖ Using CloudLayer.io for professional PDF generation")
            
            # Generate complete HTML report
            html_content = self._generate_beautiful_html_report(analysis_data, partner_name, user_id)
            
            # Convert HTML to PDF using CloudLayer.io
            pdf_bytes = await self._convert_html_to_pdf_cloudlayer(html_content)
            
            logger.info(f"‚úÖ Professional PDF generated successfully! Size: {len(pdf_bytes)} bytes")
            return pdf_bytes
            
        except Exception as e:
            logger.error(f"üí• Professional PDF generation failed: {e}")
            raise ServiceError(f"Failed to generate professional PDF: {str(e)}")

    async def _convert_html_to_pdf_cloudlayer(self, html_content: str) -> bytes:
        """Convert HTML to PDF using CloudLayer.io API"""
        try:
            logger.info("üîÑ Converting HTML to PDF using CloudLayer.io...")
            
            async with aiohttp.ClientSession() as session:
                headers = {
                    'x-api-key': self.api_key,
                    'Content-Type': 'application/json'
                }
                
                # Encode HTML to base64 as required by CloudLayer.io
                html_b64 = base64.b64encode(html_content.encode('utf-8')).decode('utf-8')
                
                # CloudLayer.io API v2 payload
                payload = {
                    'html': html_b64,
                    'viewPort': {
                        'width': 1200,
                        'height': 800
                    },
                    'format': 'A4',
                    'landscape': False,
                    'printBackground': True,
                    'margin': {
                        'top': '0.5in',
                        'right': '0.5in',
                        'bottom': '0.5in',
                        'left': '0.5in'
                    },
                    'preferCSSPageSize': True
                }
                
                logger.debug(f"üì§ Sending request to CloudLayer.io API v2...")
                
                async with session.post(
                    f'{self.api_url}/v2/html/pdf',
                    headers=headers,
                    json=payload,
                    timeout=aiohttp.ClientTimeout(total=60)
                ) as response:
                    
                    if response.status == 200:
                        # Synchronous response - PDF ready immediately
                        response_data = await response.json()
                        file_url = response_data.get('url')
                        
                        if file_url:
                            # Download PDF file
                            async with session.get(file_url) as file_response:
                                if file_response.status == 200:
                                    pdf_bytes = await file_response.read()
                                    logger.info(f"‚úÖ PDF generated successfully via CloudLayer.io! Size: {len(pdf_bytes)} bytes")
                                    return pdf_bytes
                                else:
                                    raise ServiceError(f"Failed to download PDF from CloudLayer.io CDN: {file_response.status}")
                        else:
                            raise ServiceError("CloudLayer.io response missing file URL")
                    
                    elif response.status == 202:
                        # Asynchronous response - need to wait for job completion
                        job_data = await response.json()
                        job_id = job_data.get('id')
                        
                        if not job_id:
                            raise ServiceError("CloudLayer.io did not return job ID")
                        
                        logger.info(f"üîÑ CloudLayer.io job {job_id} started, waiting for completion...")
                        
                        # Wait for job completion
                        download_url = await self._wait_for_job_completion(session, job_id)
                        
                        # Download the completed PDF
                        async with session.get(download_url) as file_response:
                            if file_response.status == 200:
                                pdf_bytes = await file_response.read()
                                logger.info(f"‚úÖ PDF generated successfully via CloudLayer.io! Size: {len(pdf_bytes)} bytes")
                                return pdf_bytes
                            else:
                                raise ServiceError(f"Failed to download PDF from CloudLayer.io CDN: {file_response.status}")
                    
                    else:
                        error_text = await response.text()
                        logger.error(f"‚ùå CloudLayer.io API error {response.status}: {error_text}")
                        raise ServiceError(f"CloudLayer.io API error {response.status}: {error_text}")
                        
        except aiohttp.ClientError as e:
            logger.error(f"‚ùå CloudLayer.io API request failed: {e}")
            raise ServiceError(f"CloudLayer.io API request failed: {str(e)}")
        except Exception as e:
            logger.error(f"üí• CloudLayer.io PDF conversion failed: {e}")
            raise ServiceError(f"Failed to convert HTML to PDF: {str(e)}")

    def _generate_beautiful_html_report(
        self,
        analysis_data: Dict[str, Any],
        partner_name: str,
        user_id: int = 123
    ) -> str:
        """Generate beautiful HTML report using Jinja2 template"""
        
        # Extract data safely
        overall_risk = self._extract_risk_score(analysis_data)
        red_flags = analysis_data.get('red_flags', [])
        recommendations = analysis_data.get('survival_guide', analysis_data.get('recommendations', []))
        psychological_profile = analysis_data.get('psychological_profile', '–ê–Ω–∞–ª–∏–∑ –ª–∏—á–Ω–æ—Å—Ç–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª–æ–∂–Ω—ã–µ –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã')
        
        # EXPAND psychological profile for detailed analysis
        expanded_profile = self._expand_psychological_profile(
            psychological_profile, 
            partner_name, 
            overall_risk, 
            analysis_data
        )
        
        # Generate assessment details
        risk_level, risk_color, risk_badge_color = self._determine_risk_level(overall_risk)
        
        # Current date
        current_date = datetime.now().strftime("%d.%m.%Y")
        report_id = f"RPT-{datetime.now().strftime('%d%m%Y')}-{user_id:03d}"
        
        # Generate personality type based on risk
        personality_type = self._determine_personality_type(overall_risk)
        
        # Extract Dark Triad scores from analysis data
        dark_triad_scores = self._extract_dark_triad_scores(analysis_data, overall_risk)
        
        # Generate personalized insights based on analysis
        personalized_insights = self._generate_personalized_insights(analysis_data, partner_name, overall_risk)
        
        # Prepare template data
        # Generate enhanced data for blocks
        personality_traits = self._get_personality_traits(personality_type, overall_risk)
        personality_description = self._get_personality_description(personality_type, overall_risk)
        risk_detailed_description = self._get_risk_detailed_description(overall_risk)
        risk_recommendations = self._get_risk_recommendations(overall_risk)
        
        template_data = {
            'partner_name': partner_name,
            'partner_name_genitive': self._decline_name(partner_name, "genitive"),      # –∫–æ–≥–æ? —á–µ–≥–æ? - –∞–Ω–∞–ª–∏–∑ –ê–Ω–Ω—ã
            'partner_name_dative': self._decline_name(partner_name, "dative"),          # –∫–æ–º—É? —á–µ–º—É? - —Å–æ–≤–µ—Ç—ã –ê–Ω–Ω–µ
            'partner_name_accusative': self._decline_name(partner_name, "accusative"),  # –∫–æ–≥–æ? —á—Ç–æ? - –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –ê–Ω–Ω—É
            'partner_name_instrumental': self._decline_name(partner_name, "instrumental"), # –∫–µ–º? —á–µ–º? - —Ä–∞–±–æ—Ç–∞ —Å –ê–Ω–Ω–æ–π
            'partner_name_prepositional': self._decline_name(partner_name, "prepositional"), # –æ –∫–æ–º? –æ —á–µ–º? - –æ –ê–Ω–Ω–µ
            'date': current_date,
            'report_id': report_id,
            'risk_score': int(overall_risk),
            'risk_level': self._get_risk_level(overall_risk),
            'urgency': 'CRITICAL' if overall_risk > 70 else 'HIGH' if overall_risk > 40 else 'MEDIUM' if overall_risk > 20 else 'LOW',
            'personality_type': personality_type,
            'personality_description': personality_description,
            'personality_traits': personality_traits,
            'risk_detailed_description': risk_detailed_description,
            'risk_recommendations': risk_recommendations,
            'psychological_profile': expanded_profile,  # Using expanded version
            'red_flags': red_flags[:6] if len(red_flags) > 6 else red_flags,  # Limit to 6 for display
            'recommendations': '\n'.join(recommendations) if isinstance(recommendations, list) else str(recommendations),
            'population_percentile': min(95, int(overall_risk * 1.2)),  # Conservative estimate
            'total_questions': 28,
            'blocks': self._generate_blocks_data(analysis_data, overall_risk),
            
            # Dynamic Dark Triad scores
            'narcissism_score': dark_triad_scores['narcissism'],
            'machiavellianism_score': dark_triad_scores['machiavellianism'], 
            'psychopathy_score': dark_triad_scores['psychopathy'],
            
            # Personalized insights instead of static content
            'warning_signs': personalized_insights['warning_signs'],
            'behavioral_patterns': personalized_insights['behavioral_patterns'],
            'development_prognosis': personalized_insights['development_prognosis'],
            'protective_mechanisms': personalized_insights['protective_mechanisms'],
            'help_resources': personalized_insights['help_resources'],
            
            # AI analysis
            'ai_analysis': analysis_data.get('psychological_profile', ''),
            
            # Additional data for new sections
            'manipulation_tactics': analysis_data.get('manipulation_tactics', []),
            'escalation_triggers': analysis_data.get('escalation_triggers', []),
            'emotional_patterns': analysis_data.get('emotional_patterns', []),
            'violence_indicators': analysis_data.get('violence_indicators', []),
            'control_mechanisms': analysis_data.get('control_mechanisms', []),
            'behavioral_evidence': analysis_data.get('behavioral_evidence', []),
            'personalized_insights': analysis_data.get('personalized_insights', [])
        }
        
        # Load and render template
        try:
            from jinja2 import Environment, FileSystemLoader
            import os
            
            # Get template directory
            template_dir = os.path.join(os.path.dirname(os.path.dirname(__file__)), 'templates', 'pdf')
            env = Environment(loader=FileSystemLoader(template_dir))
            template = env.get_template('partner_report.html')
            
            # Render template with data
            html_content = template.render(**template_data)
            logger.info("‚úÖ HTML template rendered successfully")
            return html_content
            
        except Exception as e:
            logger.error(f"Failed to render template: {e}")
            raise Exception(f"HTML –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å: {str(e)}")

    def _extract_dark_triad_scores(self, analysis_data: Dict[str, Any], overall_risk: float) -> Dict[str, int]:
        """Extract Dark Triad scores from analysis data or calculate based on risk and block scores"""
        
        # Try to get from block_scores if available
        block_scores = analysis_data.get('block_scores', {})
        
        # Calculate Dark Triad based on psychological research and user responses
        narcissism_base = block_scores.get('narcissism', overall_risk / 10)
        control_score = block_scores.get('control', overall_risk / 10)
        emotion_score = block_scores.get('emotion', overall_risk / 10)
        social_score = block_scores.get('social', overall_risk / 10)
        
        # Narcissism: Based on grandiosity, need for admiration, lack of empathy
        narcissism = min(10, max(1, int(narcissism_base + (control_score * 0.3) + (social_score * 0.2))))
        
        # Machiavellianism: Based on manipulation, cunning, strategic thinking
        gaslighting_score = block_scores.get('gaslighting', overall_risk / 10)
        machiavellianism = min(10, max(1, int(control_score + (gaslighting_score * 0.4) + (social_score * 0.3))))
        
        # Psychopathy: Based on callousness, impulsivity, antisocial behavior
        intimacy_score = block_scores.get('intimacy', overall_risk / 10)
        psychopathy = min(10, max(1, int(emotion_score + (intimacy_score * 0.4) + (gaslighting_score * 0.3))))
        
        return {
            'narcissism': narcissism,
            'machiavellianism': machiavellianism,
            'psychopathy': psychopathy
        }

    def _generate_personalized_insights(self, analysis_data: Dict[str, Any], partner_name: str, overall_risk: float) -> Dict[str, List[str]]:
        """Generate personalized insights based on analysis data instead of static content"""
        
        block_scores = analysis_data.get('block_scores', {})
        red_flags = analysis_data.get('red_flags', [])
        key_concerns = analysis_data.get('key_concerns', [])
        
        # Generate personalized warning signs based on highest scoring blocks
        warning_signs = []
        if block_scores.get('control', 0) > 6:
            warning_signs.extend([
                "–ö–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏ –∏ –≤—Ä–µ–º–µ–Ω–µ–º –ø–∞—Ä—Ç–Ω–µ—Ä–∞",
                "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏ –∏–∑–æ–ª—è—Ü–∏—è",
                "–ü—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏–π –±–µ–∑ —É—á–µ—Ç–∞ –º–Ω–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞"
            ])
        
        if block_scores.get('emotion', 0) > 6:
            warning_signs.extend([
                "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–∞—á–µ–ª–∏ –∏ –Ω–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ—Å—Ç—å",
                "–ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ –∫—Ä–∏—Ç–∏–∫—É –∏–ª–∏ –Ω–µ—Å–æ–≥–ª–∞—Å–∏–µ",
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç–º–æ—Ü–∏–π –¥–ª—è –º–∞–Ω–∏–ø—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è"
            ])
            
        if block_scores.get('gaslighting', 0) > 6:
            warning_signs.extend([
                "–ì–∞–∑–ª–∞–π—Ç–∏–Ω–≥ –∏ –∏—Å–∫–∞–∂–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏",
                "–û—Ç—Ä–∏—Ü–∞–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ –∏ –¥–µ–π—Å—Ç–≤–∏–π",
                "–ü–µ—Ä–µ–∫–ª–∞–¥—ã–≤–∞–Ω–∏–µ –≤–∏–Ω—ã –Ω–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞"
            ])
            
        if block_scores.get('narcissism', 0) > 6:
            warning_signs.extend([
                "–ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤ –≤–æ—Å—Ö–∏—â–µ–Ω–∏–∏",
                "–û–±–µ—Å—Ü–µ–Ω–∏–≤–∞–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–∞—Ä—Ç–Ω–µ—Ä–∞",
                "–ù–µ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∫ —ç–º–ø–∞—Ç–∏–∏ –∏ —Å–æ—á—É–≤—Å—Ç–≤–∏—é"
            ])
            
        # If no specific patterns, use general warning signs
        if not warning_signs:
            warning_signs = [
                "–ù–∞—Ä—É—à–µ–Ω–∏–µ –ª–∏—á–Ω—ã—Ö –≥—Ä–∞–Ω–∏—Ü",
                "–î–≤–æ–π–Ω—ã–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –≤ –ø–æ–≤–µ–¥–µ–Ω–∏–∏", 
                "–û—Ç–∫–∞–∑ –±—Ä–∞—Ç—å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ —Å–≤–æ–∏ –¥–µ–π—Å—Ç–≤–∏—è"
            ]
        
        # Generate behavioral patterns based on analysis
        behavioral_patterns = []
        if block_scores.get('social', 0) > 6:
            behavioral_patterns.append("–†–∞–∑–ª–∏—á–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –Ω–∞–µ–¥–∏–Ω–µ –∏ –≤ –æ–±—â–µ—Å—Ç–≤–µ")
        if block_scores.get('intimacy', 0) > 6:
            behavioral_patterns.append("–ù–∞—Ä—É—à–µ–Ω–∏–µ –∏–Ω—Ç–∏–º–Ω—ã—Ö –≥—Ä–∞–Ω–∏—Ü –∏ –ø—Ä–∏–Ω—É–∂–¥–µ–Ω–∏–µ")
        if overall_risk > 70:
            behavioral_patterns.append("–≠—Å–∫–∞–ª–∞—Ü–∏—è –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø—Ä–∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–∏")
        if block_scores.get('control', 0) > 7:
            behavioral_patterns.append("–°–∏—Å—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–¥—Ä—ã–≤–∞–Ω–∏–µ —Å–∞–º–æ–æ—Ü–µ–Ω–∫–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞")
            
        # Development prognosis based on risk level
        if overall_risk > 80:
            prognosis = "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑: –±–µ–∑ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –±—É–¥–µ—Ç —É—Å–∏–ª–∏–≤–∞—Ç—å—Å—è –∏ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ —Å–µ—Ä—å–µ–∑–Ω—ã–º –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è–º"
        elif overall_risk > 60:
            prognosis = "–ù–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑: –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ–≤–µ–¥–µ–Ω–∏—è –±—É–¥—É—Ç —É—Å–∏–ª–∏–≤–∞—Ç—å—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –¥–∏–Ω–∞–º–∏–∫–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–π"
        elif overall_risk > 40:
            prognosis = "–û—Å—Ç–æ—Ä–æ–∂–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑: –≤–æ–∑–º–æ–∂–Ω—ã —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º"
        else:
            prognosis = "–û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –ø—Ä–∏ —Å–æ–±–ª—é–¥–µ–Ω–∏–∏ –∑–¥–æ—Ä–æ–≤—ã—Ö –≥—Ä–∞–Ω–∏—Ü –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö"
            
        # Protective mechanisms based on specific risks
        protective_mechanisms = [
            "–î–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ –∏ –≤–µ–¥–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω–∏–∫–∞ —Å–æ–±—ã—Ç–∏–π",
            "–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–≤—è–∑–µ–π —Å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ–º"
        ]
        
        if block_scores.get('gaslighting', 0) > 6:
            protective_mechanisms.append("–†–∞–∑–≤–∏—Ç–∏–µ –Ω–∞–≤—ã–∫–æ–≤ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –≥–∞–∑–ª–∞–π—Ç–∏–Ω–≥–∞")
        if block_scores.get('control', 0) > 6:
            protective_mechanisms.append("–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ –∞–≤—Ç–æ–Ω–æ–º–∏–∏")
        if overall_risk > 70:
            protective_mechanisms.append("–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞–Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–∞ —Å–ª—É—á–∞–π —ç—Å–∫–∞–ª–∞—Ü–∏–∏")
            
        # Help resources based on risk level
        if overall_risk > 80:
            help_resources = [
                "–ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –∫—Ä–∏–∑–∏—Å–Ω—ã–µ —Ü–µ–Ω—Ç—Ä—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏",
                "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å –ø—Å–∏—Ö–æ–ª–æ–≥–æ–º, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–º—Å—è –Ω–∞ –∞–±—å—é–∑–∏–≤–Ω—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö",
                "–û–±—Ä–∞—â–µ–Ω–∏–µ –∫ —é—Ä–∏—Å—Ç—É –¥–ª—è –∑–∞—â–∏—Ç—ã –ø—Ä–∞–≤"
            ]
        elif overall_risk > 60:
            help_resources = [
                "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å–µ–º–µ–π–Ω–æ–≥–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∞",
                "–ì—Ä—É–ø–ø–æ–≤–∞—è —Ç–µ—Ä–∞–ø–∏—è –¥–ª—è –∂–µ—Ä—Ç–≤ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –Ω–∞—Å–∏–ª–∏—è",
                "–¢–µ–ª–µ—Ñ–æ–Ω—ã –¥–æ–≤–µ—Ä–∏—è –∏ –æ–Ω–ª–∞–π–Ω-–ø–æ–¥–¥–µ—Ä–∂–∫–∞"
            ]
        else:
            help_resources = [
                "–°–µ–º–µ–π–Ω–æ–µ –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–∞—Ä–æ–π",
                "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è —Ç–µ—Ä–∞–ø–∏—è –¥–ª—è —É–∫—Ä–µ–ø–ª–µ–Ω–∏—è –≥—Ä–∞–Ω–∏—Ü",
                "–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã –ø–æ –∑–¥–æ—Ä–æ–≤—ã–º –æ—Ç–Ω–æ—à–µ–Ω–∏—è–º"
            ]
        
        return {
            'warning_signs': warning_signs[:8],  # Limit to 8 items
            'behavioral_patterns': behavioral_patterns,
            'development_prognosis': prognosis,
            'protective_mechanisms': protective_mechanisms,
            'help_resources': help_resources
        }

    def _generate_blocks_data(self, analysis_data: Dict[str, Any], overall_risk: float) -> list:
        """Generate blocks data for template using real block_scores if available"""
        
        # Try to use real block_scores from analysis
        block_scores = analysis_data.get('block_scores', {})
        
        # If we have real block_scores, use them
        if block_scores:
            blocks = []
            
            # Map block names with emojis and calculate scores
            block_mapping = {
                'narcissism': {'name': '–ù–∞—Ä—Ü–∏—Å—Å–∏–∑–º', 'emoji': 'üëë'},
                'control': {'name': '–ö–æ–Ω—Ç—Ä–æ–ª—å', 'emoji': 'üéõÔ∏è'},
                'gaslighting': {'name': '–ì–∞–∑–ª–∞–π—Ç–∏–Ω–≥', 'emoji': 'üå™Ô∏è'},
                'emotion': {'name': '–≠–º–æ—Ü–∏–∏', 'emoji': 'üí•'},
                'intimacy': {'name': '–ò–Ω—Ç–∏–º–Ω–æ—Å—Ç—å', 'emoji': 'üíî'},
                'social': {'name': '–°–æ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å', 'emoji': 'üé≠'}
            }
            
            for block_key, block_info in block_mapping.items():
                score = int(block_scores.get(block_key, overall_risk / 10))
                blocks.append({
                    'name': block_info['name'],
                    'emoji': block_info['emoji'],
                    'score': min(10, max(0, score)),
                    'level': self._get_level_description(score)
                })
            
            return blocks
        else:
            # Fallback to calculated scores based on overall risk
            emotion_score = min(10, int(overall_risk / 10))
            manipulation_score = min(10, int((overall_risk + 10) / 12))
            empathy_score = max(1, 10 - int(overall_risk / 10))
            aggression_score = min(10, int(overall_risk / 8))
            control_score = min(10, int(overall_risk / 9))
            narcissism_score = min(10, int(overall_risk / 11))

            blocks = [
                {
                    'name': '–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å',
                    'emoji': 'üí•',
                    'score': emotion_score,
                    'level': self._get_level_description(emotion_score)
                },
                {
                    'name': '–ú–∞–Ω–∏–ø—É–ª—è—Ç–∏–≤–Ω–æ—Å—Ç—å', 
                    'emoji': 'üé≠',
                    'score': manipulation_score,
                    'level': self._get_level_description(manipulation_score)
                },
                {
                    'name': '–≠–º–ø–∞—Ç–∏—è',
                    'emoji': 'üíù',
                    'score': empathy_score,
                    'level': self._get_level_description(empathy_score)
                },
                {
                    'name': '–ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ—Å—Ç—å',
                    'emoji': '‚ö°',
                    'score': aggression_score,
                    'level': self._get_level_description(aggression_score)
                },
                {
                    'name': '–ö–æ–Ω—Ç—Ä–æ–ª—å',
                    'emoji': 'üéõÔ∏è',
                    'score': control_score,
                    'level': self._get_level_description(control_score)
                },
                {
                    'name': '–ù–∞—Ä—Ü–∏—Å—Å–∏–∑–º',
                    'emoji': 'üëë',
                    'score': narcissism_score,
                    'level': self._get_level_description(narcissism_score)
                }
            ]
            return blocks
    

    
    def _generate_red_flags_html(self, red_flags: list) -> str:
        """Generate HTML for red flags section"""
        if not red_flags:
            return '<div class="red-flag">–ö—Ä–∞—Å–Ω—ã–µ —Ñ–ª–∞–≥–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã</div>'
        
        html_parts = []
        for flag in red_flags:
            html_parts.append(f'<div class="red-flag">‚Ä¢ {flag}</div>')
        
        return '\\n'.join(html_parts)
    
    def _generate_recommendations_html(self, recommendations: list) -> str:
        """Generate HTML for recommendations section"""
        if not recommendations:
            return '<div class="recommendation">–°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è</div>'
        
        html_parts = []
        for rec in recommendations:
            html_parts.append(f'<div class="recommendation">‚Ä¢ {rec}</div>')
        
        return '\\n'.join(html_parts)
    
    def _extract_risk_score(self, analysis_data: Dict[str, Any]) -> float:
        """Extract risk score from analysis data"""
        # Try different field names
        for field in ['overall_risk_score', 'manipulation_risk', 'risk_score', 'toxicity_score']:
            if field in analysis_data:
                value = analysis_data[field]
                if isinstance(value, (int, float)):
                    # Convert to percentage if needed
                    if field == 'manipulation_risk' and value <= 10:
                        return value * 10  # Convert 0-10 scale to 0-100
                    return min(value, 100)
        
        # Default if no risk score found
        return 50.0
    
    def _determine_risk_level(self, risk_score: float) -> tuple:
        """Determine risk level text and colors"""
        if risk_score >= 80:
            return "–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –†–ò–°–ö", "#dc3545", "#dc3545"
        elif risk_score >= 60:
            return "–í–´–°–û–ö–ò–ô –†–ò–°–ö", "#fd7e14", "#fd7e14"
        elif risk_score >= 40:
            return "–°–†–ï–î–ù–ò–ô –†–ò–°–ö", "#ffc107", "#ffc107"
        else:
            return "–ù–ò–ó–ö–ò–ô –†–ò–°–ö", "#28a745", "#28a745"
    
    def _determine_personality_type(self, risk_score: float) -> str:
        """Determine personality type based on risk score"""
        if risk_score >= 80:
            return "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Ç–æ–∫—Å–∏—á–Ω—ã–π –Ω–∞—Ä—Ü–∏—Å—Å"
        elif risk_score >= 70:
            return "–ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—é—â–∏–π –Ω–∞—Ä—Ü–∏—Å—Å"
        elif risk_score >= 60:
            return "–ú–∞–Ω–∏–ø—É–ª—è—Ç–∏–≤–Ω–∞—è –ª–∏—á–Ω–æ—Å—Ç—å"
        elif risk_score >= 40:
            return "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω—ã–π"
        elif risk_score >= 25:
            return "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –∑—Ä–µ–ª–∞—è –ª–∏—á–Ω–æ—Å—Ç—å"
        elif risk_score >= 15:
            return "–ì–∞—Ä–º–æ–Ω–∏—á–Ω–∞—è –ª–∏—á–Ω–æ—Å—Ç—å —Å —Ä–∞–∑–≤–∏—Ç–æ–π —ç–º–ø–∞—Ç–∏–µ–π"
        else:
            return "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –∑–¥–æ—Ä–æ–≤–∞—è –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∞—è –ª–∏—á–Ω–æ—Å—Ç—å"
    
    def _get_personality_description(self, personality_type: str) -> str:
        """Get description for personality type"""
        descriptions = {
            "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Ç–æ–∫—Å–∏—á–Ω—ã–π –Ω–∞—Ä—Ü–∏—Å—Å": "–ö—Ä–∞–π–Ω–µ –æ–ø–∞—Å–Ω–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è –Ω–∞—Ä—Ü–∏—Å—Å–∏—á–µ—Å–∫–∏—Ö —á–µ—Ä—Ç —Å —Å–∞–¥–∏—Å—Ç—Å–∫–∏–º–∏ –Ω–∞–∫–ª–æ–Ω–Ω–æ—Å—Ç—è–º–∏ –∏ –ø–æ–ª–Ω—ã–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ–º —ç–º–ø–∞—Ç–∏–∏",
            "–ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—é—â–∏–π –Ω–∞—Ä—Ü–∏—Å—Å": "–í—ã—Ä–∞–∂–µ–Ω–Ω—ã–µ –Ω–∞—Ä—Ü–∏—Å—Å–∏—á–µ—Å–∫–∏–µ —á–µ—Ä—Ç—ã —Å –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å—é –≤ –¥–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏ –∫–æ–Ω—Ç—Ä–æ–ª–µ –Ω–∞–¥ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º",
            "–ú–∞–Ω–∏–ø—É–ª—è—Ç–∏–≤–Ω–∞—è –ª–∏—á–Ω–æ—Å—Ç—å": "–°–∫–ª–æ–Ω–Ω–æ—Å—Ç—å –∫ —Å–∏—Å—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –º–∞–Ω–∏–ø—É–ª—è—Ü–∏—è–º –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–º—É –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—é",
            "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω—ã–π": "–ù–µ–ø—Ä–µ–¥—Å–∫–∞–∑–∏–º—ã–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏ —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—é—â–µ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è",
            "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –∑—Ä–µ–ª–∞—è –ª–∏—á–Ω–æ—Å—Ç—å": "–†–∞–∑–≤–∏—Ç—ã–µ –Ω–∞–≤—ã–∫–∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π —Ä–µ–≥—É–ª—è—Ü–∏–∏ —Å –æ—Å–Ω–æ–≤–∞–º–∏ –∑–¥–æ—Ä–æ–≤–æ–≥–æ –æ–±—â–µ–Ω–∏—è",
            "–ì–∞—Ä–º–æ–Ω–∏—á–Ω–∞—è –ª–∏—á–Ω–æ—Å—Ç—å —Å —Ä–∞–∑–≤–∏—Ç–æ–π —ç–º–ø–∞—Ç–∏–µ–π": "–í—ã—Å–æ–∫–∏–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç, —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∫ —ç–º–ø–∞—Ç–∏–∏ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞",
            "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –∑–¥–æ—Ä–æ–≤–∞—è –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∞—è –ª–∏—á–Ω–æ—Å—Ç—å": "–í—ã–¥–∞—é—â–∏–µ—Å—è –∫–∞—á–µ—Å—Ç–≤–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞: —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∑—Ä–µ–ª–æ—Å—Ç—å, —É–≤–∞–∂–µ–Ω–∏–µ –∫ –≥—Ä–∞–Ω–∏—Ü–∞–º –∏ –±–µ–∑—É—Å–ª–æ–≤–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞"
        }
        return descriptions.get(personality_type, "–ê–Ω–∞–ª–∏–∑ –ª–∏—á–Ω–æ—Å—Ç–Ω—ã—Ö –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π")
    
    def _generate_key_traits(self, analysis_data: Dict[str, Any], risk_score: float) -> str:
        """Generate key traits HTML list"""
        if risk_score >= 70:
            traits = [
                "üî¥ –°–∏—Å—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å –ø–æ–≤–µ–¥–µ–Ω–∏—è",
                "üî¥ –ì–∞–∑–ª–∞–π—Ç–∏–Ω–≥ –∏ –∏—Å–∫–∞–∂–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏", 
                "üî¥ –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –Ω–∞—Å–∏–ª–∏–µ",
                "üî¥ –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —ç–º–ø–∞—Ç–∏–∏"
            ]
        elif risk_score >= 50:
            traits = [
                "üü° –≠–ª–µ–º–µ–Ω—Ç—ã –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—é—â–µ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è",
                "üü° –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å",
                "üü° –ü—Ä–æ–±–ª–µ–º—ã —Å –≥—Ä–∞–Ω–∏—Ü–∞–º–∏",
                "üü° –°–∫–ª–æ–Ω–Ω–æ—Å—Ç—å –∫ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏—è–º"
            ]
        elif risk_score >= 25:
            traits = [
                "üü° –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏",
                "üü¢ –í —Ü–µ–ª–æ–º –∑–¥–æ—Ä–æ–≤–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ",
                "üü¢ –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∫ —Å–∞–º–æ–∞–Ω–∞–ª–∏–∑—É",
                "üü¢ –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å"
            ]
        elif risk_score >= 15:
            traits = [
                "üü¢ –í—ã—Å–æ–∫–∞—è —ç–º–ø–∞—Ç–∏—è –∏ –ø–æ–Ω–∏–º–∞–Ω–∏–µ",
                "üü¢ –£–≤–∞–∂–µ–Ω–∏–µ –∫ –ª–∏—á–Ω—ã–º –≥—Ä–∞–Ω–∏—Ü–∞–º",
                "üü¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –∑–∞–±–æ—Ç–∞",
                "üü¢ –ó–¥–æ—Ä–æ–≤–∞—è –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è"
            ]
        else:
            traits = [
                "üü¢ –í—ã–¥–∞—é—â–∏–µ—Å—è –Ω–∞–≤—ã–∫–∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏",
                "üü¢ –ë–µ–∑—É—Å–ª–æ–≤–Ω–æ–µ —É–≤–∞–∂–µ–Ω–∏–µ –∫ –ø–∞—Ä—Ç–Ω–µ—Ä—É",
                "üü¢ –û—Ç–∫—Ä—ã—Ç–æ—Å—Ç—å –∏ —á–µ—Å—Ç–Ω–æ—Å—Ç—å",
                "üü¢ –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∫ –∑–¥–æ—Ä–æ–≤–æ–π –±–ª–∏–∑–æ—Å—Ç–∏"
            ]
        
        return '\n'.join([f'<li>{trait}</li>' for trait in traits])
    
    def _generate_detailed_red_flags(self, red_flags: list, risk_score: float) -> str:
        """Generate detailed red flags HTML"""
        if not red_flags or len(red_flags) == 0:
            # Generate default red flags based on risk score
            if risk_score >= 70:
                red_flags = [
                    ("–°–∏—Å—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å –ø–æ–≤–µ–¥–µ–Ω–∏—è", "–ü–∞—Ä—Ç–Ω–µ—Ä –ø—ã—Ç–∞–µ—Ç—Å—è –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –æ–±—â–µ–Ω–∏–µ —Å –¥—Ä—É–∑—å—è–º–∏ –∏ –ø—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏–π"),
                    ("–ì–∞–∑–ª–∞–π—Ç–∏–Ω–≥ –∏ –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏", "–û—Ç—Ä–∏—Ü–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–æ—à–µ–¥—à–∏—Ö —Å–æ–±—ã—Ç–∏–π, –æ–±–µ—Å—Ü–µ–Ω–∏–≤–∞–Ω–∏–µ –≤–∞—à–∏—Ö –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏ —á—É–≤—Å—Ç–≤"),
                    ("–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —à–∞–Ω—Ç–∞–∂", "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —á—É–≤—Å—Ç–≤–∞ –≤–∏–Ω—ã –∏ –ª—é–±–≤–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∂–µ–ª–∞–µ–º–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è"),
                    ("–ò–∑–æ–ª—è—Ü–∏—è –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏", "–ü–æ–ø—ã—Ç–∫–∏ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –≤–∞—à–µ –æ–±—â–µ–Ω–∏–µ —Å —Å–µ–º—å–µ–π, –¥—Ä—É–∑—å—è–º–∏ –∏ –¥—Ä—É–≥–∏–º–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏")
                ]
            elif risk_score >= 50:
                red_flags = [
                    ("–ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—é—â–∏–µ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏", "–ü–æ–ø—ã—Ç–∫–∏ –≤–ª–∏—è—Ç—å –Ω–∞ –≤–∞—à–∏ —Ä–µ—à–µ–Ω–∏—è –∏ –≤—ã–±–æ—Ä—ã"),
                    ("–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ", "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç–º–æ—Ü–∏–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∂–µ–ª–∞–µ–º–æ–≥–æ"),
                    ("–ù–∞—Ä—É—à–µ–Ω–∏–µ –≥—Ä–∞–Ω–∏—Ü", "–ù–µ—É–≤–∞–∂–µ–Ω–∏–µ –∫ –≤–∞—à–∏–º –ª–∏—á–Ω—ã–º –≥—Ä–∞–Ω–∏—Ü–∞–º –∏ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤—É")
                ]
            elif risk_score >= 25:
                red_flags = [
                    ("–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã", "–ò–Ω–æ–≥–¥–∞ –≤–æ–∑–Ω–∏–∫–∞—é—Ç –Ω–µ–±–æ–ª—å—à–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –≤ –æ–±—â–µ–Ω–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ —É—Å–ø–µ—à–Ω–æ —Ä–µ—à–∞—é—Ç—Å—è"),
                    ("–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –æ—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç—å", "–ó–¥–æ—Ä–æ–≤—ã–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ –≤–∞–∂–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏")
                ]
            elif risk_score >= 15:
                red_flags = [
                    ("–û—Ç–∫—Ä—ã—Ç–∞—è –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è", "–ü–∞—Ä—Ç–Ω–µ—Ä –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –∫ —á–µ—Å—Ç–Ω–æ–º—É –∏ –æ—Ç–∫—Ä—ã—Ç–æ–º—É –¥–∏–∞–ª–æ–≥—É"),
                    ("–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞", "–ü—Ä–æ—è–≤–ª—è–µ—Ç –∏—Å–∫—Ä–µ–Ω–Ω—é—é –∑–∞–±–æ—Ç—É –∏ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –≤–∞—à–∏—Ö –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π"),
                    ("–£–≤–∞–∂–µ–Ω–∏–µ –≥—Ä–∞–Ω–∏—Ü", "–í—Å–µ–≥–¥–∞ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∏ —É–≤–∞–∂–∞–µ—Ç –≤–∞—à–µ –ª–∏—á–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ")
                ]
            else:
                red_flags = [
                    ("–ò—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–∞—è —ç–º–ø–∞—Ç–∏—è", "–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –≥–ª—É–±–æ–∫–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –∏ —Å–æ—á—É–≤—Å—Ç–≤–∏–µ –∫ –≤–∞—à–∏–º –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è–º"),
                    ("–ë–µ–∑—É—Å–ª–æ–≤–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞", "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤–∞—à–∏ —Ü–µ–ª–∏, –º–µ—á—Ç—ã –∏ –ª–∏—á–Ω–æ—Å—Ç–Ω—ã–π —Ä–æ—Å—Ç"),
                    ("–ó–¥–æ—Ä–æ–≤—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è", "–°–æ–∑–¥–∞–µ—Ç –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –¥–æ–≤–µ—Ä–∏—è, —É–≤–∞–∂–µ–Ω–∏—è –∏ –≤–∑–∞–∏–º–Ω–æ–π –∑–∞–±–æ—Ç—ã"),
                    ("–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∑—Ä–µ–ª–æ—Å—Ç—å", "–°–ø–æ—Å–æ–±–µ–Ω –∫ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–æ–º—É —Ä–µ—à–µ–Ω–∏—é –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –∏ —Å–∞–º–æ–∞–Ω–∞–ª–∏–∑—É")
                ]
        else:
            # Convert simple list to tuples with descriptions
            red_flags = [(flag, f"–ê–Ω–∞–ª–∏–∑ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω–æ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è: {flag.lower()}") for flag in red_flags[:4]]
        
        html_parts = []
        for title, description in red_flags:
            html_parts.append(f'''
                <div class="red-flag">
                    <div class="red-flag-title">{title}</div>
                    <p>{description}</p>
                </div>
            ''')
        
        return '\n'.join(html_parts)
    
    def _generate_protection_strategies(self, recommendations: list) -> str:
        """Generate protection strategies HTML"""
        strategies = [
            "<strong>–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–µ—Ç–∫–∏—Ö –≥—Ä–∞–Ω–∏—Ü:</strong> –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –Ω–µ–ø—Ä–∏–µ–º–ª–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∏ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –∑–∞ –µ–≥–æ –Ω–∞—Ä—É—à–µ–Ω–∏–µ",
            "<strong>–¢–µ—Ö–Ω–∏–∫–∞ \"–°–µ—Ä—ã–π –∫–∞–º–µ–Ω—å\":</strong> –ú–∏–Ω–∏–º–∏–∑–∏—Ä—É–π—Ç–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏, –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ –∏ –∫—Ä–∞—Ç–∫–æ",
            "<strong>–î–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤:</strong> –í–µ–¥–∏—Ç–µ –¥–Ω–µ–≤–Ω–∏–∫ —Å–ª—É—á–∞–µ–≤ –ø—Ä–æ–±–ª–µ–º–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è —Å –¥–∞—Ç–∞–º–∏ –∏ –¥–µ—Ç–∞–ª—è–º–∏",
            "<strong>–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–≤—è–∑–µ–π:</strong> –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏ —É–∫—Ä–µ–ø–∏—Ç–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å —Å–µ–º—å–µ–π –∏ –¥—Ä—É–∑—å—è–º–∏"
        ]
        
        if recommendations:
            # Add custom recommendations
            for rec in recommendations[:2]:
                strategies.append(f"<strong>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</strong> {rec}")
        
        return '\n'.join([f'<li>{strategy}</li>' for strategy in strategies])
    
    def _generate_action_plan(self, risk_score: float) -> str:
        """Generate action plan HTML"""
        if risk_score >= 70:
            urgency = "–Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã—Ö"
            short_term = [
                "–ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –ø—Å–∏—Ö–æ–ª–æ–≥—É –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏",
                "–°–æ–∑–¥–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –¥–ª—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π —Å–≤—è–∑–∏",
                "–ù–∞—á–∞—Ç—å –≤–µ–¥–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω–∏–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π",
                "–ò–∑—É—á–∏—Ç—å —Ç–µ—Ö–Ω–∏–∫–∏ –∑–∞—â–∏—Ç—ã –æ—Ç –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–π",
                "–†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –º–µ—Å—Ç–∞ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è"
            ]
        elif risk_score >= 50:
            urgency = "—Å–∫–æ—Ä–µ–π—à–∏—Ö"
            short_term = [
                "–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –ø—Å–∏—Ö–æ–ª–æ–≥—É –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏",
                "–°–æ–∑–¥–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤",
                "–ù–∞—á–∞—Ç—å –≤–µ–¥–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω–∏–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π",
                "–ò–∑—É—á–∏—Ç—å —Ç–µ—Ö–Ω–∏–∫–∏ –∑–∞—â–∏—Ç—ã –æ—Ç –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–π"
            ]
        elif risk_score >= 25:
            urgency = "—Ä–∞–∑–≤–∏–≤–∞—é—â–∏—Ö"
            short_term = [
                "–ü—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ä–∞–∑–≤–∏–≤–∞—Ç—å –Ω–∞–≤—ã–∫–∏ –∑–¥–æ—Ä–æ–≤–æ–≥–æ –æ–±—â–µ–Ω–∏—è",
                "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–π –¥–∏–∞–ª–æ–≥ —Å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º",
                "–ò–∑—É—á–∞—Ç—å –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—É –ø–æ —É–∫—Ä–µ–ø–ª–µ–Ω–∏—é –æ—Ç–Ω–æ—à–µ–Ω–∏–π"
            ]
        elif risk_score >= 15:
            urgency = "–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏—Ö"
            short_term = [
                "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–¥–æ—Ä–æ–≤—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã",
                "–ü—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –∑–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞",
                "–†–∞–∑–≤–∏–≤–∞—Ç—å —Å–æ–≤–º–µ—Å—Ç–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
                "–ü—Ä–æ–¥–æ–ª–∂–∞—Ç—å –æ—Ç–∫—Ä—ã—Ç–æ–µ –∏ —á–µ—Å—Ç–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ"
            ]
        else:
            urgency = "—É–∫—Ä–µ–ø–ª—è—é—â–∏—Ö"
            short_term = [
                "–ù–∞—Å–ª–∞–∂–¥–∞—Ç—å—Å—è –∑–¥–æ—Ä–æ–≤—ã–º–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è–º–∏",
                "–ë—ã—Ç—å –ø—Ä–∏–º–µ—Ä–æ–º –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø–∞—Ä",
                "–î–µ–ª–∏—Ç—å—Å—è –æ–ø—ã—Ç–æ–º –∑–¥–æ—Ä–æ–≤–æ–π –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏",
                "–ü—Ä–æ–¥–æ–ª–∂–∞—Ç—å –≤–∑–∞–∏–º–Ω—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É –∏ —Ä–æ—Å—Ç"
            ]
        
        return f'''
            <h4 style="color: #667eea; margin-bottom: 15px;">–ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è (1-2 –Ω–µ–¥–µ–ª–∏):</h4>
            <ul style="margin-left: 20px; margin-bottom: 25px;">
                {''.join([f'<li>{action}</li>' for action in short_term])}
            </ul>
            
            <h4 style="color: #667eea; margin-bottom: 15px;">–°—Ä–µ–¥–Ω–µ—Å—Ä–æ—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è (1-3 –º–µ—Å—è—Ü–∞):</h4>
            <ul style="margin-left: 20px; margin-bottom: 25px;">
                <li>–†–∞–∑–≤–∏–≤–∞—Ç—å –Ω–∞–≤—ã–∫–∏ –∞—Å—Å–µ—Ä—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥—Ä–∞–Ω–∏—Ü</li>
                <li>–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â—É—é —Å–µ—Ç—å</li>
                <li>–†–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ –ø–æ–≤—ã—à–µ–Ω–∏–µ–º —Å–∞–º–æ–æ—Ü–µ–Ω–∫–∏ –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏</li>
                <li>–†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –∂–∏–∑–Ω–µ–Ω–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏</li>
            </ul>
            
            <h4 style="color: #667eea; margin-bottom: 15px;">–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ —Ü–µ–ª–∏ (3+ –º–µ—Å—è—Ü–∞):</h4>
            <ul style="margin-left: 20px;">
                <li>–ü—Ä–∏–Ω—è—Ç—å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –æ –±—É–¥—É—â–µ–º –æ—Ç–Ω–æ—à–µ–Ω–∏–π</li>
                <li>–†–∞–∑–≤–∏—Ç—å —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫ –º–∞–Ω–∏–ø—É–ª—è—Ç–∏–≤–Ω–æ–º—É –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—é</li>
                <li>–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –±–ª–∞–≥–æ–ø–æ–ª—É—á–∏–µ</li>
                <li>–°–æ–∑–¥–∞—Ç—å –∑–¥–æ—Ä–æ–≤—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤–∑–∞–∏–º–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–π</li>
            </ul>
        '''
    
    def _get_level_description(self, score: float) -> str:
        """Get level description for score"""
        if score >= 8:
            return "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å"
        elif score >= 6:
            return "–í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å"
        elif score >= 4:
            return "–°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å"
        else:
            return "–ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å"
            
    def _expand_psychological_profile(
        self, 
        original_profile: str, 
        partner_name: str, 
        risk_score: float, 
        analysis_data: Dict[str, Any]
    ) -> str:
        """Expand psychological profile to detailed multi-page analysis"""
        
        # Extract additional data
        block_scores = analysis_data.get('block_scores', {})
        red_flags = analysis_data.get('red_flags', [])
        personality_type = self._determine_personality_type(risk_score)
        dark_triad = analysis_data.get('dark_triad', {})
        
        # –ü–†–ò–û–†–ò–¢–ï–¢: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –ò–ò-–∞–Ω–∞–ª–∏–∑!
        if original_profile and len(original_profile.strip()) > 100:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –ò–ò-–∞–Ω–∞–ª–∏–∑ –≤ HTML
            expanded = self._format_ai_analysis_to_html(
                original_profile, 
                partner_name, 
                risk_score, 
                analysis_data
            )
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –µ—Å–ª–∏ AI-–∞–Ω–∞–ª–∏–∑ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
            logger.warning(f"No AI analysis found, using static templates")
            if risk_score >= 70:
                expanded = self._generate_high_risk_analysis(partner_name, risk_score, block_scores, red_flags, dark_triad)
            elif risk_score >= 50:
                expanded = self._generate_medium_risk_analysis(partner_name, risk_score, block_scores, red_flags, dark_triad)
            else:
                expanded = self._generate_low_risk_analysis(partner_name, risk_score, block_scores, analysis_data)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
        return f"""
        <div class="analysis-section">
            <div class="analysis-content">
                {expanded}
            </div>
        </div>
        """
    
    def _format_ai_analysis_to_html(
        self,
        ai_analysis: str,
        partner_name: str,
        risk_score: float,
        analysis_data: Dict[str, Any]
    ) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π –ò–ò-–∞–Ω–∞–ª–∏–∑ –≤ –∫—Ä–∞—Å–∏–≤—ã–π HTML"""
        
        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ –Ω–∞—á–∞–ª–µ
        lines = ai_analysis.split('\n')
        filtered_lines = []
        skip_next = False
        
        for i, line in enumerate(lines):
            line_clean = line.strip()
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
            if '–ü–ï–†–°–û–ù–ê–õ–ò–ó–ò–†–û–í–ê–ù–ù–´–ô –ü–°–ò–•–û–õ–û–ì–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó' in line_clean:
                continue
            if line_clean == '':
                # –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –ø–æ–¥—Ä—è–¥
                if filtered_lines and filtered_lines[-1] != '':
                    filtered_lines.append('')
                continue
                
            filtered_lines.append(line)
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ
        cleaned_analysis = '\n'.join(filtered_lines).strip()
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –±–ª–æ–∫–∏ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º
        sections = []
        current_section = {'title': '', 'content': []}
        
        paragraphs = cleaned_analysis.split('\n\n')
        
        for paragraph in paragraphs:
            paragraph = paragraph.strip()
            if not paragraph:
                continue
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –±–ª–æ–∫–∞
            is_section_title = (
                paragraph.isupper() and 
                len(paragraph) < 150 and
                any(keyword in paragraph.lower() for keyword in [
                    '–ø–æ—Ä—Ç—Ä–µ—Ç', '—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞', '–ø–∞—Ç—Ç–µ—Ä–Ω', '–∫–æ–Ω—Ç—Ä–æ–ª', 
                    '–º–∞–Ω–∏–ø—É–ª', '—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω', '–∏–Ω—Ç–∏–º–Ω–æ—Å—Ç—å', '—Å–æ—Ü–∏–∞–ª—å–Ω',
                    '–ø—Ä–æ–≥–Ω–æ–∑', '—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü'
                ])
            )
            
            if is_section_title:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å–µ–∫—Ü–∏—é
                if current_section['title'] or current_section['content']:
                    sections.append(current_section)
                
                # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é —Å–µ–∫—Ü–∏—é
                current_section = {'title': paragraph, 'content': []}
            else:
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ —Ç–µ–∫—É—â—É—é —Å–µ–∫—Ü–∏—é
                current_section['content'].append(paragraph)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–µ–∫—Ü–∏—é
        if current_section['title'] or current_section['content']:
            sections.append(current_section)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤ HTML
        formatted_sections = []
        
        for section in sections:
            if section['title']:
                formatted_sections.append(f'<h4 class="analysis-section-title">{section["title"]}</h4>')
            
            for content in section['content']:
                if content.strip():
                    formatted_sections.append(f'<p class="analysis-text">{content}</p>')
        
        # –û–±–µ—Ä—Ç—ã–≤–∞–µ–º –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        html_analysis = f"""
<div class="detailed-profile ai-generated">
    <div class="ai-analysis-content">
        {''.join(formatted_sections)}
    </div>
</div>"""
        
        return html_analysis
    
    def _generate_additional_insights(self, analysis_data: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–∞"""
        
        insights = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ –º–Ω–µ–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å
        if 'experts' in analysis_data:
            experts = analysis_data['experts']
            if isinstance(experts, dict):
                for expert_name, expert_opinion in experts.items():
                    insights.append(f'''
                    <div class="expert-insight">
                        <h4>{expert_name}</h4>
                        <p>{expert_opinion}</p>
                    </div>
                    ''')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã
        if 'personalized_insights' in analysis_data:
            personalized = analysis_data['personalized_insights']
            if isinstance(personalized, list):
                for insight in personalized:
                    insights.append(f'<div class="personalized-insight"><p>{insight}</p></div>')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞
        if 'behavioral_evidence' in analysis_data:
            evidence = analysis_data['behavioral_evidence']
            if isinstance(evidence, list):
                insights.append('<div class="behavioral-evidence"><h4>–ü–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞:</h4><ul>')
                for item in evidence:
                    insights.append(f'<li>{item}</li>')
                insights.append('</ul></div>')
        
        return ''.join(insights) if insights else '<p>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>'
    
    def _generate_high_risk_analysis(
        self, 
        partner_name: str, 
        risk_score: float, 
        block_scores: Dict[str, float], 
        red_flags: list,
        dark_triad: Dict[str, float]
    ) -> str:
        """Generate detailed analysis for high-risk cases (70%+)"""
        
        analysis = f"""
<div class="detailed-profile">
    <div class="profile-section">
        <h3 class="section-title">–î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞</h3>
        <p>–ê–Ω–∞–ª–∏–∑ –≤—ã—è–≤–ª—è–µ—Ç –∫—Ä–∞–π–Ω–µ –æ–ø–∞—Å–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω –∞–±—å—é–∑–∏–≤–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏ –Ω–∞—Ä—Ü–∏—Å—Å–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ª–∏—á–Ω–æ—Å—Ç–∏ –∏ —Å–∫–ª–æ–Ω–Ω–æ—Å—Ç—å—é –∫ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏—è–º. –ù–∞–±—Ä–∞–Ω–Ω—ã–π –±–∞–ª–ª —Ä–∏—Å–∫–∞ <strong>{risk_score}%</strong> —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é —Å–∏—Ç—É–∞—Ü–∏—é, —Ç—Ä–µ–±—É—é—â—É—é –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞.</p>
        
        <p>–í —Ä–∞–º–∫–∞—Ö –º–æ–¥–µ–ª–∏ "–¢–µ–º–Ω–æ–π —Ç—Ä–∏–∞–¥—ã" –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç—Ä–µ–≤–æ–∂–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏: –Ω–∞—Ä—Ü–∏—Å—Å–∏–∑–º <strong>{dark_triad.get('narcissism', 0)}/10</strong>, –º–∞–∫–∏–∞–≤–µ–ª–ª–∏–∑–º <strong>{dark_triad.get('machiavellianism', 0)}/10</strong>, –ø—Å–∏—Ö–æ–ø–∞—Ç–∏—è <strong>{dark_triad.get('psychopathy', 0)}/10</strong>. –≠—Ç–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è —Å–æ–∑–¥–∞–µ—Ç —Ç–æ–∫—Å–∏—á–Ω—É—é –ª–∏—á–Ω–æ—Å—Ç—å, –Ω–µ—Å–ø–æ—Å–æ–±–Ω—É—é –∫ –∑–¥–æ—Ä–æ–≤—ã–º –æ—Ç–Ω–æ—à–µ–Ω–∏—è–º.</p>
    </div>

    <div class="profile-section">
        <h3 class="section-title">–ù–∞—Ä—Ü–∏—Å—Å–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—è–≤–ª–µ–Ω–∏—è –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö</h3>
        <p><strong>{partner_name}</strong> –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –Ω–∞—Ä—Ü–∏—Å—Å–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ª–∏—á–Ω–æ—Å—Ç–∏. –ï–≥–æ —Å–∞–º–æ–æ—Ü–µ–Ω–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏. –õ—é–±–æ–π —Ä–∞–∑–≥–æ–≤–æ—Ä –æ–Ω –º–∞—Å—Ç–µ—Ä—Å–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –Ω–∞ —Å–µ–±—è, –æ–±–µ—Å—Ü–µ–Ω–∏–≤–∞—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞.</p>
        
        <p>–•–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã —Ñ—Ä–∞–∑—ã —Ç–∏–ø–∞ <em>"—è –Ω–µ —Ç–∞–∫–æ–π, –∫–∞–∫ –≤—Å–µ"</em>, <em>"–æ–±—ã—á–Ω—ã–µ –ª—é–¥–∏ –º–µ–Ω—è –Ω–µ –ø–æ–Ω–∏–º–∞—é—Ç"</em>, <em>"—É –º–µ–Ω—è –æ—Å–æ–±—ã–π –≤–∑–≥–ª—è–¥ –Ω–∞ –≤–µ—â–∏"</em>. –ü—Ä–∏ —ç—Ç–æ–º –æ–Ω –±–æ–ª–µ–∑–Ω–µ–Ω–Ω–æ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –ª—é–±—É—é –∫—Ä–∏—Ç–∏–∫—É, –¥–∞–∂–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—É—é, –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞—è –µ–µ –∫–∞–∫ –ª–∏—á–Ω–æ–µ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–µ.</p>
        
        <p>–û—Å–æ–±–µ–Ω–Ω–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å–Ω–æ –µ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏ —É—Å–ø–µ—Ö–∞—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–∞: –≤–º–µ—Å—Ç–æ –∏—Å–∫—Ä–µ–Ω–Ω–µ–π —Ä–∞–¥–æ—Å—Ç–∏ –æ–Ω –ª–∏–±–æ –æ–±–µ—Å—Ü–µ–Ω–∏–≤–∞–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ, –ª–∏–±–æ —Å—Ä–∞–∑—É –Ω–∞—á–∏–Ω–∞–µ—Ç —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å –æ —Å–≤–æ–∏—Ö –±–æ–ª–µ–µ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ø–µ—Ö–∞—Ö, –ø–µ—Ä–µ–∫–ª—é—á–∞—è –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Å–µ–±—è.</p>
    </div>

    <div class="profile-section">
        <h3 class="section-title">üéØ –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—é—â–µ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ: —ç—Å–∫–∞–ª–∞—Ü–∏—è –≤–ª–∞—Å—Ç–∏</h3>
        <p>–ö–æ–Ω—Ç—Ä–æ–ª—å —Ä–∞–∑–≤–∏–≤–∞–µ—Ç—Å—è –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ, –∫–∞–∫ –∑–∞—Ç—è–≥–∏–≤–∞—é—â–∞—è—Å—è –ø–µ—Ç–ª—è. –ù–∞—á–∏–Ω–∞—è —Å "–∑–∞–±–æ—Ç—ã" - –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å –ø–æ—Å–ª–µ —Ä–∞–±–æ—Ç—ã, –∏–Ω—Ç–µ—Ä–µ—Å–∞ –∫ –ø–ª–∞–Ω–∞–º, —Å–æ–≤–µ—Ç–æ–≤ –ø–æ –æ–¥–µ–∂–¥–µ - –æ–Ω –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –æ –∫–∞–∂–¥–æ–º —à–∞–≥–µ.</p>
        
        <p>–ë–ª–æ–∫ "–ö–æ–Ω—Ç—Ä–æ–ª—å" –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å <strong>{block_scores.get('control', 0)}/10</strong>. –≠—Ç–æ –ø—Ä–æ—è–≤–ª—è–µ—Ç—Å—è –≤:</p>
        <ul class="behavior-list">
            <li>–°–∏—Å—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –ø–µ—Ä–µ–ø–∏—Å–æ–∫</li>
            <li>–ö–æ–Ω—Ç—Ä–æ–ª–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤ –ø–æ–¥ –≤–∏–¥–æ–º "–∑–∞–±–æ—Ç—ã –æ —Å–µ–º—å–µ"</li>
            <li>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ —á–µ—Ä–µ–∑ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —à–∞–Ω—Ç–∞–∂</li>
            <li>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è—Ö –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏ –æ –º–µ—Å—Ç–æ–Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–∏</li>
        </ul>
        
        <p>–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å - –æ—Å–æ–±–µ–Ω–Ω–æ –∫–æ–≤–∞—Ä–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç. –ù–∞—á–∏–Ω–∞—è —Å –±–ª–∞–≥–æ—Ä–æ–¥–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π "–æ–ø–ª–∞—Ç–∏—Ç—å –≤—Å–µ —Ä–∞—Å—Ö–æ–¥—ã", –æ–Ω —Å–æ–∑–¥–∞–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–π –ø–∞—Ä—Ç–Ω–µ—Ä –Ω–µ –º–æ–∂–µ—Ç –∫—É–ø–∏—Ç—å –¥–∞–∂–µ –∫–æ—Ñ–µ –±–µ–∑ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è.</p>
    </div>

    <div class="profile-section">
        <h3 class="section-title">üîÑ –ú–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ –≥–∞–∑–ª–∞–π—Ç–∏–Ω–≥–∞ –∏ –∏—Å–∫–∞–∂–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏</h3>
        <p>–ë–ª–æ–∫ "–ì–∞–∑–ª–∞–π—Ç–∏–Ω–≥" –¥–æ—Å—Ç–∏–≥–∞–µ—Ç —Ç—Ä–µ–≤–æ–∂–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è <strong>{block_scores.get('gaslighting', 0)}/10</strong>. {partner_name} - –º–∞—Å—Ç–µ—Ä –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏. –û–Ω –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –≥–æ–≤–æ—Ä–∏—Ç –ø—Ä—è–º–æ "—Ç—ã –ª–∂–µ—à—å", –∏—Å–ø–æ–ª—å–∑—É—è –±–æ–ª–µ–µ —Ç–æ–Ω–∫–∏–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏: <em>"—Ç—ã —á—Ç–æ-—Ç–æ –ø—É—Ç–∞–µ—à—å"</em>, <em>"—É —Ç–µ–±—è —Å—Ç—Ä–∞–Ω–Ω–∞—è –ø–∞–º—è—Ç—å"</em>, <em>"—Ç—ã —Å–ª–∏—à–∫–æ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –≤—Å–µ –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞–µ—à—å"</em>.</p>
        
        <p>–ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ —É –Ω–µ–≥–æ —Å–≤–æ—è –≤–µ—Ä—Å–∏—è –ø—Ä–æ–∏–∑–æ—à–µ–¥—à–µ–≥–æ, –≥–¥–µ –æ–Ω - –∂–µ—Ä—Ç–≤–∞, –∞ –ø–∞—Ä—Ç–Ω–µ—Ä - –∞–≥—Ä–µ—Å—Å–æ—Ä. –û—Å–æ–±–µ–Ω–Ω–æ –∫–æ–≤–∞—Ä–Ω–æ –æ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —ç–º–æ—Ü–∏–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –ø—Ä–æ—Ç–∏–≤ –Ω–µ–≥–æ: –ø–ª–∞—á —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è "–∏—Å—Ç–µ—Ä–∏–∫–æ–π", –∑–ª–æ—Å—Ç—å - "–Ω–µ—É—Ä–∞–≤–Ω–æ–≤–µ—à–µ–Ω–Ω–æ—Å—Ç—å—é", —Å–ø–æ–∫–æ–π–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ - "—Ö–æ–ª–æ–¥–Ω–æ—Å—Ç—å—é".</p>
        
        <p><strong>–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –ø—Ä–∏–µ–º:</strong> –ø–µ—Ä–µ–Ω–æ—Å –≤—Å—Ç—Ä–µ—á —Å –ø–æ—Å–ª–µ–¥—É—é—â–∏–º —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º, —á—Ç–æ "–º—ã –∂–µ –¥–æ–≥–æ–≤–∞—Ä–∏–≤–∞–ª–∏—Å—å –Ω–∞ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è", –∑–∞—Å—Ç–∞–≤–ª—è—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞ —Å–æ–º–Ω–µ–≤–∞—Ç—å—Å—è –≤ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π –ø–∞–º—è—Ç–∏.</p>
    </div>

    <div class="profile-section">
        <h3 class="section-title">üí≠ –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∏ –¥–≤–æ–π–Ω—ã–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã</h3>
        <p>–ù–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –≤–Ω–µ—à–Ω—é—é –º–∞—Å–∫—É –∫–æ–Ω—Ç—Ä–æ–ª—è, —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ä–µ–≥—É–ª—è—Ü–∏—è {partner_name} –∫—Ä–∞–π–Ω–µ –Ω–∞—Ä—É—à–µ–Ω–∞ (–±–ª–æ–∫ "–≠–º–æ—Ü–∏—è": <strong>{block_scores.get('emotion', 0)}/10</strong>). –ü–µ—Ä–µ—Ö–æ–¥ –æ—Ç —Å–ø–æ–∫–æ–π–Ω–æ–≥–æ —Ç–æ–Ω–∞ –∫ –∫—Ä–∏–∫—É –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –º–≥–Ω–æ–≤–µ–Ω–Ω–æ, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –∏–¥–µ—Ç –Ω–µ –ø–æ –µ–≥–æ –ø–ª–∞–Ω—É.</p>
        
        <p>–•–∞—Ä–∞–∫—Ç–µ—Ä–Ω–∞ –¥–∏—Å–ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ä–µ–∞–∫—Ü–∏–π: –æ–ø–æ–∑–¥–∞–Ω–∏–µ –Ω–∞ 10 –º–∏–Ω—É—Ç –≤—ã–∑—ã–≤–∞–µ—Ç —á–∞—Å–æ–≤—É—é –ª–µ–∫—Ü–∏—é, –∑–∞–±—ã—Ç–∞—è –ø–æ–∫—É–ø–∫–∞ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ–º "–Ω–µ—É–≤–∞–∂–µ–Ω–∏—è –∫ —Å–µ–º—å–µ". –ü—Ä–∏ —ç—Ç–æ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ –æ–Ω –æ–±—ä—è—Å–Ω—è–µ—Ç "–≤–∞–∂–Ω—ã–º–∏ –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞–º–∏".</p>
        
        <p>–ü–æ—Å–ª–µ –≤—Å–ø—ã—à–µ–∫ –≥–Ω–µ–≤–∞ –∏–∑–≤–∏–Ω–µ–Ω–∏–π –Ω–µ —Å–ª–µ–¥—É–µ—Ç. –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –≤–∫–ª—é—á–∞–µ—Ç—Å—è —Ä–µ–∂–∏–º –∂–µ—Ä—Ç–≤—ã: <em>"–î–æ —á–µ–≥–æ —Ç—ã –º–µ–Ω—è –¥–æ–≤–µ–ª–∞"</em>, <em>"–Ø –Ω–µ —Ö–æ—Ç–µ–ª –∫—Ä–∏—á–∞—Ç—å, –Ω–æ —Ç—ã –∑–∞—Å—Ç–∞–≤–∏–ª–∞"</em>. –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –≤—Å–µ–≥–¥–∞ –ø–µ—Ä–µ–∫–ª–∞–¥—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞.</p>
    </div>

    <div class="profile-section">
        <h3 class="section-title">üíï –ò–Ω—Ç–∏–º–Ω–æ—Å—Ç—å –∫–∞–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –≤–ª–∞—Å—Ç–∏</h3>
        <p>–ë–ª–æ–∫ "–ò–Ω—Ç–∏–º–Ω–æ—Å—Ç—å" –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç <strong>{block_scores.get('intimacy', 0)}/10</strong>, —á—Ç–æ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–ª–∏–∑–æ—Å—Ç–∏ –∫–∞–∫ —Å—Ä–µ–¥—Å—Ç–≤–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è. {partner_name} —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –∏–Ω—Ç–∏–º–Ω–æ—Å—Ç—å –Ω–µ –∫–∞–∫ –≤–∑–∞–∏–º–Ω–æ–µ —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ, –∞ –∫–∞–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤–ª–∞—Å—Ç–∏ –Ω–∞–¥ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º.</p>
        
        <p>–û—Ç–∫–∞–∑ –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è –∫–∞–∫ –ª–∏—á–Ω–æ–µ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–µ –∏ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –ø–æ–≤–æ–¥–æ–º –¥–ª—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —à–∞–Ω—Ç–∞–∂–∞: <em>"–ï—Å–ª–∏ —Ç—ã –º–µ–Ω—è –ª—é–±–∏—à—å..."</em>, <em>"–í—Å–µ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ –ø–∞—Ä—ã..."</em>, <em>"–Ø –∂–µ –Ω–µ –º–Ω–æ–≥–æ–≥–æ –ø—Ä–æ—à—É"</em>.</p>
        
        <p>–ò–Ω—Ç–∏–º–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ –Ω–∞–≥—Ä–∞–¥–∞ –∏ –Ω–∞–∫–∞–∑–∞–Ω–∏–µ: –ø–æ—Å–ª–µ —Å—Å–æ—Ä –º–æ–∂–µ—Ç –Ω–µ–¥–µ–ª—è–º–∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ –æ—Ç—Å—Ç—Ä–∞–Ω—è—Ç—å—Å—è, –∞ –∑–∞—Ç–µ–º —Ç—Ä–µ–±–æ–≤–∞—Ç—å –±–ª–∏–∑–æ—Å—Ç–∏ –∫–∞–∫ "–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ –ø—Ä–æ—â–µ–Ω–∏—è". –ü—Ä–∏ —ç—Ç–æ–º –æ–Ω –µ–¥–∏–Ω–æ–ª–∏—á–Ω–æ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç –∫–æ–≥–¥–∞ –∏ –∫–∞–∫ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –±–ª–∏–∑–æ—Å—Ç—å.</p>
    </div>

    <div class="profile-section">
        <h3 class="section-title">–°–æ—Ü–∏–∞–ª—å–Ω–∞—è –º–∞—Å–∫–∞ –ø—Ä–æ—Ç–∏–≤ –∏—Å—Ç–∏–Ω–Ω–æ–≥–æ –ª–∏—Ü–∞</h3>
        <p>–û–¥–Ω–∞ –∏–∑ —Å–∞–º—ã—Ö —Ç—Ä–∞–≤–º–∞—Ç–∏—á–Ω—ã—Ö —á–µ—Ä—Ç - –∫–∞—Ä–¥–∏–Ω–∞–ª—å–Ω–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É –ø—É–±–ª–∏—á–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –∏ –ø–æ–≤–µ–¥–µ–Ω–∏–µ–º –Ω–∞–µ–¥–∏–Ω–µ. –í –æ–±—â–µ—Å—Ç–≤–µ –æ–Ω –æ–±–∞—è—Ç–µ–ª—å–Ω—ã–π, –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–π, –≥–∞–ª–∞–Ω—Ç–Ω—ã–π. –ú–æ–∂–µ—Ç –ø—Ä–æ–∏–∑–Ω–µ—Å—Ç–∏ —Ä–µ—á—å –æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–µ –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö, –ø–æ—à—É—Ç–∏—Ç—å –æ–± —ç–≥–æ–∏—Å—Ç–∏—á–Ω—ã—Ö –º—É–∂—á–∏–Ω–∞—Ö.</p>
        
        <p>–≠—Ç–∞ –¥–≤–æ–π—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –æ—Å–æ–±–µ–Ω–Ω–æ –±–æ–ª–µ–∑–Ω–µ–Ω–Ω–∞ –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞, —Å–æ–∑–¥–∞–≤–∞—è –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–π –¥–∏—Å—Å–æ–Ω–∞–Ω—Å. –û–∫—Ä—É–∂–∞—é—â–∏–µ –≤–∏–¥—è—Ç "–∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ–≥–æ –º—É–∂—á–∏–Ω—É", –∞ –¥–æ–º–∞ —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç—Å—è —Å–æ–≤—Å–µ–º –¥—Ä—É–≥–∞—è —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å. –≠—Ç–æ –∑–∞—Å—Ç–∞–≤–ª—è–µ—Ç –∂–µ—Ä—Ç–≤—É –≤–∏–Ω–∏—Ç—å —Å–µ–±—è –∏ —Å–æ–º–Ω–µ–≤–∞—Ç—å—Å—è –≤ –∞–¥–µ–∫–≤–∞—Ç–Ω–æ—Å—Ç–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è.</p>
    </div>

    <div class="profile-section critical-section">
        <h3 class="section-title">–ü—Ä–æ–≥–Ω–æ–∑ –∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</h3>
        <p>–ü—Ä–∏ —Ç–∞–∫–æ–º —É—Ä–æ–≤–Ω–µ —Ä–∏—Å–∫–∞ (<strong>{risk_score}%</strong>) –æ—Ç–Ω–æ—à–µ–Ω–∏—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç —Å–µ—Ä—å–µ–∑–Ω—É—é —É–≥—Ä–æ–∑—É –¥–ª—è –ø—Å–∏—Ö–∏—á–µ—Å–∫–æ–≥–æ –∏ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞. –ü–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ–≤–µ–¥–µ–Ω–∏—è —Ä–∏–≥–∏–¥–Ω—ã –∏ –≥–ª—É–±–æ–∫–æ —É–∫–æ—Ä–µ–Ω–µ–Ω—ã, –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω—ã –±–µ–∑ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ–π –ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–∏–∏.</p>
        
        <div class="critical-actions">
            <h4>‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û:</h4>
            <ul class="critical-list">
                <li>–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∑–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–æ–º–æ—â—å—é –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ</li>
                <li>–°–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â—É—é —Å–µ—Ç—å</li>
                <li>–†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è</li>
                <li>–î–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –ø—Ä–∞–≤–æ–≤–æ–≥–æ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞</li>
            </ul>
        </div>
        
        <p><strong>–í–∞–∂–Ω–æ –ø–æ–Ω–∏–º–∞—Ç—å:</strong> –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É—é—Ç—Å—è —Ü–∏–∫–ª–∏—á–Ω–æ—Å—Ç—å—é —Å –≤–æ–∑—Ä–∞—Å—Ç–∞—é—â–µ–π –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å—é. –ë–µ–∑ —Ä–∞–¥–∏–∫–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–∏—Ç—É–∞—Ü–∏—è –±—É–¥–µ—Ç —Ç–æ–ª—å–∫–æ —É—Ö—É–¥—à–∞—Ç—å—Å—è. –ü–∞—Ä—Ç–Ω–µ—Ä –Ω–µ –º–æ–∂–µ—Ç "–∏—Å–ø—Ä–∞–≤–∏—Ç—å" —Ç–∞–∫–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –ª—é–±–æ–≤—å—é –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è.</p>
    </div>
</div>"""
        return analysis
    
    def _generate_medium_risk_analysis(
        self, 
        partner_name: str, 
        risk_score: float, 
        block_scores: Dict[str, float], 
        red_flags: list,
        dark_triad: Dict[str, float]
    ) -> str:
        """Generate analysis for medium-risk cases (40-70%)"""
        
        analysis = f"""
<div class="detailed-profile">
    <div class="profile-section">
        <h3 class="section-title">–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ –ª–∏—á–Ω–æ—Å—Ç–∏</h3>
        <p>–ê–Ω–∞–ª–∏–∑ –≤—ã—è–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ–≤–µ–¥–µ–Ω–∏—è, —Ç—Ä–µ–±—É—é—â–∏–µ —Å–µ—Ä—å–µ–∑–Ω–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è. –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞ <strong>{risk_score}%</strong> —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —ç—Å–∫–∞–ª–∏—Ä–æ–≤–∞—Ç—å –±–µ–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –º–µ—Ä.</p>
        
        <p><strong>{partner_name}</strong> –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Å–º–µ—à–∞–Ω–Ω—ã–µ —á–µ—Ä—Ç—ã –ª–∏—á–Ω–æ—Å—Ç–∏ —Å –≤—ã—Ä–∞–∂–µ–Ω–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –Ω–∞—Ä—Ü–∏—Å—Å–∏–∑–º–∞ (<strong>{dark_triad.get('narcissism', 0)}/10</strong>) –∏ —Å–∫–ª–æ–Ω–Ω–æ—Å—Ç—å—é –∫ –º–∞–Ω–∏–ø—É–ª—è—Ç–∏–≤–Ω–æ–º—É –ø–æ–≤–µ–¥–µ–Ω–∏—é (<strong>{dark_triad.get('machiavellianism', 0)}/10</strong>).</p>
    </div>

    <div class="profile-section">
        <h3 class="section-title">–ü—Ä–æ—è–≤–ª–µ–Ω–∏—è –Ω–∞—Ä—Ü–∏—Å—Å–∏—á–µ—Å–∫–∏—Ö —á–µ—Ä—Ç</h3>
        <p>–ü–∞—Ä—Ç–Ω–µ—Ä –ø—Ä–æ—è–≤–ª—è–µ—Ç –ø–æ–≤—ã—à–µ–Ω–Ω—É—é –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤–æ –≤–Ω–∏–º–∞–Ω–∏–∏ –∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏. –ß–∞—Å—Ç–æ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä—ã –Ω–∞ —Å–µ–±—è, –æ—Å–æ–±–µ–Ω–Ω–æ –∫–æ–≥–¥–∞ –æ–±—Å—É–∂–¥–∞—é—Ç—Å—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã –¥—Ä—É–≥–∏—Ö. –ë–æ–ª–µ–∑–Ω–µ–Ω–Ω–æ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –∫—Ä–∏—Ç–∏–∫—É, –¥–∞–∂–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—É—é.</p>
        
        <p>–•–∞—Ä–∞–∫—Ç–µ—Ä–Ω–∞ —Ç–µ–Ω–¥–µ–Ω—Ü–∏—è –∫ –æ–±–µ—Å—Ü–µ–Ω–∏–≤–∞–Ω–∏—é —á—É–∂–∏—Ö —É—Å–ø–µ—Ö–æ–≤ —á–µ—Ä–µ–∑ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å–æ —Å–≤–æ–∏–º–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏. –ü—Ä–∏ —ç—Ç–æ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –Ω–µ—É–¥–∞—á–∏ –æ–±—ä—è—Å–Ω—è—é—Ç—Å—è –≤–Ω–µ—à–Ω–∏–º–∏ –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞–º–∏, –∞ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–∫–ª–∞–¥—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –¥—Ä—É–≥–∏—Ö.</p>
    </div>

    <div class="profile-section">
        <h3 class="section-title">üéØ –≠–ª–µ–º–µ–Ω—Ç—ã –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—é—â–µ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è</h3>
        <p>–ë–ª–æ–∫ "–ö–æ–Ω—Ç—Ä–æ–ª—å" –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç <strong>{block_scores.get('control', 0)}/10</strong>. –ü—Ä–æ—è–≤–ª—è–µ—Ç—Å—è –≤ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–∏ –∞–≤—Ç–æ–Ω–æ–º–∏–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –ø–æ–¥ –≤–∏–¥–æ–º –∑–∞–±–æ—Ç—ã –∏ –ª—é–±–≤–∏. –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "–Ω–µ–≤–∏–Ω–Ω—ã—Ö" –≤–æ–ø—Ä–æ—Å–æ–≤ –æ –ø–ª–∞–Ω–∞—Ö –∏ –º–µ—Å—Ç–æ–Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–∏, –ø–µ—Ä–µ—Ä–∞—Å—Ç–∞–µ—Ç –≤ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏.</p>
        
        <p>–•–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã –ø–æ–ø—ã—Ç–∫–∏ –≤–ª–∏—è—Ç—å –Ω–∞ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏ —á–µ—Ä–µ–∑ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ –¥—Ä—É–∑—å—è—Ö –∏ –∫–æ–ª–ª–µ–≥–∞—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–∞. –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è —Ç–∞–∫–∂–µ —Å—Ç—Ä–µ–º–∏—Ç—Å—è –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—è —ç—Ç–æ –∫–∞–∫ "—Å–æ–≤–º–µ—Å—Ç–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ".</p>
    </div>

    <div class="profile-section">
        <h3 class="section-title">üîÑ –ò—Å–∫–∞–∂–µ–Ω–∏—è –≤ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏</h3>
        <p>–£—Ä–æ–≤–µ–Ω—å –≥–∞–∑–ª–∞–π—Ç–∏–Ω–≥–∞ <strong>{block_scores.get('gaslighting', 0)}/10</strong> –ø—Ä–æ—è–≤–ª—è–µ—Ç—Å—è –≤ –ø–æ–ø—ã—Ç–∫–∞—Ö –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤. –ü–æ—Å–ª–µ —Å—Å–æ—Ä –Ω–∞—Å—Ç–∞–∏–≤–∞–µ—Ç –Ω–∞ —Å–≤–æ–µ–π –≤–µ—Ä—Å–∏–∏ —Å–æ–±—ã—Ç–∏–π, –≥–¥–µ –µ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –≤—ã–≥–ª—è–¥–∏—Ç –æ–ø—Ä–∞–≤–¥–∞–Ω–Ω—ã–º.</p>
        
        <p>–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –ø—Ä–æ—Ç–∏–≤ –Ω–µ–≥–æ: <em>"–¢—ã —Å–ª–∏—à–∫–æ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è"</em>, <em>"–¢—ã –≤—Å–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–Ω–∏–º–∞–µ—à—å"</em>, <em>"–Ø –∂–µ –Ω–µ —ç—Ç–æ –∏–º–µ–ª –≤ –≤–∏–¥—É"</em>. –≠—Ç–∏ —Ñ—Ä–∞–∑—ã –∑–∞—Å—Ç–∞–≤–ª—è—é—Ç —Å–æ–º–Ω–µ–≤–∞—Ç—å—Å—è –≤ –∞–¥–µ–∫–≤–∞—Ç–Ω–æ—Å—Ç–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ä–µ–∞–∫—Ü–∏–π.</p>
    </div>

    <div class="profile-section">
        <h3 class="section-title">üí≠ –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å</h3>
        <p>–ü—Ä–æ–±–ª–µ–º—ã —Å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π —Ä–µ–≥—É–ª—è—Ü–∏–µ–π (–±–ª–æ–∫ "–≠–º–æ—Ü–∏—è": <strong>{block_scores.get('emotion', 0)}/10</strong>) –ø—Ä–æ—è–≤–ª—è—é—Ç—Å—è –≤ –Ω–µ–ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∞–∫—Ü–∏—è—Ö –Ω–∞ —Å—Ç—Ä–µ—Å—Å. –ú–µ–ª–∫–∏–µ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞ –º–æ–≥—É—Ç –≤—ã–∑–≤–∞—Ç—å –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—É—é –∑–ª–æ—Å—Ç—å –∏–ª–∏ –æ–±–∏–¥—É.</p>
        
        <p>–ü–æ—Å–ª–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –≤—Å–ø—ã—à–µ–∫ —Ä–µ–¥–∫–æ –∏–∑–≤–∏–Ω—è–µ—Ç—Å—è –∏—Å–∫—Ä–µ–Ω–Ω–µ. –ß–∞—â–µ –æ–±—ä—è—Å–Ω—è–µ—Ç —Å–≤–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ —É—Å—Ç–∞–ª–æ—Å—Ç—å—é, —Å—Ç—Ä–µ—Å—Å–æ–º –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞: <em>"–¢—ã –∂–µ –∑–Ω–∞–µ—à—å, –∫–∞–∫ —è —É—Å—Ç–∞–ª"</em>, <em>"–¢—ã –º–µ–Ω—è —Å–ø—Ä–æ–≤–æ—Ü–∏—Ä–æ–≤–∞–ª–∞"</em>.</p>
    </div>

    <div class="profile-section">
        <h3 class="section-title">üíï –ò–Ω—Ç–∏–º–Ω–æ—Å—Ç—å –∏ –≥—Ä–∞–Ω–∏—Ü—ã</h3>
        <p>–í –∏–Ω—Ç–∏–º–Ω–æ–π —Å—Ñ–µ—Ä–µ (–±–ª–æ–∫ "–ò–Ω—Ç–∏–º–Ω–æ—Å—Ç—å": <strong>{block_scores.get('intimacy', 0)}/10</strong>) –∏–Ω–æ–≥–¥–∞ –ø—Ä–æ—è–≤–ª—è–µ—Ç –Ω–µ—á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—è–º –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é –ø–∞—Ä—Ç–Ω–µ—Ä–∞. –ú–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–ª–∏–∑–æ—Å—Ç—å –∫–∞–∫ —Å–ø–æ—Å–æ–± "–ø–æ–º–∏—Ä–∏—Ç—å—Å—è" –ø–æ—Å–ª–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤.</p>
        
        <p>–ù–µ –≤—Å–µ–≥–¥–∞ —É–≤–∞–∂–∞–µ—Ç –æ—Ç–∫–∞–∑—ã, —Å–∫–ª–æ–Ω–µ–Ω –∫ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–º—É –¥–∞–≤–ª–µ–Ω–∏—é: <em>"–ï—Å–ª–∏ —Ç—ã –º–µ–Ω—è –ª—é–±–∏—à—å..."</em>, <em>"–ú—ã –¥–∞–≤–Ω–æ –Ω–µ –±—ã–ª–∏ –±–ª–∏–∑–∫–∏"</em>. –ì—Ä–∞–Ω–∏—Ü—ã –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∫–∞–∫ –æ—Ç–≤–µ—Ä–∂–µ–Ω–∏–µ —Å–µ–±—è –ª–∏—á–Ω–æ.</p>
    </div>

    <div class="profile-section">
        <h3 class="section-title">–°–æ—Ü–∏–∞–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ</h3>
        <p>–í –æ–±—â–µ—Å—Ç–≤–µ —Å—Ç–∞—Ä–∞–µ—Ç—Å—è –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —Ö–æ—Ä–æ—à–µ–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ, –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±–∞—è—Ç–µ–ª—å–Ω—ã–º –∏ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–º. –û–¥–Ω–∞–∫–æ –Ω–∞–µ–¥–∏–Ω–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ —á–∞—Å—Ç–æ –∫–∞—Ä–¥–∏–Ω–∞–ª—å–Ω–æ –º–µ–Ω—è–µ—Ç—Å—è. –≠—Ç–∞ –¥–≤–æ–π—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–µ—Ç –ø—É—Ç–∞–Ω–∏—Ü—É –∏ —Å–æ–º–Ω–µ–Ω–∏—è —É –ø–∞—Ä—Ç–Ω–µ—Ä–∞.</p>
    </div>

    <div class="profile-section warning-section">
        <h3 class="section-title">–ü—Ä–æ–≥–Ω–æ–∑ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</h3>
        <p>–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞ <strong>{risk_score}%</strong> —Ç—Ä–µ–±—É–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–µ—Ä –ø–æ –∏–∑–º–µ–Ω–µ–Ω–∏—é —Å–∏—Ç—É–∞—Ü–∏–∏. –ü—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ä–∞–±–æ—Ç—ã –Ω–∞–¥ –ø—Ä–æ–±–ª–µ–º–∞–º–∏ –≤—ã—Å–æ–∫–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —ç—Å–∫–∞–ª–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –∏ —É—Ö—É–¥—à–µ–Ω–∏—è –æ—Ç–Ω–æ—à–µ–Ω–∏–π.</p>
        
        <div class="recommendations">
            <h4>üìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</h4>
            <ul class="recommendation-list">
                <li>–ü–∞—Ä–Ω–∞—è —Ç–µ—Ä–∞–ø–∏—è —Å –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º</li>
                <li>–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ç–∫–∏—Ö –≥—Ä–∞–Ω–∏—Ü –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö</li>
                <li>–†–∞–∑–≤–∏—Ç–∏–µ –Ω–∞–≤—ã–∫–æ–≤ –∑–¥–æ—Ä–æ–≤–æ–π –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏</li>
                <li>–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –Ω–∞–¥ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π —Ä–µ–≥—É–ª—è—Ü–∏–µ–π</li>
            </ul>
        </div>
        
        <p><strong>–í–∞–∂–Ω–æ:</strong> –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω—ã –ø—Ä–∏ —É—Å–ª–æ–≤–∏–∏ –ø—Ä–∏–∑–Ω–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º –∏ –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã –æ–±–µ–∏—Ö —Å—Ç–æ—Ä–æ–Ω. –í–∞–∂–Ω–æ –Ω–µ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–µ–≤–æ–∂–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –∏ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∑–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–æ–º–æ—â—å—é.</p>
    </div>
</div>"""
        return analysis
        
    def _generate_low_risk_analysis(
        self, 
        partner_name: str, 
        risk_score: float, 
        block_scores: Dict[str, float], 
        analysis_data: Dict[str, Any]
    ) -> str:
        """Generate analysis for low-risk cases (<40%)"""
        
        analysis = f"""
<div class="detailed-profile positive-profile">
    <div class="profile-section">
        <h3 class="section-title">–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –∑—Ä–µ–ª–æ–π –ª–∏—á–Ω–æ—Å—Ç–∏</h3>
        <p>–ê–Ω–∞–ª–∏–∑ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–¥–æ—Ä–æ–≤—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ–≤–µ–¥–µ–Ω–∏—è —Å –≤—ã—Å–æ–∫–∏–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–æ–º –¥–ª—è –≥–∞—Ä–º–æ–Ω–∏—á–Ω—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π. –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞ <strong>{risk_score}%</strong> —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –∑—Ä–µ–ª—É—é –ª–∏—á–Ω–æ—Å—Ç—å —Å —Ä–∞–∑–≤–∏—Ç—ã–º–∏ –Ω–∞–≤—ã–∫–∞–º–∏ –º–µ–∂–ª–∏—á–Ω–æ—Å—Ç–Ω–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.</p>
        
        <p><strong>{partner_name}</strong> –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –ø—Ä–æ—è–≤–ª–µ–Ω–∏—è —ç–º–ø–∞—Ç–∏–∏, —É–≤–∞–∂–µ–Ω–∏—è –∫ –≥—Ä–∞–Ω–∏—Ü–∞–º –∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∫ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–æ–º—É –æ–±—â–µ–Ω–∏—é. –≠—Ç–æ —Å–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤—É –¥–ª—è –∑–¥–æ—Ä–æ–≤—ã—Ö, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π.</p>
    </div>

    <div class="profile-section">
        <h3 class="section-title">üåü –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –∏ —ç–º–ø–∞—Ç–∏—è</h3>
        <p>–ü–∞—Ä—Ç–Ω–µ—Ä –ø—Ä–æ—è–≤–ª—è–µ—Ç –≤—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞, —Å–ø–æ—Å–æ–±–µ–Ω –ø–æ–Ω–∏–º–∞—Ç—å –∏ —É—á–∏—Ç—ã–≤–∞—Ç—å —á—É–≤—Å—Ç–≤–∞ –¥—Ä—É–≥–∏—Ö. –í —Ä–∞–∑–≥–æ–≤–æ—Ä–∞—Ö –∞–∫—Ç–∏–≤–Ω–æ —Å–ª—É—à–∞–µ—Ç, –∑–∞–¥–∞–µ—Ç —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã, –ø—Ä–æ—è–≤–ª—è–µ—Ç –∏—Å–∫—Ä–µ–Ω–Ω–∏–π –∏–Ω—Ç–µ—Ä–µ—Å –∫ –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è–º –ø–∞—Ä—Ç–Ω–µ—Ä–∞.</p>
        
        <p>–•–∞—Ä–∞–∫—Ç–µ—Ä–Ω–∞ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —Ä–∞–∑–¥–µ–ª—è—Ç—å —Ä–∞–¥–æ—Å—Ç—å –∑–∞ —É—Å–ø–µ—Ö–∏ –±–ª–∏–∑–∫–∏—Ö –±–µ–∑ –∑–∞–≤–∏—Å—Ç–∏ –∏–ª–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏–∏. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –Ω–∞—á–∏–Ω–∞–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–∏ —Ç—Ä–µ–±—É—é—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ—Ç–¥–∞–ª–µ–Ω–∏—è –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–æ–≤.</p>
    </div>

    <div class="profile-section">
        <h3 class="section-title">ü§ù –ó–¥–æ—Ä–æ–≤—ã–µ –∫–æ–º–º—É–Ω–∏–∫–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞–≤—ã–∫–∏</h3>
        <p>–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–∑–≤–∏—Ç—ã–µ –Ω–∞–≤—ã–∫–∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è. –ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã —Ä–µ—à–∞–µ—Ç —á–µ—Ä–µ–∑ –æ—Ç–∫—Ä—ã—Ç—ã–π –¥–∏–∞–ª–æ–≥, –∏–∑–±–µ–≥–∞—è –ø–æ–≤—ã—à–µ–Ω–∏—è –≥–æ–ª–æ—Å–∞ –∏–ª–∏ –ª–∏—á–Ω—ã—Ö –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–π. –°–ø–æ—Å–æ–±–µ–Ω –ø—Ä–∏–∑–Ω–∞–≤–∞—Ç—å –æ—à–∏–±–∫–∏ –∏ –∏—Å–∫—Ä–µ–Ω–Ω–µ –∏–∑–≤–∏–Ω—è—Ç—å—Å—è.</p>
        
        <p>–í —Å–ø–æ—Ä–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö —Å—Ç—Ä–µ–º–∏—Ç—Å—è –ø–æ–Ω—è—Ç—å —Ç–æ—á–∫—É –∑—Ä–µ–Ω–∏—è –¥—Ä—É–≥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã, –∏—â–µ—Ç –∫–æ–º–ø—Ä–æ–º–∏—Å—Å—ã. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–æ–ª—á–∞–Ω–∏–µ –∏–ª–∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–∏ –∫–∞–∫ —Å–ø–æ—Å–æ–±—ã –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞.</p>
    </div>

    <div class="profile-section">
        <h3 class="section-title">üéØ –£–≤–∞–∂–µ–Ω–∏–µ –∫ –∞–≤—Ç–æ–Ω–æ–º–∏–∏ –∏ –≥—Ä–∞–Ω–∏—Ü–∞–º</h3>
        <p>–ë–ª–æ–∫ "–ö–æ–Ω—Ç—Ä–æ–ª—å" –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–¥–æ—Ä–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å <strong>{block_scores.get('control', 0)}/10</strong>, —á—Ç–æ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —É–≤–∞–∂–µ–Ω–∏–µ –∫ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏, –Ω–µ —Ä–µ–≤–Ω—É–µ—Ç –∫ –¥—Ä—É–∑—å—è–º –∏ –∫–æ–ª–ª–µ–≥–∞–º.</p>
        
        <p>–í —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö –ø—Ä–æ—è–≤–ª—è–µ—Ç —Ä–∞–∑—É–º–Ω–æ—Å—Ç—å: –æ–±—Å—É–∂–¥–∞–µ—Ç –∫—Ä—É–ø–Ω—ã–µ —Ç—Ä–∞—Ç—ã, –Ω–æ –Ω–µ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç –∫–∞–∂–¥—É—é –ø–æ–∫—É–ø–∫—É. –£–≤–∞–∂–∞–µ—Ç –ø—Ä–∞–≤–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –Ω–∞ –ª–∏—á–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –∏ —Ö–æ–±–±–∏.</p>
    </div>

    <div class="profile-section">
        <h3 class="section-title">üîÑ –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤</h3>
        <p>–ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –≥–∞–∑–ª–∞–π—Ç–∏–Ω–≥–∞ (<strong>{block_scores.get('gaslighting', 0)}/10</strong>) –≥–æ–≤–æ—Ä–∏—Ç –æ —á–µ—Å—Ç–Ω–æ—Å—Ç–∏ –≤ –æ–±—â–µ–Ω–∏–∏. –ù–µ –ø—ã—Ç–∞–µ—Ç—Å—è –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –∏–ª–∏ —Å–≤–µ—Å—Ç–∏ –≤—Å–µ –∫ "–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –ø–æ–Ω–∏–º–∞–Ω–∏—é".</p>
        
        <p>–ü–æ—Å–ª–µ —Å—Å–æ—Ä –≥–æ—Ç–æ–≤ –æ–±—Å—É–∂–¥–∞—Ç—å –ø—Ä–æ–∏–∑–æ—à–µ–¥—à–µ–µ, –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏—á–∏–Ω—ã –∏ –∏—Å–∫–∞—Ç—å —Å–ø–æ—Å–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è. –ë–µ—Ä–µ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ —Å–≤–æ–∏ —Å–ª–æ–≤–∞ –∏ –¥–µ–π—Å—Ç–≤–∏—è.</p>
    </div>

    <div class="profile-section">
        <h3 class="section-title">üíö –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞</h3>
        <p>–ë–ª–æ–∫ "–≠–º–æ—Ü–∏—è" (<strong>{block_scores.get('emotion', 0)}/10</strong>) –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–∑–≤–∏—Ç—ã–µ –Ω–∞–≤—ã–∫–∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π —Ä–µ–≥—É–ª—è—Ü–∏–∏. –†–µ–∞–∫—Ü–∏–∏ –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω—ã —Å–∏—Ç—É–∞—Ü–∏–∏, —Å–ø–æ—Å–æ–±–µ–Ω —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ –≤ —Å—Ç—Ä–µ—Å—Å–æ–≤—ã—Ö –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞—Ö.</p>
        
        <p>–°–ª—É–∂–∏—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –æ–ø–æ—Ä–æ–π –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –≤ —Ç—Ä—É–¥–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã. –£–º–µ–µ—Ç –≤—ã—Å–ª—É—à–∞—Ç—å, –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å, –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫—É—é –ø–æ–º–æ—â—å –±–µ–∑ –ø–æ–ø—ã—Ç–æ–∫ "—Ä–µ—à–∏—Ç—å –≤—Å–µ –∑–∞ –¥—Ä—É–≥–æ–≥–æ".</p>
    </div>

    <div class="profile-section">
        <h3 class="section-title">üíï –ó–¥–æ—Ä–æ–≤–∞—è –∏–Ω—Ç–∏–º–Ω–æ—Å—Ç—å</h3>
        <p>–í –∏–Ω—Ç–∏–º–Ω–æ–π —Å—Ñ–µ—Ä–µ (–±–ª–æ–∫ "–ò–Ω—Ç–∏–º–Ω–æ—Å—Ç—å": <strong>{block_scores.get('intimacy', 0)}/10</strong>) –ø—Ä–æ—è–≤–ª—è–µ—Ç —á—É—Ç–∫–æ—Å—Ç—å –∫ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—è–º –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é –ø–∞—Ä—Ç–Ω–µ—Ä–∞. –ë–ª–∏–∑–æ—Å—Ç—å —Å—Ç—Ä–æ–∏—Ç—Å—è –Ω–∞ –≤–∑–∞–∏–º–Ω–æ–º –∂–µ–ª–∞–Ω–∏–∏ –∏ —É–≤–∞–∂–µ–Ω–∏–∏.</p>
        
        <p>–ù–∏–∫–æ–≥–¥–∞ –Ω–µ –ø—Ä–∏–Ω—É–∂–¥–∞–µ—Ç –∫ –∏–Ω—Ç–∏–º–Ω–æ—Å—Ç–∏, —É–≤–∞–∂–∞–µ—Ç –æ—Ç–∫–∞–∑—ã. –†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –±–ª–∏–∑–æ—Å—Ç—å –∫–∞–∫ —Å–ø–æ—Å–æ–± –≤—ã—Ä–∞–∂–µ–Ω–∏—è –ª—é–±–≤–∏ –∏ —É–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Å–≤—è–∑–∏, –∞ –Ω–µ –∫–∞–∫ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—å –∏–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è.</p>
    </div>

    <div class="profile-section">
        <h3 class="section-title">–ò—Å–∫—Ä–µ–Ω–Ω–æ—Å—Ç—å –∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å</h3>
        <p>–ü–æ–≤–µ–¥–µ–Ω–∏–µ –≤ –æ–±—â–µ—Å—Ç–≤–µ –∏ –Ω–∞–µ–¥–∏–Ω–µ –æ—Å—Ç–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–º. –ù–µ –Ω–∞–¥–µ–≤–∞–µ—Ç "–º–∞—Å–∫–∏" –¥–ª—è –æ–∫—Ä—É–∂–∞—é—â–∏—Ö, –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∏—Å–∫—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö. –≠—Ç–æ —Å–æ–∑–¥–∞–µ—Ç –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –¥–æ–≤–µ—Ä–∏—è –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.</p>
        
        <p>–ì–æ—Ç–æ–≤ –æ—Ç–∫—Ä—ã—Ç–æ –æ–±—Å—É–∂–¥–∞—Ç—å –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å –±–ª–∏–∑–∫–∏–º–∏, –Ω–µ —Å–∫—Ä—ã–≤–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º –ø–æ–¥ –≤–∏–¥–æ–º "–≤—Å–µ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ". –ü—Ä–∏ —ç—Ç–æ–º —É–≤–∞–∂–∞–µ—Ç –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å –ø–∞—Ä—ã –∏ –Ω–µ –≤—ã–Ω–æ—Å–∏—Ç –ª–∏—á–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ –ø—É–±–ª–∏—á–Ω–æ–µ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ.</p>
    </div>

    <div class="profile-section positive-section">
        <h3 class="section-title">–ü—Ä–æ–≥–Ω–æ–∑ –∏ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã</h3>
        <p>–ü—Ä–∏ —É—Ä–æ–≤–Ω–µ —Ä–∏—Å–∫–∞ <strong>{risk_score}%</strong> –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –æ—Ç–Ω–æ—à–µ–Ω–∏–π –∫—Ä–∞–π–Ω–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–π. –¢–∞–∫–∞—è –ª–∏—á–Ω–æ—Å—Ç—å —Å–ø–æ—Å–æ–±–Ω–∞ —Å–æ–∑–¥–∞—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å –≤—ã—Å–æ–∫–∏–º —É—Ä–æ–≤–Ω–µ–º —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è –æ–±–µ–∏—Ö —Å—Ç–æ—Ä–æ–Ω.</p>
        
        <div class="positive-recommendations">
            <h4>üå± –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —É–∫—Ä–µ–ø–ª–µ–Ω–∏—è –æ—Ç–Ω–æ—à–µ–Ω–∏–π:</h4>
            <ul class="positive-list">
                <li>–ü—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ä–∞–∑–≤–∏–≤–∞—Ç—å –Ω–∞–≤—ã–∫–∏ –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –æ–±—â–µ–Ω–∏—è</li>
                <li>–ü—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –∑–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞</li>
                <li>–°–æ–≤–º–µ—Å—Ç–Ω–æ –∏–∑—É—á–∞—Ç—å –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—É –ø–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏–π</li>
                <li>–†–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–æ–≤–æ–¥–∏—Ç—å –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω—ã—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤</li>
            </ul>
        </div>
        
        <p><strong>–í—ã–≤–æ–¥—ã:</strong> —Ç–∞–∫–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å–ª—É–∂–∞—Ç –ø—Ä–∏–º–µ—Ä–æ–º –∑–¥–æ—Ä–æ–≤–æ–π –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ –∏ –º–æ–≥—É—Ç —Å—Ç–∞—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º —Ä–æ—Å—Ç–∞ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è –æ–±–µ–∏—Ö —Å—Ç–æ—Ä–æ–Ω –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ –¥–æ–ª–≥–∏—Ö –ª–µ—Ç.</p>
    </div>
</div>"""
        return analysis
    
    def _generate_personality_characteristics(self, risk_score: float) -> str:
        """Generate personality characteristics HTML"""
        if risk_score >= 70:
            characteristics = [
                "–ì—Ä–∞–Ω–¥–∏–æ–∑–Ω–æ–µ —Å–∞–º–æ–≤–æ—Å–ø—Ä–∏—è—Ç–∏–µ –∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–º –≤–æ—Å—Ö–∏—â–µ–Ω–∏–∏",
                "–ü–æ–ª–Ω–æ–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —ç–º–ø–∞—Ç–∏–∏ –∫ –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è–º –ø–∞—Ä—Ç–Ω–µ—Ä–∞",
                "–°–∏—Å—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –º–∞–Ω–∏–ø—É–ª—è—Ç–∏–≤–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–π",
                "–ö–∞—Ç–µ–≥–æ—Ä–∏—á–µ—Å–∫–∞—è –Ω–µ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∫—Ä–∏—Ç–∏–∫—É –∏ –ø—Ä–∏–∑–Ω–∞–≤–∞—Ç—å –æ—à–∏–±–∫–∏",
                "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Å –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–º–∏ –≤—Å–ø—ã—à–∫–∞–º–∏",
                "–ü–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤ –∫–æ–Ω—Ç—Ä–æ–ª–µ –Ω–∞–¥ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º"
            ]
        elif risk_score >= 50:
            characteristics = [
                "–ü–æ–≤—ã—à–µ–Ω–Ω–æ–µ —Å–∞–º–æ–≤–æ—Å–ø—Ä–∏—è—Ç–∏–µ –∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤ –æ–¥–æ–±—Ä–µ–Ω–∏–∏",
                "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è —ç–º–ø–∞—Ç–∏—è –∫ –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è–º –ø–∞—Ä—Ç–Ω–µ—Ä–∞",
                "–°–∫–ª–æ–Ω–Ω–æ—Å—Ç—å –∫ –º–∞–Ω–∏–ø—É–ª—è—Ç–∏–≤–Ω–æ–º—É –ø–æ–≤–µ–¥–µ–Ω–∏—é",
                "–°–ª–æ–∂–Ω–æ—Å—Ç–∏ —Å –ø—Ä–∏–Ω—è—Ç–∏–µ–º –∫—Ä–∏—Ç–∏–∫–∏",
                "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å",
                "–ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—é—â–∏–µ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏"
            ]
        elif risk_score >= 25:
            characteristics = [
                "–†–∞–∑–≤–∏—Ç—ã–µ –Ω–∞–≤—ã–∫–∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π —Ä–µ–≥—É–ª—è—Ü–∏–∏",
                "–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∫ —ç–º–ø–∞—Ç–∏–∏ –∏ –ø–æ–Ω–∏–º–∞–Ω–∏—é",
                "–ó–¥–æ—Ä–æ–≤—ã–µ —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ —Å—Ç—Ä–µ—Å—Å–æ–≤—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏",
                "–ù–∞–≤—ã–∫–∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–æ–π –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏"
            ]
        elif risk_score >= 15:
            characteristics = [
                "–í—ã—Å–æ–∫–∏–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç",
                "–ì–ª—É–±–æ–∫–∞—è —ç–º–ø–∞—Ç–∏—è –∫ –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è–º –ø–∞—Ä—Ç–Ω–µ—Ä–∞",
                "–°—Ç—Ä–µ—Å—Å–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å",
                "–û—Ç–∫—Ä—ã—Ç–æ—Å—Ç—å –∏ —á–µ—Å—Ç–Ω–æ—Å—Ç—å –≤ –æ–±—â–µ–Ω–∏–∏",
                "–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∫ –∫–æ–º–ø—Ä–æ–º–∏—Å—Å–∞–º –∏ –≤–∑–∞–∏–º–æ–ø–æ–Ω–∏–º–∞–Ω–∏—é",
                "–£–≤–∞–∂–µ–Ω–∏–µ –∫ –ª–∏—á–Ω—ã–º –≥—Ä–∞–Ω–∏—Ü–∞–º –∏ –∞–≤—Ç–æ–Ω–æ–º–∏–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞"
            ]
        else:
            characteristics = [
                "–ò—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω—ã–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç",
                "–ë–µ–∑—É—Å–ª–æ–≤–Ω–∞—è —ç–º–ø–∞—Ç–∏—è –∏ –ø–æ–Ω–∏–º–∞–Ω–∏–µ",
                "–í—ã–¥–∞—é—â–∞—è—Å—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å",
                "–ú–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ –≤ –∑–¥–æ—Ä–æ–≤–æ–π –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏",
                "–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∫ –≥–ª—É–±–æ–∫–æ–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –±–ª–∏–∑–æ—Å—Ç–∏",
                "–ê–±—Å–æ–ª—é—Ç–Ω–æ–µ —É–≤–∞–∂–µ–Ω–∏–µ –∫ –ø–∞—Ä—Ç–Ω–µ—Ä—É –∫–∞–∫ –∫ –ª–∏—á–Ω–æ—Å—Ç–∏"
            ]
        
        return '\n'.join([f'<li>{char}</li>' for char in characteristics])
    
    def _generate_behavior_patterns(self, risk_score: float) -> str:
        """Generate behavior patterns based on risk score"""
        patterns = [
            f"–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å - {min(100, int(risk_score * 1.2))}%",
            f"–ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—é—â–µ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ - {min(100, int(risk_score * 1.1))}%",
            f"–ú–∞–Ω–∏–ø—É–ª—è—Ç–∏–≤–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏ - {min(100, int(risk_score * 0.9))}%",
            f"–ù–∞—Ä—É—à–µ–Ω–∏–µ –≥—Ä–∞–Ω–∏—Ü - {min(100, int(risk_score * 1.0))}%"
        ]
        
        return "\n".join(patterns)

    def _get_personality_traits(self, personality_type: str, risk_score: float) -> list:
        """Generate personality traits based on type and risk score"""
        base_traits = {
            '–ù–∞—Ä—Ü–∏—Å—Å–∏—á–µ—Å–∫–∞—è –ª–∏—á–Ω–æ—Å—Ç—å': [
                '–ì—Ä–∞–Ω–¥–∏–æ–∑–Ω–æ–µ —Å–∞–º–æ–º–Ω–µ–Ω–∏–µ',
                '–ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤ –≤–æ—Å—Ö–∏—â–µ–Ω–∏–∏', 
                '–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —ç–º–ø–∞—Ç–∏–∏',
                '–≠–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—è –æ—Ç–Ω–æ—à–µ–Ω–∏–π'
            ],
            '–ü–æ–≥—Ä–∞–Ω–∏—á–Ω–∞—è –ª–∏—á–Ω–æ—Å—Ç—å': [
                '–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å',
                '–°—Ç—Ä–∞—Ö –ø–æ–∫–∏–Ω—É—Ç–æ—Å—Ç–∏',
                '–ò–º–ø—É–ª—å—Å–∏–≤–Ω–æ—Å—Ç—å',
                '–ù–∞—Ä—É—à–µ–Ω–Ω–∞—è —Å–∞–º–æ–∏–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç—å'
            ],
            '–ê–Ω—Ç–∏—Å–æ—Ü–∏–∞–ª—å–Ω–∞—è –ª–∏—á–Ω–æ—Å—Ç—å': [
                '–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∞–≤ –¥—Ä—É–≥–∏—Ö',
                '–û–±–º–∞–Ω –∏ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–∏',
                '–ò–º–ø—É–ª—å—Å–∏–≤–Ω–æ—Å—Ç—å',
                '–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ä–∞—Å–∫–∞—è–Ω–∏—è'
            ],
            '–¢–æ–∫—Å–∏—á–Ω–∞—è –ª–∏—á–Ω–æ—Å—Ç—å': [
                '–ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—é—â–µ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ',
                '–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–∞—á–µ–ª–∏',
                '–ì–∞–∑–ª–∞–π—Ç–∏–Ω–≥',
                '–ù–∞—Ä—É—à–µ–Ω–∏–µ –≥—Ä–∞–Ω–∏—Ü'
            ]
        }
        
        # Get base traits for personality type
        traits = base_traits.get(personality_type, base_traits['–¢–æ–∫—Å–∏—á–Ω–∞—è –ª–∏—á–Ω–æ—Å—Ç—å'])
        
        # Add risk-specific traits
        if risk_score >= 70:
            traits.extend(['–í—ã—Å–æ–∫–∞—è –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ—Å—Ç—å', '–î–µ—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã'])
        elif risk_score >= 40:
            traits.extend(['–ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã', '–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å'])
            
        return traits[:6]  # Limit to 6 traits

    def _get_personality_description(self, personality_type: str, risk_score: float) -> str:
        """Generate detailed personality description"""
        descriptions = {
            '–ù–∞—Ä—Ü–∏—Å—Å–∏—á–µ—Å–∫–∞—è –ª–∏—á–Ω–æ—Å—Ç—å': f"–õ–∏—á–Ω–æ—Å—Ç—å —Å –≤—ã—Ä–∞–∂–µ–Ω–Ω—ã–º–∏ –Ω–∞—Ä—Ü–∏—Å—Å–∏—á–µ—Å–∫–∏–º–∏ —á–µ—Ä—Ç–∞–º–∏ (—Ä–∏—Å–∫ {risk_score:.0f}%). –•–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–µ—Ç—Å—è –≥—Ä–∞–Ω–¥–∏–æ–∑–Ω—ã–º —Å–∞–º–æ–º–Ω–µ–Ω–∏–µ–º, –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å—é –≤ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–º –≤–æ—Å—Ö–∏—â–µ–Ω–∏–∏ –∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ–º —ç–º–ø–∞—Ç–∏–∏ –∫ –ø–∞—Ä—Ç–Ω–µ—Ä—É.",
            '–ü–æ–≥—Ä–∞–Ω–∏—á–Ω–∞—è –ª–∏—á–Ω–æ—Å—Ç—å': f"–ü–æ–≥—Ä–∞–Ω–∏—á–Ω–æ–µ —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ª–∏—á–Ω–æ—Å—Ç–∏ (—Ä–∏—Å–∫ {risk_score:.0f}%). –û—Ç–ª–∏—á–∞–µ—Ç—Å—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å—é, —Å—Ç—Ä–∞—Ö–æ–º –ø–æ–∫–∏–Ω—É—Ç–æ—Å—Ç–∏ –∏ –∏–º–ø—É–ª—å—Å–∏–≤–Ω—ã–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ–º –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö.",
            '–ê–Ω—Ç–∏—Å–æ—Ü–∏–∞–ª—å–Ω–∞—è –ª–∏—á–Ω–æ—Å—Ç—å': f"–ê–Ω—Ç–∏—Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —á–µ—Ä—Ç—ã –ª–∏—á–Ω–æ—Å—Ç–∏ (—Ä–∏—Å–∫ {risk_score:.0f}%). –ü—Ä–æ—è–≤–ª—è–µ—Ç—Å—è –≤ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–∞–≤ –ø–∞—Ä—Ç–Ω–µ—Ä–∞, –æ–±–º–∞–Ω–µ, –º–∞–Ω–∏–ø—É–ª—è—Ü–∏—è—Ö –∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ä–∞—Å–∫–∞—è–Ω–∏—è.",
            '–¢–æ–∫—Å–∏—á–Ω–∞—è –ª–∏—á–Ω–æ—Å—Ç—å': f"–¢–æ–∫—Å–∏—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ–≤–µ–¥–µ–Ω–∏—è (—Ä–∏—Å–∫ {risk_score:.0f}%). –í–∫–ª—é—á–∞—é—Ç –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—é—â–µ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ, —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–∞—á–µ–ª–∏ –∏ —Å–∏—Å—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –≥—Ä–∞–Ω–∏—Ü –ø–∞—Ä—Ç–Ω–µ—Ä–∞."
        }
        
        return descriptions.get(personality_type, descriptions['–¢–æ–∫—Å–∏—á–Ω–∞—è –ª–∏—á–Ω–æ—Å—Ç—å'])

    def _get_risk_detailed_description(self, risk_score: float) -> str:
        """Generate detailed risk description"""
        if risk_score >= 70:
            return f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç–∏ ({risk_score:.0f}%). –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Å–µ—Ä—å–µ–∑–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∞–±—å—é–∑–∞, –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—é—â–µ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è –∏ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–π. –û—Ç–Ω–æ—à–µ–Ω–∏—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—É—é —É–≥—Ä–æ–∑—É –¥–ª—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –∏ –≤–æ–∑–º–æ–∂–Ω–æ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ –±–ª–∞–≥–æ–ø–æ–ª—É—á–∏—è."
        elif risk_score >= 40:
            return f"–í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ ({risk_score:.0f}%). –í—ã—è–≤–ª–µ–Ω—ã –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫—Ä–∞—Å–Ω—ã–µ —Ñ–ª–∞–≥–∏ —Ç–æ–∫—Å–∏—á–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è, –≤–∫–ª—é—á–∞—è –Ω–∞—Ä—É—à–µ–Ω–∏–µ –≥—Ä–∞–Ω–∏—Ü, —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∏ —ç–ª–µ–º–µ–Ω—Ç—ã –∫–æ–Ω—Ç—Ä–æ–ª—è."
        else:
            return f"–£–º–µ—Ä–µ–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞ ({risk_score:.0f}%). –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã –≤ –ø–æ–≤–µ–¥–µ–Ω–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è, –Ω–æ –≤ —Ü–µ–ª–æ–º –æ—Ç–Ω–æ—à–µ–Ω–∏—è –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Ä–∞–º–∫–∞—Ö."

    def _get_risk_recommendations(self, risk_score: float) -> str:
        """Generate risk-specific recommendations"""
        if risk_score >= 70:
            return "–ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –ø–ª–∞–Ω –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —á–µ—Ç–∫–∏–µ –≥—Ä–∞–Ω–∏—Ü—ã –∏ –ø–æ–¥–¥–µ—Ä–∂–∫—É –±–ª–∏–∑–∫–∏—Ö."
        elif risk_score >= 40:
            return "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ø—Å–∏—Ö–æ–ª–æ–≥—É –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ—Ç–Ω–æ—à–µ–Ω–∏—è–º–∏. –£–∫—Ä–µ–ø–∏—Ç–µ –ª–∏—á–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã. –†–∞–∑–≤–∏–≤–∞–π—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è."
        else:
            return "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ –¥–∏–Ω–∞–º–∏–∫–æ–π –æ—Ç–Ω–æ—à–µ–Ω–∏–π. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∑–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–µ–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞."

    def _get_risk_level(self, risk_score: float) -> str:
        """Get risk level string"""
        if risk_score >= 70:
            return "critical"
        elif risk_score >= 40:
            return "high"
        elif risk_score >= 20:
            return "medium"
        else:
            return "low"
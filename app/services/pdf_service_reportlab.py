"""PDF Report Generation Service using ReportLab"""

import os
import io
import base64
from datetime import datetime
from typing import Dict, Any, Optional
from pathlib import Path

import matplotlib
matplotlib.use('Agg')  # Use non-interactive backend
import matplotlib.pyplot as plt
import matplotlib.patches as patches
from matplotlib.patches import Wedge
import numpy as np

from reportlab.lib.pagesizes import A4, letter
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch, cm
from reportlab.lib.colors import Color, HexColor
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, PageBreak, Table, TableStyle, Image
from reportlab.lib.enums import TA_CENTER, TA_LEFT, TA_RIGHT, TA_JUSTIFY
from reportlab.pdfgen import canvas
from reportlab.lib import colors

from app.core.logging import logger
from app.utils.exceptions import PsychoDetectiveException


class PDFReportService:
    """Service for generating PDF reports from partner analysis using ReportLab"""
    
    def __init__(self):
        self.output_dir = Path("reports")
        self.charts_dir = Path("temp_charts")
        
        # Create directories if they don't exist
        self.output_dir.mkdir(parents=True, exist_ok=True)
        self.charts_dir.mkdir(parents=True, exist_ok=True)
        
        # Setup styles
        self.styles = getSampleStyleSheet()
        self._setup_custom_styles()
        
    def _setup_custom_styles(self):
        """Setup custom paragraph styles"""
        # Title style
        self.styles.add(ParagraphStyle(
            name='CustomTitle',
            parent=self.styles['Title'],
            fontSize=24,
            spaceAfter=30,
            textColor=HexColor('#667eea'),
            alignment=TA_CENTER
        ))
        
        # Subtitle style
        self.styles.add(ParagraphStyle(
            name='CustomSubtitle',
            parent=self.styles['Normal'],
            fontSize=16,
            spaceAfter=20,
            textColor=HexColor('#764ba2'),
            alignment=TA_CENTER
        ))
        
        # Section header style
        self.styles.add(ParagraphStyle(
            name='SectionHeader',
            parent=self.styles['Heading2'],
            fontSize=16,
            spaceBefore=20,
            spaceAfter=10,
            textColor=HexColor('#667eea'),
            borderWidth=1,
            borderColor=HexColor('#667eea'),
            borderPadding=5
        ))
        
        # Risk score style
        self.styles.add(ParagraphStyle(
            name='RiskScore',
            parent=self.styles['Normal'],
            fontSize=48,
            alignment=TA_CENTER,
            textColor=HexColor('#dc3545'),
            spaceBefore=20,
            spaceAfter=20
        ))
        
        # Warning box style
        self.styles.add(ParagraphStyle(
            name='WarningBox',
            parent=self.styles['Normal'],
            fontSize=12,
            backColor=HexColor('#fff5f5'),
            borderWidth=1,
            borderColor=HexColor('#dc3545'),
            borderPadding=10,
            spaceBefore=10,
            spaceAfter=10
        ))
        
    async def generate_partner_report(
        self,
        analysis_data: Dict[str, Any],
        user_id: int,
        partner_name: str = "–ø–∞—Ä—Ç–Ω–µ—Ä"
    ) -> bytes:
        """
        Generate comprehensive PDF report for partner analysis
        
        Args:
            analysis_data: Analysis results from AI service
            user_id: User ID for file naming
            partner_name: Partner's name
            
        Returns:
            PDF bytes
        """
        try:
            logger.info(f"Starting PDF generation for user {user_id}, partner: {partner_name}")
            
            # Generate charts
            charts = await self._generate_charts(analysis_data, user_id)
            
            # Create PDF buffer
            buffer = io.BytesIO()
            
            # Create PDF document
            doc = SimpleDocTemplate(
                buffer,
                pagesize=A4,
                rightMargin=2*cm,
                leftMargin=2*cm,
                topMargin=2*cm,
                bottomMargin=2*cm
            )
            
            # Build document content
            story = []
            
            # Cover page
            story.extend(self._create_cover_page(analysis_data, partner_name))
            story.append(PageBreak())
            
            # Summary page
            story.extend(self._create_summary_page(analysis_data, partner_name))
            story.append(PageBreak())
            
            # Charts page
            story.extend(self._create_charts_page(analysis_data, charts))
            story.append(PageBreak())
            
            # Detailed analysis page
            story.extend(self._create_detailed_analysis_page(analysis_data, partner_name))
            story.append(PageBreak())
            
            # Recommendations page
            story.extend(self._create_recommendations_page(analysis_data, partner_name))
            story.append(PageBreak())
            
            # Methodology page
            story.extend(self._create_methodology_page(analysis_data))
            
            # Build PDF
            doc.build(story)
            
            # Get PDF bytes
            pdf_bytes = buffer.getvalue()
            buffer.close()
            
            # Cleanup temporary files
            self._cleanup_temp_files(user_id)
            
            logger.info(f"PDF generated successfully for user {user_id}, size: {len(pdf_bytes)} bytes")
            return pdf_bytes
            
        except Exception as e:
            logger.error(f"PDF generation failed for user {user_id}: {e}")
            self._cleanup_temp_files(user_id)
            raise PsychoDetectiveException(f"Failed to generate PDF report: {str(e)}")
    
    def _create_cover_page(self, analysis_data: Dict[str, Any], partner_name: str) -> list:
        """Create cover page content"""
        story = []
        
        # Logo/Icon
        story.append(Spacer(1, 1*inch))
        story.append(Paragraph("üîç", self.styles['CustomTitle']))
        
        # Title
        story.append(Paragraph("–ü–°–ò–•–û–õ–û–ì–ò–ß–ï–°–ö–ò–ô –ü–†–û–§–ò–õ–¨ –ü–ê–†–¢–ù–ï–†–ê", self.styles['CustomTitle']))
        story.append(Paragraph("–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ—Ç–æ–¥–æ–≤ –∫—Ä–∏–º–∏–Ω–∞–ª—å–Ω–æ–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏", self.styles['CustomSubtitle']))
        
        story.append(Spacer(1, 0.5*inch))
        
        # Report info
        report_info = f"""
        <para align="center">
        üìÖ <b>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</b> {datetime.now().strftime('%d %B %Y')}<br/>
        ü§ñ <b>–ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω:</b> PsychoDetective AI<br/>
        üìä <b>–ù–∞—É—á–Ω–∞—è –æ—Å–Ω–æ–≤–∞:</b> Dark Triad, DSM-5<br/>
        üÜî <b>ID –æ—Ç—á–µ—Ç–∞:</b> RPT-{datetime.now().strftime('%Y%m%d')}-{hash(partner_name) % 10000:04d}
        </para>
        """
        story.append(Paragraph(report_info, self.styles['Normal']))
        
        story.append(Spacer(1, 1*inch))
        
        # Confidentiality notice
        confidential = """
        <para align="center">
        üîí <b>–ö–û–ù–§–ò–î–ï–ù–¶–ò–ê–õ–¨–ù–´–ô –î–û–ö–£–ú–ï–ù–¢</b><br/>
        –ü—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        </para>
        """
        story.append(Paragraph(confidential, self.styles['Normal']))
        
        return story
    
    def _create_summary_page(self, analysis_data: Dict[str, Any], partner_name: str) -> list:
        """Create summary page content"""
        story = []
        
        # Header
        story.append(Paragraph("üìä –°–í–û–î–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í", self.styles['CustomTitle']))
        
        # Risk score
        risk_score = int(analysis_data.get('overall_risk_score', 0))
        story.append(Paragraph(f"{risk_score}", self.styles['RiskScore']))
        
        # Risk level
        urgency = analysis_data.get('urgency_level', 'LOW')
        risk_badges = {
            'CRITICAL': 'üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –†–ò–°–ö',
            'HIGH': '‚ö†Ô∏è –í–´–°–û–ö–ò–ô –†–ò–°–ö',
            'MEDIUM': 'üü° –°–†–ï–î–ù–ò–ô –†–ò–°–ö',
            'LOW': 'üü¢ –ù–ò–ó–ö–ò–ô –†–ò–°–ö'
        }
        
        risk_text = risk_badges.get(urgency, 'üü° –°–†–ï–î–ù–ò–ô –†–ò–°–ö')
        story.append(Paragraph(f"<para align='center'><b>{risk_text}</b></para>", self.styles['Normal']))
        
        # Description
        if risk_score > 70:
            description = "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Å–µ—Ä—å–µ–∑–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ —Ç–æ–∫—Å–∏—á–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è"
        elif risk_score > 40:
            description = "–í—ã—è–≤–ª–µ–Ω—ã –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ–≤–µ–¥–µ–Ω–∏—è"
        else:
            description = "–ü–æ–≤–µ–¥–µ–Ω–∏–µ –≤ —Ü–µ–ª–æ–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã"
        
        story.append(Paragraph(f"<para align='center'>{description}</para>", self.styles['Normal']))
        story.append(Spacer(1, 0.3*inch))
        
        # Summary table
        summary_data = []
        
        # Personality type
        personality_type = analysis_data.get('personality_type', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')
        summary_data.append(['üë§ –¢–ò–ü –õ–ò–ß–ù–û–°–¢–ò', personality_type])
        
        # Key blocks
        block_scores = analysis_data.get('block_scores', {})
        block_info = {
            'narcissism': 'üß† –ù–∞—Ä—Ü–∏—Å—Å–∏–∑–º',
            'control': 'üéØ –ö–æ–Ω—Ç—Ä–æ–ª—å',
            'gaslighting': 'üîÑ –ì–∞–∑–ª–∞–π—Ç–∏–Ω–≥',
            'emotion': 'üí≠ –≠–º–æ—Ü–∏–∏',
            'intimacy': 'üíï –ò–Ω—Ç–∏–º–Ω–æ—Å—Ç—å',
            'social': 'üë• –°–æ—Ü–∏–∞–ª—å–Ω–æ–µ'
        }
        
        for block_key, score in list(block_scores.items())[:4]:
            if block_key in block_info:
                emoji_name = block_info[block_key]
                level = self._get_score_level(score)
                summary_data.append([emoji_name, f"{score:.1f}/10 ({level})"])
        
        # Red flags
        red_flags = analysis_data.get('red_flags', [])
        if red_flags:
            summary_data.append(['‚ö†Ô∏è –ì–õ–ê–í–ù–´–ï –†–ò–°–ö–ò', '\n'.join(red_flags[:3])])
        
        # Population comparison
        population_percentile = min(95, int(risk_score * 0.95)) if risk_score > 50 else int(risk_score * 0.8)
        summary_data.append(['üìä –°–†–ê–í–ù–ï–ù–ò–ï –° –ü–û–ü–£–õ–Ø–¶–ò–ï–ô', f"{population_percentile}% –ª—é–¥–µ–π –º–µ–Ω–µ–µ –ø—Ä–æ–±–ª–µ–º–∞—Ç–∏—á–Ω—ã"])
        
        # Create table
        summary_table = Table(summary_data, colWidths=[4*cm, 10*cm])
        summary_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, -1), colors.white),
            ('TEXTCOLOR', (0, 0), (0, -1), HexColor('#667eea')),
            ('FONTNAME', (0, 0), (0, -1), 'Helvetica-Bold'),
            ('FONTNAME', (1, 0), (1, -1), 'Helvetica'),
            ('FONTSIZE', (0, 0), (-1, -1), 10),
            ('GRID', (0, 0), (-1, -1), 1, colors.lightgrey),
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('VALIGN', (0, 0), (-1, -1), 'TOP'),
            ('ROWBACKGROUNDS', (0, 0), (-1, -1), [colors.white, HexColor('#f8f9fa')])
        ]))
        
        story.append(summary_table)
        
        return story
    
    def _create_charts_page(self, analysis_data: Dict[str, Any], charts: Dict[str, str]) -> list:
        """Create charts page content"""
        story = []
        
        story.append(Paragraph("üìà –î–ï–¢–ê–õ–¨–ù–ê–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ê", self.styles['CustomTitle']))
        
        # Add charts if available
        for chart_name, chart_path in charts.items():
            if chart_path and os.path.exists(chart_path):
                try:
                    # Add chart image
                    img = Image(chart_path, width=5*inch, height=3*inch)
                    story.append(img)
                    story.append(Spacer(1, 0.2*inch))
                except Exception as e:
                    logger.warning(f"Failed to add chart {chart_name}: {e}")
        
        # Block scores table
        block_scores = analysis_data.get('block_scores', {})
        if block_scores:
            story.append(Paragraph("üìä –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –±–ª–æ–∫–∞–º", self.styles['SectionHeader']))
            
            block_data = []
            block_info = {
                'narcissism': ('üß†', '–ù–∞—Ä—Ü–∏—Å—Å–∏–∑–º'),
                'control': ('üéØ', '–ö–æ–Ω—Ç—Ä–æ–ª—å'),
                'gaslighting': ('üîÑ', '–ì–∞–∑–ª–∞–π—Ç–∏–Ω–≥'),
                'emotion': ('üí≠', '–≠–º–æ—Ü–∏–∏'),
                'intimacy': ('üíï', '–ò–Ω—Ç–∏–º–Ω–æ—Å—Ç—å'),
                'social': ('üë•', '–°–æ—Ü–∏–∞–ª—å–Ω–æ–µ')
            }
            
            for block_key, score in block_scores.items():
                if block_key in block_info:
                    emoji, name = block_info[block_key]
                    level = self._get_score_level(score)
                    block_data.append([f"{emoji} {name}", f"{score:.1f}/10", level])
            
            if block_data:
                block_table = Table(block_data, colWidths=[4*cm, 2*cm, 3*cm])
                block_table.setStyle(TableStyle([
                    ('BACKGROUND', (0, 0), (-1, 0), HexColor('#667eea')),
                    ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
                    ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                    ('FONTSIZE', (0, 0), (-1, -1), 10),
                    ('GRID', (0, 0), (-1, -1), 1, colors.lightgrey),
                    ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                    ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
                ]))
                
                story.append(block_table)
        
        return story
    
    def _create_detailed_analysis_page(self, analysis_data: Dict[str, Any], partner_name: str) -> list:
        """Create detailed analysis page content"""
        story = []
        
        story.append(Paragraph("üîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó", self.styles['CustomTitle']))
        
        # Red flags section
        red_flags = analysis_data.get('red_flags', [])
        if red_flags:
            story.append(Paragraph("üö© –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –∫—Ä–∞—Å–Ω—ã–µ —Ñ–ª–∞–≥–∏", self.styles['SectionHeader']))
            
            for i, flag in enumerate(red_flags[:4], 1):
                flag_text = f"<b>–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—é—â–∏–π —Å–∏–≥–Ω–∞–ª {i}:</b> {flag}"
                story.append(Paragraph(flag_text, self.styles['WarningBox']))
            
            story.append(Spacer(1, 0.2*inch))
        
        # Psychological profile
        story.append(Paragraph("üß† –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—Ç—Ä–µ—Ç", self.styles['SectionHeader']))
        
        personality_type = analysis_data.get('personality_type', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')
        story.append(Paragraph(f"<b>–¢–∏–ø –ª–∏—á–Ω–æ—Å—Ç–∏:</b> {personality_type}", self.styles['Normal']))
        
        psychological_profile = analysis_data.get('psychological_profile', '')
        if psychological_profile:
            story.append(Spacer(1, 0.1*inch))
            story.append(Paragraph("<b>–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑:</b>", self.styles['Normal']))
            story.append(Paragraph(psychological_profile, self.styles['Normal']))
        
        return story
    
    def _create_recommendations_page(self, analysis_data: Dict[str, Any], partner_name: str) -> list:
        """Create recommendations page content"""
        story = []
        
        story.append(Paragraph("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ò –ü–õ–ê–ù –î–ï–ô–°–¢–í–ò–ô", self.styles['CustomTitle']))
        
        urgency = analysis_data.get('urgency_level', 'MEDIUM')
        
        # Urgent measures for high-risk cases
        if urgency in ['HIGH', 'CRITICAL']:
            urgent_text = """
            üÜò <b>–ù–ï–û–¢–õ–û–ñ–ù–´–ï –ú–ï–†–´</b><br/>
            –ù–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è <b>–Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ</b> –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            """
            story.append(Paragraph(urgent_text, self.styles['WarningBox']))
            story.append(Spacer(1, 0.2*inch))
        
        # Safety recommendations
        story.append(Paragraph("üõ°Ô∏è –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", self.styles['SectionHeader']))
        
        survival_guide = analysis_data.get('survival_guide', '')
        if survival_guide:
            story.append(Paragraph(survival_guide, self.styles['Normal']))
        
        story.append(Spacer(1, 0.2*inch))
        
        # Action plan
        story.append(Paragraph("üìã –ü–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π", self.styles['SectionHeader']))
        
        action_plan = """
        <b>–ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è (1-2 –Ω–µ–¥–µ–ª–∏):</b><br/>
        ‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –ø—Å–∏—Ö–æ–ª–æ–≥—É –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏<br/>
        ‚Ä¢ –°–æ–∑–¥–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤<br/>
        ‚Ä¢ –ù–∞—á–∞—Ç—å –≤–µ–¥–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω–∏–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π<br/>
        ‚Ä¢ –ò–∑—É—á–∏—Ç—å —Ç–µ—Ö–Ω–∏–∫–∏ –∑–∞—â–∏—Ç—ã –æ—Ç –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–π<br/><br/>
        
        <b>–°—Ä–µ–¥–Ω–µ—Å—Ä–æ—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è (1-3 –º–µ—Å—è—Ü–∞):</b><br/>
        ‚Ä¢ –†–∞–∑–≤–∏–≤–∞—Ç—å –Ω–∞–≤—ã–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥—Ä–∞–Ω–∏—Ü<br/>
        ‚Ä¢ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏<br/>
        ‚Ä¢ –†–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ –ø–æ–≤—ã—à–µ–Ω–∏–µ–º —Å–∞–º–æ–æ—Ü–µ–Ω–∫–∏<br/>
        ‚Ä¢ –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–∏—Ç—É–∞—Ü–∏–∏<br/><br/>
        
        <b>–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ —Ü–µ–ª–∏ (3+ –º–µ—Å—è—Ü–∞):</b><br/>
        ‚Ä¢ –ü—Ä–∏–Ω—è—Ç—å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –æ –±—É–¥—É—â–µ–º<br/>
        ‚Ä¢ –†–∞–∑–≤–∏—Ç—å —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏—è–º<br/>
        ‚Ä¢ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –±–ª–∞–≥–æ–ø–æ–ª—É—á–∏–µ<br/>
        ‚Ä¢ –°–æ–∑–¥–∞—Ç—å –∑–¥–æ—Ä–æ–≤—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –æ—Ç–Ω–æ—à–µ–Ω–∏–π
        """
        
        story.append(Paragraph(action_plan, self.styles['Normal']))
        
        # Emergency contacts
        story.append(Spacer(1, 0.2*inch))
        emergency_contacts = """
        üìû <b>–≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã</b><br/>
        <b>–ö—Ä–∏–∑–∏—Å–Ω–∞—è –ø–æ–º–æ—â—å:</b> 8-800-7000-600 (–±–µ—Å–ø–ª–∞—Ç–Ω–æ, 24/7)<br/>
        <b>–≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ —Å–ª—É–∂–±—ã:</b> 112 (–µ–¥–∏–Ω—ã–π –Ω–æ–º–µ—Ä)
        """
        story.append(Paragraph(emergency_contacts, self.styles['Normal']))
        
        return story
    
    def _create_methodology_page(self, analysis_data: Dict[str, Any]) -> list:
        """Create methodology page content"""
        story = []
        
        story.append(Paragraph("üî¨ –ú–ï–¢–û–î–û–õ–û–ì–ò–Ø –ò–°–°–õ–ï–î–û–í–ê–ù–ò–Ø", self.styles['CustomTitle']))
        
        # Scientific basis
        story.append(Paragraph("üìö –ù–∞—É—á–Ω–∞—è –æ—Å–Ω–æ–≤–∞", self.styles['SectionHeader']))
        
        methodology_text = """
        –î–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ —Å–ª–µ–¥—É—é—â–∏—Ö –Ω–∞—É—á–Ω–æ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–∏–∫–∞—Ö:<br/><br/>
        
        ‚Ä¢ <b>Dark Triad Assessment:</b> –û—Ü–µ–Ω–∫–∞ –Ω–∞—Ä—Ü–∏—Å—Å–∏–∑–º–∞, –º–∞–∫–∏–∞–≤–µ–ª–ª–∏–∑–º–∞ –∏ –ø—Å–∏—Ö–æ–ø–∞—Ç–∏–∏<br/>
        ‚Ä¢ <b>DSM-5 –∫—Ä–∏—Ç–µ—Ä–∏–∏:</b> –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤ –ª–∏—á–Ω–æ—Å—Ç–∏<br/>
        ‚Ä¢ <b>Hare Psychopathy Checklist (PCL-R):</b> –û—Ü–µ–Ω–∫–∞ –ø—Å–∏—Ö–æ–ø–∞—Ç–∏—á–µ—Å–∫–∏—Ö —á–µ—Ä—Ç<br/>
        ‚Ä¢ <b>Narcissistic Personality Inventory (NPI):</b> –ò–∑–º–µ—Ä–µ–Ω–∏–µ –Ω–∞—Ä—Ü–∏—Å—Å–∏—á–µ—Å–∫–∏—Ö –∫–∞—á–µ—Å—Ç–≤<br/>
        ‚Ä¢ <b>Emotional Abuse Questionnaire (EAQ):</b> –í—ã—è–≤–ª–µ–Ω–∏–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –Ω–∞—Å–∏–ª–∏—è<br/>
        ‚Ä¢ <b>Attachment Theory:</b> –ê–Ω–∞–ª–∏–∑ —Å—Ç–∏–ª–µ–π –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ—Å—Ç–∏
        """
        
        story.append(Paragraph(methodology_text, self.styles['Normal']))
        
        # Important notice
        story.append(Spacer(1, 0.2*inch))
        notice_text = """
        ‚öñÔ∏è <b>–í–∞–∂–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</b><br/>
        –î–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π. 
        –û–Ω –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–º –¥–∏–∞–≥–Ω–æ–∑–æ–º –∏ –Ω–µ –∑–∞–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –ø–æ–º–æ—â—å. 
        –ü—Ä–∏ —Å–µ—Ä—å–µ–∑–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º.
        """
        story.append(Paragraph(notice_text, self.styles['Normal']))
        
        # Accuracy stats
        story.append(Spacer(1, 0.2*inch))
        story.append(Paragraph("üéØ –¢–æ—á–Ω–æ—Å—Ç—å –∏ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å", self.styles['SectionHeader']))
        
        stats_data = [
            ['üìä –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏', 'üî¨ –ú–µ—Ç–æ–¥—ã –∞–Ω–∞–ª–∏–∑–∞'],
            ['–¢–æ—á–Ω–æ—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∞: 87%', 'AI-–æ–±—Ä–∞–±–æ—Ç–∫–∞: Claude-3.5 Sonnet'],
            ['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: 28', '–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑: –ú–Ω–æ–≥–æ—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –º–æ–¥–µ–ª—å'],
            ['–û—Ö–≤–∞—Ç –ø–æ–ø—É–ª—è—Ü–∏–∏: 10,000+ —Å–ª—É—á–∞–µ–≤', '–ö—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏—è: –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏'],
            ['–í–∞–ª–∏–¥–∞—Ü–∏—è: –ö–ª–∏–Ω–∏—á–µ—Å–∫–∏–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è', 'Peer review: –≠–∫—Å–ø–µ—Ä—Ç–Ω–∞—è –æ—Ü–µ–Ω–∫–∞']
        ]
        
        stats_table = Table(stats_data, colWidths=[7*cm, 7*cm])
        stats_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), HexColor('#667eea')),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, -1), 9),
            ('GRID', (0, 0), (-1, -1), 1, colors.lightgrey),
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('VALIGN', (0, 0), (-1, -1), 'TOP'),
        ]))
        
        story.append(stats_table)
        
        # Footer
        story.append(Spacer(1, 0.3*inch))
        footer_text = f"""
        <para align="center">
        üîç PsychoDetective | –ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω {datetime.now().strftime('%d.%m.%Y')} | –í–µ—Ä—Å–∏—è –æ—Ç—á–µ—Ç–∞ 1.0<br/>
        –û—Å–Ω–æ–≤–∞–Ω –Ω–∞ –Ω–∞—É—á–Ω—ã—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è—Ö –≤ –æ–±–ª–∞—Å—Ç–∏ –∫—Ä–∏–º–∏–Ω–∞–ª—å–Ω–æ–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏
        </para>
        """
        story.append(Paragraph(footer_text, self.styles['Normal']))
        
        return story
    
    async def _generate_charts(self, analysis_data: Dict[str, Any], user_id: int) -> Dict[str, str]:
        """Generate charts and return file paths"""
        charts = {}
        
        try:
            # Risk circle chart
            charts['risk_circle'] = self._create_risk_circle_chart(
                analysis_data.get('overall_risk_score', 0), user_id
            )
            
            # Block scores bar chart
            charts['blocks_chart'] = self._create_blocks_bar_chart(
                analysis_data.get('block_scores', {}), user_id
            )
            
            return charts
            
        except Exception as e:
            logger.error(f"Chart generation failed: {e}")
            return {}
    
    def _create_risk_circle_chart(self, risk_score: float, user_id: int) -> str:
        """Create risk score circle chart"""
        try:
            fig, ax = plt.subplots(figsize=(6, 6), facecolor='white')
            
            # Calculate angle for risk percentage
            angle = (risk_score / 100) * 360
            
            # Create circle chart
            circle_bg = patches.Circle((0.5, 0.5), 0.4, facecolor='#e9ecef', edgecolor='none')
            ax.add_patch(circle_bg)
            
            # Risk arc
            if risk_score > 0:
                risk_color = self._get_risk_color(risk_score)
                wedge = Wedge(
                    (0.5, 0.5), 0.4, -90, -90 + angle,
                    facecolor=risk_color, edgecolor='none'
                )
                ax.add_patch(wedge)
            
            # Inner white circle
            inner_circle = patches.Circle((0.5, 0.5), 0.25, facecolor='white', edgecolor='none')
            ax.add_patch(inner_circle)
            
            # Risk score text
            ax.text(0.5, 0.5, f'{int(risk_score)}', 
                    ha='center', va='center', fontsize=32, fontweight='bold',
                    color=self._get_risk_color(risk_score))
            
            ax.set_xlim(0, 1)
            ax.set_ylim(0, 1)
            ax.set_aspect('equal')
            ax.axis('off')
            
            # Save chart
            chart_path = self.charts_dir / f'risk_circle_{user_id}.png'
            fig.savefig(chart_path, dpi=150, bbox_inches='tight', 
                       facecolor='white', edgecolor='none')
            plt.close(fig)
            
            return str(chart_path)
            
        except Exception as e:
            logger.error(f"Risk circle chart generation failed: {e}")
            return ""
    
    def _create_blocks_bar_chart(self, block_scores: Dict[str, float], user_id: int) -> str:
        """Create block scores bar chart"""
        try:
            if not block_scores:
                return ""
                
            fig, ax = plt.subplots(figsize=(12, 8), facecolor='white')
            
            # Block names in Russian
            block_names = {
                'narcissism': '–ù–∞—Ä—Ü–∏—Å—Å–∏–∑–º',
                'control': '–ö–æ–Ω—Ç—Ä–æ–ª—å',
                'gaslighting': '–ì–∞–∑–ª–∞–π—Ç–∏–Ω–≥',
                'emotion': '–≠–º–æ—Ü–∏–∏',
                'intimacy': '–ò–Ω—Ç–∏–º–Ω–æ—Å—Ç—å',
                'social': '–°–æ—Ü–∏–∞–ª—å–Ω–æ–µ'
            }
            
            # Prepare data
            blocks = []
            scores = []
            colors = []
            
            for block_key, score in block_scores.items():
                if block_key in block_names:
                    blocks.append(block_names[block_key])
                    scores.append(score)
                    colors.append(self._get_score_color(score))
            
            if not blocks:
                return ""
            
            # Create bar chart
            bars = ax.bar(blocks, scores, color=colors, alpha=0.8, edgecolor='white', linewidth=2)
            
            # Add score labels on bars
            for bar, score in zip(bars, scores):
                height = bar.get_height()
                ax.text(bar.get_x() + bar.get_width()/2., height + 0.1,
                       f'{score:.1f}', ha='center', va='bottom', fontweight='bold', fontsize=12)
            
            ax.set_ylim(0, 10)
            ax.set_ylabel('–û—Ü–µ–Ω–∫–∞ (0-10)', fontsize=14, fontweight='bold')
            ax.set_title('–û—Ü–µ–Ω–∫–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º', fontsize=16, fontweight='bold', pad=20)
            
            # Rotate x-axis labels
            plt.xticks(rotation=45, ha='right')
            
            # Grid
            ax.grid(True, alpha=0.3, axis='y')
            ax.set_axisbelow(True)
            
            plt.tight_layout()
            
            # Save chart
            chart_path = self.charts_dir / f'blocks_chart_{user_id}.png'
            fig.savefig(chart_path, dpi=150, bbox_inches='tight', 
                       facecolor='white', edgecolor='none')
            plt.close(fig)
            
            return str(chart_path)
            
        except Exception as e:
            logger.error(f"Blocks chart generation failed: {e}")
            return ""
    
    def _cleanup_temp_files(self, user_id: int):
        """Clean up temporary chart files"""
        try:
            for file_path in self.charts_dir.glob(f"*_{user_id}.*"):
                file_path.unlink(missing_ok=True)
        except Exception as e:
            logger.warning(f"Failed to cleanup temp files: {e}")
    
    def _get_risk_color(self, risk_score: float) -> str:
        """Get color based on risk score"""
        if risk_score < 25:
            return '#28a745'  # Green
        elif risk_score < 50:
            return '#ffc107'  # Yellow
        elif risk_score < 75:
            return '#fd7e14'  # Orange
        else:
            return '#dc3545'  # Red
    
    def _get_score_color(self, score: float) -> str:
        """Get color based on score"""
        if score < 3:
            return '#28a745'  # Green
        elif score < 6:
            return '#ffc107'  # Yellow
        elif score < 8:
            return '#fd7e14'  # Orange
        else:
            return '#dc3545'  # Red
    
    def _get_score_level(self, score: float) -> str:
        """Get level text based on score"""
        if score < 3:
            return '–ù–∏–∑–∫–∏–π'
        elif score < 6:
            return '–°—Ä–µ–¥–Ω–∏–π'
        elif score < 8:
            return '–í—ã—Å–æ–∫–∏–π'
        else:
            return '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π'


# Global instance
pdf_service = PDFReportService() 
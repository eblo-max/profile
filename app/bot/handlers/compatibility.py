"""Compatibility test handler"""

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from app.utils.decorators import handle_errors
from app.bot.keyboards.inline import compatibility_menu_kb, back_to_main_kb

router = Router()

@router.callback_query(F.data == "compatibility_menu")
@handle_errors
async def show_compatibility_menu(callback: CallbackQuery):
    """Show compatibility test menu"""
    menu_text = """
üíï **–¢–µ—Å—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏**

–£–∑–Ω–∞–π—Ç–µ –Ω–∞—Å–∫–æ–ª—å–∫–æ –≤—ã –ø–æ–¥—Ö–æ–¥–∏—Ç–µ –¥—Ä—É–≥ –¥—Ä—É–≥—É:

üß™ **–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç** - –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –≤–∞—à–∏—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö
üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤** - –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
üíë **–°—Ä–∞–≤–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª–∏** - —Å–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à–∏ –ª–∏—á–Ω–æ—Å—Ç–∏

–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?
"""
    
    await callback.message.edit_text(
        menu_text,
        reply_markup=compatibility_menu_kb(),
        parse_mode="Markdown"
    )
    await callback.answer()

@router.callback_query(F.data == "start_compatibility")
@handle_errors
async def start_compatibility(callback: CallbackQuery):
    """Start compatibility test"""
    await callback.message.edit_text(
        "üß™ **–¢–µ—Å—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏**\n\n"
        "–Ø –∑–∞–¥–∞–º –≤–∞–º –≤–æ–ø—Ä–æ—Å—ã –æ –≤–∞—à–∏—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏.\n\n"
        "üìã –¢–µ—Å—Ç –≤–∫–ª—é—á–∞–µ—Ç:\n"
        "‚Ä¢ –û–±—â–∏–µ —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –∏ —Ü–µ–ª–∏\n"
        "‚Ä¢ –°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è\n"
        "‚Ä¢ –†–µ—à–µ–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤\n"
        "‚Ä¢ –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –±–ª–∏–∑–æ—Å—Ç—å\n\n"
        "‚è±Ô∏è –í—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è: 10-15 –º–∏–Ω—É—Ç",
        reply_markup=back_to_main_kb(),
        parse_mode="Markdown"
    )
    await callback.answer()

@router.callback_query(F.data == "compatibility_results")
@handle_errors
async def compatibility_results(callback: CallbackQuery):
    """Show compatibility results"""
    await callback.message.edit_text(
        "üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤**\n\n"
        "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏.\n\n"
        "–ü—Ä–æ–π–¥–∏—Ç–µ –ø–µ—Ä–≤—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –≤–∞—à–∏—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π.",
        reply_markup=back_to_main_kb(),
        parse_mode="Markdown"
    )
    await callback.answer()

@router.callback_query(F.data == "compare_profiles")
@handle_errors
async def compare_profiles(callback: CallbackQuery):
    """Compare profiles"""
    await callback.message.edit_text(
        "üíë **–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–π**\n\n"
        "–°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ª–∏—á–Ω–æ—Å—Ç–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫.\n\n"
        "üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ–∫–∞–∂–µ—Ç:\n"
        "‚Ä¢ –°–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤ —Ü–µ–Ω–Ω–æ—Å—Ç—è—Ö\n"
        "‚Ä¢ –î–æ–ø–æ–ª–Ω—è—é—â–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞\n"
        "‚Ä¢ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–Ω—ã–µ –∑–æ–Ω—ã\n"
        "‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏",
        reply_markup=back_to_main_kb(),
        parse_mode="Markdown"
    )
    await callback.answer()

@router.message(Command("compatibility"))
async def compatibility_test(message: Message):
    """Handle compatibility test command"""
    await message.answer("üíï –§—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...") 
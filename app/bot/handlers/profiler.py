"""Profiler handler for partner analysis"""

import asyncio
from typing import Dict, Any
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from loguru import logger

from app.bot.states import ProfilerStates
from app.bot.keyboards.inline import profiler_menu_kb, get_profiler_keyboard, get_profiler_navigation_keyboard
from app.services.ai_service import AIService
from app.services.html_pdf_service import HTMLPDFService
from app.services.user_service import UserService
from app.services.profile_service import ProfileService
from app.utils.exceptions import ServiceError
from app.utils.enums import AnalysisType
from app.prompts.profiler_full_questions import get_all_questions

router = Router()


@router.callback_query(F.data == "profiler_menu")
async def show_profiler_menu(callback: CallbackQuery, state: FSMContext, profile_service: ProfileService):
    """Show profiler menu"""
    try:
        await state.clear()
        user_id = callback.from_user.id
        
        # Get user's profiles for statistics
        profiles = await profile_service.get_user_profiles(user_id, limit=10)
        
        # Build profiler menu text with statistics
        menu_text = "üîç <b>–ü—Ä–æ—Ñ–∞–π–ª–µ—Ä –ø–∞—Ä—Ç–Ω–µ—Ä–∞</b>\n\n"
        
        if profiles:
            # Statistics
            total_profiles = len(profiles)
            high_risk = len([p for p in profiles if p.manipulation_risk >= 7])
            medium_risk = len([p for p in profiles if 4 <= p.manipulation_risk < 7])
            low_risk = len([p for p in profiles if p.manipulation_risk < 4])
            
            menu_text += f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            menu_text += f"‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª–µ–π: {total_profiles}\n"
            
            if high_risk > 0:
                menu_text += f"‚Ä¢ üî¥ –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫: {high_risk}\n"
            if medium_risk > 0:
                menu_text += f"‚Ä¢ üü° –°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫: {medium_risk}\n"
            if low_risk > 0:
                menu_text += f"‚Ä¢ üü¢ –ù–∏–∑–∫–∏–π —Ä–∏—Å–∫: {low_risk}\n"
            
            menu_text += "\n"
            
            # Latest profiles
            menu_text += f"üìã <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–∏:</b>\n"
            for i, profile in enumerate(profiles[:3], 1):
                risk_emoji = "üî¥" if profile.manipulation_risk >= 7 else "üü°" if profile.manipulation_risk >= 4 else "üü¢"
                partner_name = profile.partner_name or f"–ü–∞—Ä—Ç–Ω–µ—Ä #{profile.id}"
                menu_text += f"{i}. {risk_emoji} {partner_name} ({profile.manipulation_risk:.1f}/10)\n"
            menu_text += "\n"
            
            # Quick recommendations
            if high_risk > 0:
                menu_text += "‚ö†Ô∏è <b>–í–∞–∂–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:</b>\n"
                menu_text += "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –≤—ã—Å–æ–∫–æ—Ä–∏—Å–∫–æ–≤—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å –ø—Å–∏—Ö–æ–ª–æ–≥–æ–º.\n\n"
            elif medium_risk > 0:
                menu_text += "üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</b>\n"
                menu_text += "–ò–∑—É—á–∏—Ç–µ –∫—Ä–∞—Å–Ω—ã–µ —Ñ–ª–∞–≥–∏ –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö –∏ —Ä–∞–∑–≤–∏–≤–∞–π—Ç–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç.\n\n"
            else:
                menu_text += "‚úÖ <b>–°—Ç–∞—Ç—É—Å:</b>\n"
                menu_text += "–•–æ—Ä–æ—à–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ä–∞–∑–≤–∏–≤–∞—Ç—å –∑–¥–æ—Ä–æ–≤—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è.\n\n"
        else:
            menu_text += "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n"
            menu_text += "–ü—Ä–æ—Ñ–∞–π–ª–µ—Ä –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º:\n"
            menu_text += "‚Ä¢ üîç –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞\n"
            menu_text += "‚Ä¢ üö® –í—ã—è–≤–∏—Ç—å –∫—Ä–∞—Å–Ω—ã–µ —Ñ–ª–∞–≥–∏\n"
            menu_text += "‚Ä¢ üí° –ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n"
            menu_text += "‚Ä¢ üìä –û—Ü–µ–Ω–∏—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å\n\n"
            menu_text += "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑.\n\n"
        
        menu_text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        
        await callback.message.edit_text(
            menu_text,
            parse_mode="HTML",
            reply_markup=profiler_menu_kb()
        )
    except Exception as e:
        logger.error(f"Error showing profiler menu: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.callback_query(F.data == "create_profile")
async def create_new_profile(callback: CallbackQuery, state: FSMContext):
    """Create new profile - show options"""
    try:
        await callback.message.edit_text(
            "üìù <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è:",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üéØ –ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å (28 –≤–æ–ø—Ä–æ—Å–æ–≤)", callback_data="start_profiler_full")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="profiler_menu")]
            ])
        )
    except Exception as e:
        logger.error(f"Error in create_new_profile: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.callback_query(F.data == "my_profiles")
async def show_my_profiles(callback: CallbackQuery, state: FSMContext, profile_service: ProfileService):
    """Show user's existing profiles"""
    try:
        user_id = callback.from_user.id
        
        # Get user's profiles
        profiles = await profile_service.get_user_profiles(user_id, limit=10)
        
        if not profiles:
            await callback.message.edit_text(
                "üìÇ <b>–ú–æ–∏ –ø—Ä–æ—Ñ–∏–ª–∏</b>\n\n"
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤.\n\n"
                "–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤–∞—à–µ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞.",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üÜï –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="create_profile")],
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="profiler_menu")]
                ])
            )
            return
        
        # Build profiles list
        profiles_text = "üìÇ <b>–ú–æ–∏ –ø—Ä–æ—Ñ–∏–ª–∏</b>\n\n"
        keyboard = []
        
        for i, profile in enumerate(profiles, 1):
            # Get risk info
            risk_emoji = "üî¥" if profile.manipulation_risk >= 7 else "üü°" if profile.manipulation_risk >= 4 else "üü¢"
            partner_name = profile.partner_name or f"–ü–∞—Ä—Ç–Ω–µ—Ä #{profile.id}"
            
            profiles_text += f"{i}. {risk_emoji} <b>{partner_name}</b>\n"
            profiles_text += f"   –†–∏—Å–∫: {profile.manipulation_risk:.1f}/10\n"
            profiles_text += f"   –°–æ–∑–¥–∞–Ω: {profile.created_at.strftime('%d.%m.%Y')}\n\n"
            
            # Add profile button
            keyboard.append([InlineKeyboardButton(
                text=f"üìã {partner_name}", 
                callback_data=f"view_profile_{profile.id}"
            )])
        
        # Add control buttons
        keyboard.append([
            InlineKeyboardButton(text="üÜï –ù–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="create_profile"),
            InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="my_profiles")
        ])
        keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="profiler_menu")])
        
        await callback.message.edit_text(
            profiles_text,
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        
    except Exception as e:
        logger.error(f"Error in show_my_profiles: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª–µ–π")


@router.callback_query(F.data == "profile_recommendations")
async def show_profile_recommendations(callback: CallbackQuery, state: FSMContext, profile_service: ProfileService):
    """Show profile recommendations"""
    try:
        user_id = callback.from_user.id
        
        # Get user's profiles
        profiles = await profile_service.get_user_profiles(user_id, limit=5)
        
        if not profiles:
            await callback.message.edit_text(
                "üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</b>\n\n"
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.\n\n"
                "–°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üÜï –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="create_profile")],
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="profiler_menu")]
                ])
            )
            return
        
        # Analyze profiles and create recommendations
        recommendations_text = "üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</b>\n\n"
        
        # Count risk levels
        high_risk = len([p for p in profiles if p.manipulation_risk >= 7])
        medium_risk = len([p for p in profiles if 4 <= p.manipulation_risk < 7])
        low_risk = len([p for p in profiles if p.manipulation_risk < 4])
        
        # General recommendations
        if high_risk > 0:
            recommendations_text += "üî¥ <b>–í–ù–ò–ú–ê–ù–ò–ï:</b> –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –≤—ã—Å–æ–∫–æ—Ä–∏—Å–∫–æ–≤—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏\n"
            recommendations_text += "‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å –ø—Å–∏—Ö–æ–ª–æ–≥–æ–º\n"
            recommendations_text += "‚Ä¢ –ò–∑—É—á–∏—Ç–µ —Ç–µ—Ö–Ω–∏–∫–∏ –∑–∞—â–∏—Ç—ã –æ—Ç –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–π\n"
            recommendations_text += "‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —á–µ—Ç–∫–∏–µ –≥—Ä–∞–Ω–∏—Ü—ã –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö\n\n"
        
        if medium_risk > 0:
            recommendations_text += "üü° <b>–°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫:</b> –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–Ω–∏–º–∞–Ω–∏–µ\n"
            recommendations_text += "‚Ä¢ –ò–∑—É—á–∏—Ç–µ –∫—Ä–∞—Å–Ω—ã–µ —Ñ–ª–∞–≥–∏ –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö\n"
            recommendations_text += "‚Ä¢ –†–∞–∑–≤–∏–≤–∞–π—Ç–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç\n"
            recommendations_text += "‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ–≤–µ–¥–µ–Ω–∏—è\n\n"
        
        if low_risk > 0:
            recommendations_text += "üü¢ <b>–ù–∏–∑–∫–∏–π —Ä–∏—Å–∫:</b> –•–æ—Ä–æ—à–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏\n"
            recommendations_text += "‚Ä¢ –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ä–∞–∑–≤–∏–≤–∞—Ç—å –∑–¥–æ—Ä–æ–≤—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è\n"
            recommendations_text += "‚Ä¢ –ò–∑—É—á–∞–π—Ç–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏\n"
            recommendations_text += "‚Ä¢ –î–µ–ª–∏—Ç–µ—Å—å –æ–ø—ã—Ç–æ–º —Å –¥—Ä—É–≥–∏–º–∏\n\n"
        
        # Specific recommendations based on latest profile
        latest_profile = profiles[0]
        if latest_profile.red_flags:
            recommendations_text += "üö® <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫—Ä–∞—Å–Ω—ã–µ —Ñ–ª–∞–≥–∏:</b>\n"
            for flag in latest_profile.red_flags[:3]:  # Top 3
                recommendations_text += f"‚Ä¢ {flag}\n"
            recommendations_text += "\n"
        
        if latest_profile.relationship_advice:
            recommendations_text += "üìã <b>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã:</b>\n"
            advice_lines = latest_profile.relationship_advice.split('\n')
            for line in advice_lines[:3]:  # Top 3
                if line.strip():
                    recommendations_text += f"‚Ä¢ {line.strip()}\n"
            recommendations_text += "\n"
        
        # Add profile-specific buttons
        keyboard = []
        for profile in profiles[:3]:  # Show top 3 profiles
            partner_name = profile.partner_name or f"–ü–∞—Ä—Ç–Ω–µ—Ä #{profile.id}"
            risk_emoji = "üî¥" if profile.manipulation_risk >= 7 else "üü°" if profile.manipulation_risk >= 4 else "üü¢"
            keyboard.append([InlineKeyboardButton(
                text=f"{risk_emoji} –°–æ–≤–µ—Ç—ã –¥–ª—è {partner_name}",
                callback_data=f"recommendations_{profile.id}"
            )])
        
        keyboard.append([
            InlineKeyboardButton(text="üìÇ –ú–æ–∏ –ø—Ä–æ—Ñ–∏–ª–∏", callback_data="my_profiles"),
            InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="profile_recommendations")
        ])
        keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="profiler_menu")])
        
        await callback.message.edit_text(
            recommendations_text,
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        
    except Exception as e:
        logger.error(f"Error in show_profile_recommendations: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")


@router.callback_query(F.data == "start_profiler_full")
async def start_profiler_full(callback: CallbackQuery, state: FSMContext):
    """Start full profiler process"""
    try:
        # Get all questions
        questions = get_all_questions()
        question_order = [
            "narcissism_q1", "narcissism_q2", "narcissism_q3", "narcissism_q4", "narcissism_q5", "narcissism_q6",
            "control_q1", "control_q2", "control_q3", "control_q4", "control_q5", "control_q6",
            "gaslighting_q1", "gaslighting_q2", "gaslighting_q3", "gaslighting_q4", "gaslighting_q5",
            "emotion_q1", "emotion_q2", "emotion_q3", "emotion_q4",
            "intimacy_q1", "intimacy_q2", "intimacy_q3",
            "social_q1", "social_q2", "social_q3", "social_q4"
        ]
        
        # Initialize state
        await state.set_state(ProfilerStates.answering_questions)
        await state.update_data(
            questions=questions,
            question_order=question_order,
            current_question=0,
            answers={}
        )
        
        # Send first question
        first_question_id = question_order[0]
        first_question = questions[first_question_id]
        
        # Format question text
        question_text = f"""üîç <b>–ü—Ä–æ—Ñ–∞–π–ª–∏–Ω–≥ –ø–∞—Ä—Ç–Ω–µ—Ä–∞</b>

üìã –í–æ–ø—Ä–æ—Å 1 –∏–∑ {len(question_order)}

üß† <b>–ë–ª–æ–∫:</b> –ù–∞—Ä—Ü–∏—Å—Å–∏–∑–º –∏ –≥—Ä–∞–Ω–¥–∏–æ–∑–Ω–æ—Å—Ç—å

<b>{first_question['text']}</b>

üí≠ <i>{first_question['context']}</i>

–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç:"""
        
        # Create options keyboard
        options = []
        for i, option in enumerate(first_question['options']):
            options.append([InlineKeyboardButton(text=f"{i+1}. {option[:50]}{'...' if len(option) > 50 else ''}", callback_data=f"answer_{i}")])
        
        options.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="profiler_menu")])
        
        await callback.message.edit_text(
            question_text,
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=options)
        )
        
    except Exception as e:
        logger.error(f"Error starting full profiler: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ—Ñ–∞–π–ª–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=profiler_menu_kb()
        )


@router.callback_query(F.data.startswith("answer_"))
async def handle_answer(callback: CallbackQuery, state: FSMContext, ai_service: AIService, html_pdf_service: HTMLPDFService, user_service: UserService, profile_service: ProfileService):
    """Handle user answer to profiling question"""
    try:
        # Get answer index
        answer_index = int(callback.data.split("_")[1])
        
        # Get state data
        data = await state.get_data()
        questions = data.get('questions', {})
        question_order = data.get('question_order', [])
        current_question = data.get('current_question', 0)
        answers = data.get('answers', {})
        
        # Save answer
        current_question_id = question_order[current_question]
        answers[current_question_id] = answer_index
        
        # Move to next question
        next_question = current_question + 1
        
        if next_question < len(question_order):
            # Update state
            await state.update_data(
                current_question=next_question,
                answers=answers
            )
            
            # Send next question
            next_question_id = question_order[next_question]
            question = questions[next_question_id]
            
            # Get block name
            block_names = {
                "narcissism": "–ù–∞—Ä—Ü–∏—Å—Å–∏–∑–º –∏ –≥—Ä–∞–Ω–¥–∏–æ–∑–Ω–æ—Å—Ç—å",
                "control": "–ö–æ–Ω—Ç—Ä–æ–ª—å –∏ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–∏",
                "gaslighting": "–ì–∞–∑–ª–∞–π—Ç–∏–Ω–≥ –∏ –∏—Å–∫–∞–∂–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏",
                "emotion": "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ä–µ–≥—É–ª—è—Ü–∏—è",
                "intimacy": "–ò–Ω—Ç–∏–º–Ω–æ—Å—Ç—å –∏ –ø—Ä–∏–Ω—É–∂–¥–µ–Ω–∏–µ",
                "social": "–°–æ—Ü–∏–∞–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ"
            }
            block_name = block_names.get(question['block'], question['block'])
            
            # Format question text
            question_text = f"""üîç <b>–ü—Ä–æ—Ñ–∞–π–ª–∏–Ω–≥ –ø–∞—Ä—Ç–Ω–µ—Ä–∞</b>

üìã –í–æ–ø—Ä–æ—Å {next_question + 1} –∏–∑ {len(question_order)}

{get_block_emoji(question['block'])} <b>–ë–ª–æ–∫:</b> {block_name}

<b>{question['text']}</b>

üí≠ <i>{question['context']}</i>

–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç:"""
            
            # Create options keyboard
            options = []
            for i, option in enumerate(question['options']):
                options.append([InlineKeyboardButton(text=f"{i+1}. {option[:50]}{'...' if len(option) > 50 else ''}", callback_data=f"answer_{i}")])
            
            options.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="profiler_menu")])
            
            await callback.message.edit_text(
                question_text,
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=options)
            )
        else:
            # All questions answered - start analysis
            await state.update_data(answers=answers)
            await start_analysis(callback.message, state, ai_service, html_pdf_service, user_service, profile_service)
            
    except Exception as e:
        logger.error(f"Error handling answer: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞")


def get_block_emoji(block: str) -> str:
    """Get emoji for block"""
    block_emoji = {
        "narcissism": "üß†",
        "control": "üéØ", 
        "gaslighting": "üîÑ",
        "emotion": "üí≠",
        "intimacy": "üíï",
        "social": "üë•"
    }
    return block_emoji.get(block, "‚ùì")


async def start_analysis(message: Message, state: FSMContext, ai_service: AIService, html_pdf_service: HTMLPDFService, user_service: UserService, profile_service: ProfileService):
    """Start AI analysis of answers"""
    try:
        # Get user data
        user_id = message.from_user.id
        data = await state.get_data()
        answers = data.get('answers', {})
        
        # Get partner name if available
        partner_name = "–ü–∞—Ä—Ç–Ω–µ—Ä"
        try:
            user_profile = await profile_service.get_profile(user_id)
            if user_profile and user_profile.partner_name:
                partner_name = user_profile.partner_name
        except:
            pass
        
        # Send analysis start message
        analysis_msg = await message.answer(
            "üîç <b>–ê–Ω–∞–ª–∏–∑ –Ω–∞—á–∞—Ç</b>\n\n"
            "‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã...\n"
            "üìä –ü—Ä–æ–≤–æ–∂—É –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑...\n"
            "üéØ –í—ã—è–≤–ª—è—é –∫—Ä–∞—Å–Ω—ã–µ —Ñ–ª–∞–≥–∏...\n\n"
            "<i>–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 2 –º–∏–Ω—É—Ç</i>",
            parse_mode="HTML"
        )
        
        # Convert answers to format expected by AI service
        formatted_answers = []
        questions = data.get('questions', {})
        for question_id, answer_index in answers.items():
            question = questions.get(question_id, {})
            options = question.get('options', [])
            if answer_index < len(options):
                formatted_answers.append({
                    'question_id': question_id,
                    'question': question.get('text', ''),
                    'answer': options[answer_index]
                })
        
        # Perform AI analysis
        try:
            analysis_result = await ai_service.profile_partner(formatted_answers, user_id)
            
            # Update progress
            await analysis_msg.edit_text(
                "üîç <b>–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω</b>\n\n"
                "‚úÖ –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å –≥–æ—Ç–æ–≤\n"
                "üìã –ì–µ–Ω–µ—Ä–∏—Ä—É—é PDF –æ—Ç—á–µ—Ç...\n\n"
                "<i>–ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ!</i>",
                parse_mode="HTML"
            )
            
            # Generate PDF report
            pdf_bytes = await html_pdf_service.generate_partner_report_html(
                analysis_result,
                user_id,
                partner_name
            )
            
            # Save analysis to database
            try:
                await user_service.save_analysis(
                    user_id=user_id,
                    analysis_type=AnalysisType.PARTNER_PROFILE,
                    analysis_data=analysis_result,
                    questions=formatted_answers
                )
            except Exception as e:
                logger.warning(f"Failed to save analysis to DB: {e}")
            
            # Send results
            await send_analysis_results(message, analysis_result, pdf_bytes, partner_name)
            
        except Exception as e:
            logger.error(f"Analysis failed: {e}")
            await analysis_msg.edit_text(
                "‚ùå <b>–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞</b>\n\n"
                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.\n\n"
                f"–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {str(e)[:100]}",
                parse_mode="HTML",
                reply_markup=get_profiler_keyboard()
            )
            
    except Exception as e:
        logger.error(f"Error in start_analysis: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
            reply_markup=get_profiler_keyboard()
        )
    finally:
        # Clear state
        await state.clear()


async def send_analysis_results(
    message: Message,
    analysis_result: Dict[str, Any],
    pdf_bytes: bytes,
    partner_name: str
):
    """Send analysis results to user"""
    try:
        # Extract key metrics
        overall_risk = analysis_result.get('overall_risk_score', 0)
        urgency_level = analysis_result.get('urgency_level', 'UNKNOWN')
        block_scores = analysis_result.get('block_scores', {})
        
        # Determine risk emoji and message
        if overall_risk >= 80:
            risk_emoji = "üö®"
            risk_level = "–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô"
            risk_message = "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Å–µ—Ä—å–µ–∑–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ —Ç–æ–∫—Å–∏—á–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è!"
        elif overall_risk >= 60:
            risk_emoji = "‚ö†Ô∏è"
            risk_level = "–í–´–°–û–ö–ò–ô"
            risk_message = "–í—ã—è–≤–ª–µ–Ω—ã –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –≤ –ø–æ–≤–µ–¥–µ–Ω–∏–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞."
        elif overall_risk >= 40:
            risk_emoji = "üü°"
            risk_level = "–°–†–ï–î–ù–ò–ô"
            risk_message = "–ï—Å—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–µ–≤–æ–∂–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏."
        else:
            risk_emoji = "‚úÖ"
            risk_level = "–ù–ò–ó–ö–ò–ô"
            risk_message = "–°–µ—Ä—å–µ–∑–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ."
        
        # Format block scores
        block_names = {
            'narcissism': '–ù–∞—Ä—Ü–∏—Å—Å–∏–∑–º',
            'control': '–ö–æ–Ω—Ç—Ä–æ–ª—å',
            'gaslighting': '–ì–∞–∑–ª–∞–π—Ç–∏–Ω–≥',
            'emotion': '–≠–º–æ—Ü–∏–∏',
            'intimacy': '–ò–Ω—Ç–∏–º–Ω–æ—Å—Ç—å',
            'social': '–°–æ—Ü–∏–∞–ª—å–Ω–æ–µ'
        }
        
        scores_text = ""
        for block, score in block_scores.items():
            block_name = block_names.get(block, block)
            scores_text += f"‚Ä¢ {block_name}: {score}/10\n"
        
        # Create summary message
        summary_text = f"""üìä <b>–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω</b>

üë§ <b>–ü–∞—Ä—Ç–Ω–µ—Ä:</b> {partner_name}

{risk_emoji} <b>–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞:</b> {risk_level} ({overall_risk}%)

{risk_message}

<b>–î–µ—Ç–∞–ª—å–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏:</b>
{scores_text}

üìÑ –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–¥–µ–ª—å–Ω—ã–º —Ñ–∞–π–ª–æ–º."""
        
        # Send summary
        await message.answer(
            summary_text,
            parse_mode="HTML",
            reply_markup=get_profiler_keyboard()
        )
        
        # Send PDF report
        from io import BytesIO
        pdf_file = BytesIO(pdf_bytes)
        pdf_file.name = f"profile_{partner_name}_{message.from_user.id}.pdf"
        
        await message.answer_document(
            document=pdf_file,
            caption=f"üìÑ –ü–æ–ª–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ {partner_name}",
            reply_markup=get_profiler_keyboard()
        )
        
    except Exception as e:
        logger.error(f"Error sending analysis results: {e}")
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞.",
            reply_markup=get_profiler_keyboard()
        )


@router.callback_query(F.data.startswith("profiler_nav_"))
async def handle_navigation(callback: CallbackQuery, state: FSMContext):
    """Handle profiler navigation"""
    try:
        action = callback.data.split("_")[2]
        
        if action == "back":
            await callback.message.edit_text(
                "üîç <b>–ü—Ä–æ—Ñ–∞–π–ª–µ—Ä –ø–∞—Ä—Ç–Ω–µ—Ä–∞</b>\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                parse_mode="HTML",
                reply_markup=profiler_menu_kb()
            )
        elif action == "skip":
            # Handle skip logic if needed
            await callback.answer("–ü—Ä–æ–ø—É—Å–∫ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
        else:
            await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
            
    except Exception as e:
        logger.error(f"Error in navigation: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.callback_query(F.data == "profiler_back")
async def back_to_profiler(callback: CallbackQuery, state: FSMContext, profile_service: ProfileService):
    """Go back to profiler menu"""
    try:
        await state.clear()
        # Use the same logic as show_profiler_menu
        await show_profiler_menu(callback, state, profile_service)
    except Exception as e:
        logger.error(f"Error in back_to_profiler: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.callback_query(F.data.startswith("view_profile_"))
async def view_profile_details(callback: CallbackQuery, state: FSMContext, profile_service: ProfileService):
    """View detailed profile information"""
    try:
        profile_id = int(callback.data.split("_")[2])
        user_id = callback.from_user.id
        
        # Get profile details
        profile = await profile_service.get_profile_by_id(profile_id, user_id)
        
        if not profile:
            await callback.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # Build profile details text
        partner_name = profile.partner_name or f"–ü–∞—Ä—Ç–Ω–µ—Ä #{profile.id}"
        risk_emoji = "üî¥" if profile.manipulation_risk >= 7 else "üü°" if profile.manipulation_risk >= 4 else "üü¢"
        
        profile_text = f"üìã <b>{partner_name}</b>\n\n"
        profile_text += f"{risk_emoji} <b>–û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞:</b> {profile.manipulation_risk:.1f}/10\n"
        profile_text += f"üìÖ <b>–°–æ–∑–¥–∞–Ω:</b> {profile.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
        
        # Risk assessment
        if profile.manipulation_risk >= 7:
            profile_text += "üö® <b>–í–´–°–û–ö–ò–ô –†–ò–°–ö</b>\n"
            profile_text += "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Å–µ—Ä—å–µ–∑–Ω—ã–µ —Ç—Ä–µ–≤–æ–∂–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å.\n\n"
        elif profile.manipulation_risk >= 4:
            profile_text += "‚ö†Ô∏è <b>–°–†–ï–î–ù–ò–ô –†–ò–°–ö</b>\n"
            profile_text += "–ï—Å—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–µ–≤–æ–∂–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã. –°—Ç–æ–∏—Ç –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ.\n\n"
        else:
            profile_text += "‚úÖ <b>–ù–ò–ó–ö–ò–ô –†–ò–°–ö</b>\n"
            profile_text += "–í —Ü–µ–ª–æ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Ç–Ω–µ—Ä. –•–æ—Ä–æ—à–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏.\n\n"
        
        # Red flags
        if profile.red_flags:
            profile_text += "üö© <b>–ö—Ä–∞—Å–Ω—ã–µ —Ñ–ª–∞–≥–∏:</b>\n"
            for flag in profile.red_flags[:5]:  # Top 5
                profile_text += f"‚Ä¢ {flag}\n"
            profile_text += "\n"
        
        # Positive traits
        if profile.positive_traits:
            profile_text += "‚ú® <b>–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —á–µ—Ä—Ç—ã:</b>\n"
            for trait in profile.positive_traits[:5]:  # Top 5
                profile_text += f"‚Ä¢ {trait}\n"
            profile_text += "\n"
        
        # Recommendations
        if profile.relationship_advice:
            profile_text += f"üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n{profile.relationship_advice[:300]}...\n\n"
        
        # Create keyboard
        keyboard = [
            [InlineKeyboardButton(text="üìä –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑", callback_data=f"detailed_analysis_{profile_id}")],
            [InlineKeyboardButton(text="üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data=f"recommendations_{profile_id}")],
            [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data=f"delete_profile_{profile_id}")],
            [InlineKeyboardButton(text="üîô –ö —Å–ø–∏—Å–∫—É –ø—Ä–æ—Ñ–∏–ª–µ–π", callback_data="my_profiles")]
        ]
        
        await callback.message.edit_text(
            profile_text,
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        
    except Exception as e:
        logger.error(f"Error viewing profile details: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è")


@router.callback_query(F.data.startswith("recommendations_"))
async def show_detailed_recommendations(callback: CallbackQuery, state: FSMContext, profile_service: ProfileService):
    """Show detailed recommendations for specific profile"""
    try:
        profile_id = int(callback.data.split("_")[1])
        user_id = callback.from_user.id
        
        # Get profile details
        profile = await profile_service.get_profile_by_id(profile_id, user_id)
        
        if not profile:
            await callback.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        partner_name = profile.partner_name or f"–ü–∞—Ä—Ç–Ω–µ—Ä #{profile.id}"
        risk_emoji = "üî¥" if profile.manipulation_risk >= 7 else "üü°" if profile.manipulation_risk >= 4 else "üü¢"
        
        # Build recommendations text
        rec_text = f"üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è {partner_name}</b>\n\n"
        rec_text += f"{risk_emoji} <b>–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞:</b> {profile.manipulation_risk:.1f}/10\n\n"
        
        # Risk-based recommendations
        if profile.manipulation_risk >= 7:
            rec_text += "üö® <b>–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û:</b>\n"
            rec_text += "‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ø—Å–∏—Ö–æ–ª–æ–≥—É –∏–ª–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É\n"
            rec_text += "‚Ä¢ –ù–µ –∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ –∫—Ä–∞—Å–Ω—ã–µ —Ñ–ª–∞–≥–∏\n"
            rec_text += "‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —á–µ—Ç–∫–∏–µ –≥—Ä–∞–Ω–∏—Ü—ã\n"
            rec_text += "‚Ä¢ –ü–æ–¥—É–º–∞–π—Ç–µ –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤—ã—Ö–æ–¥–∞ –∏–∑ –æ—Ç–Ω–æ—à–µ–Ω–∏–π\n\n"
        elif profile.manipulation_risk >= 4:
            rec_text += "‚ö†Ô∏è <b>–†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø:</b>\n"
            rec_text += "‚Ä¢ –ò–∑—É—á–∏—Ç–µ —Ç–µ—Ö–Ω–∏–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–π\n"
            rec_text += "‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ–≤–µ–¥–µ–Ω–∏—è\n"
            rec_text += "‚Ä¢ –†–∞–∑–≤–∏–≤–∞–π—Ç–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å\n"
            rec_text += "‚Ä¢ –û–±—Å—É–¥–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã–º–∏ –ª—é–¥—å–º–∏\n\n"
        else:
            rec_text += "‚úÖ <b>–ü–û–î–î–ï–†–ñ–ò–í–ê–ô–¢–ï:</b>\n"
            rec_text += "‚Ä¢ –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Å—Ç—Ä–æ–∏—Ç—å –∑–¥–æ—Ä–æ–≤—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è\n"
            rec_text += "‚Ä¢ –†–∞–∑–≤–∏–≤–∞–π—Ç–µ –æ—Ç–∫—Ä—ã—Ç–æ–µ –æ–±—â–µ–Ω–∏–µ\n"
            rec_text += "‚Ä¢ –¶–µ–Ω–∏—Ç–µ –≤–∑–∞–∏–º–Ω–æ–µ —É–≤–∞–∂–µ–Ω–∏–µ\n"
            rec_text += "‚Ä¢ –ò–∑—É—á–∞–π—Ç–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏\n\n"
        
        # Specific recommendations
        if profile.relationship_advice:
            rec_text += f"üìã <b>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã:</b>\n{profile.relationship_advice}\n\n"
        
        # Communication tips
        if profile.communication_tips:
            rec_text += f"üí¨ <b>–°–æ–≤–µ—Ç—ã –ø–æ –æ–±—â–µ–Ω–∏—é:</b>\n{profile.communication_tips}\n\n"
        
        # Warning signs
        if profile.warning_signs:
            rec_text += "üö® <b>–ù–∞ —á—Ç–æ –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ:</b>\n"
            for warning in profile.warning_signs[:5]:
                rec_text += f"‚Ä¢ {warning}\n"
            rec_text += "\n"
        
        # Create keyboard
        keyboard = [
            [InlineKeyboardButton(text="üìã –ü—Ä–æ—Ñ–∏–ª—å", callback_data=f"view_profile_{profile_id}")],
            [InlineKeyboardButton(text="üìä –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑", callback_data=f"detailed_analysis_{profile_id}")],
            [InlineKeyboardButton(text="üîô –ö —Å–ø–∏—Å–∫—É –ø—Ä–æ—Ñ–∏–ª–µ–π", callback_data="my_profiles")]
        ]
        
        await callback.message.edit_text(
            rec_text,
            parse_mode="HTML", 
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        
    except Exception as e:
        logger.error(f"Error showing detailed recommendations: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")


@router.callback_query(F.data.startswith("delete_profile_"))
async def delete_profile_confirm(callback: CallbackQuery, state: FSMContext):
    """Confirm profile deletion"""
    try:
        profile_id = int(callback.data.split("_")[2])
        
        keyboard = [
            [InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_{profile_id}")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"view_profile_{profile_id}")]
        ]
        
        await callback.message.edit_text(
            "üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è</b>\n\n"
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –ø—Ä–æ—Ñ–∏–ª—å?\n\n"
            "‚ùóÔ∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        
    except Exception as e:
        logger.error(f"Error in delete_profile_confirm: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.callback_query(F.data.startswith("confirm_delete_"))
async def confirm_profile_deletion(callback: CallbackQuery, state: FSMContext, profile_service: ProfileService):
    """Actually delete the profile"""
    try:
        profile_id = int(callback.data.split("_")[2])
        user_id = callback.from_user.id
        
        # Delete profile
        success = await profile_service.delete_profile(profile_id, user_id)
        
        if success:
            await callback.message.edit_text(
                "‚úÖ <b>–ü—Ä–æ—Ñ–∏–ª—å —É–¥–∞–ª–µ–Ω</b>\n\n"
                "–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –≤–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞.",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üìÇ –ú–æ–∏ –ø—Ä–æ—Ñ–∏–ª–∏", callback_data="my_profiles")],
                    [InlineKeyboardButton(text="üîô –í –º–µ–Ω—é", callback_data="profiler_menu")]
                ])
            )
        else:
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")
            
    except Exception as e:
        logger.error(f"Error confirming profile deletion: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏")
"""Partner profiler handler - FULL version (28 questions, 6 blocks)"""

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

from app.utils.decorators import handle_errors
from app.bot.keyboards.inline import (
    profiler_menu_kb, back_to_main_kb, profiler_full_navigation_kb,
    profiler_results_navigation_kb, profiler_block_analysis_kb,
    profiler_safety_plan_kb, profiler_my_profiles_kb, 
    profiler_confirmation_kb, profiler_progress_visual_kb
)
from app.bot.states import PartnerProfileStates
from app.services.user_service import UserService
from app.services.ai_service import ai_service
from app.core.database import get_session
from app.core.logging import logger
from app.prompts.profiler_full_questions import (
    get_question_by_state, get_next_question_state, get_previous_question_state,
    get_question_progress, format_question_text, calculate_weighted_scores,
    get_safety_alerts, validate_full_answers, get_all_questions, QUESTION_ORDER,
    get_block_by_question
)
from app.prompts.profiler_full_prompts import (
    get_profiler_full_analysis_prompt, get_safety_assessment_prompt,
    get_relationship_therapy_prompt, get_patterns_recognition_prompt
)
import json

router = Router()

@router.callback_query(F.data == "profiler_menu")
@handle_errors
async def show_profiler_menu(callback: CallbackQuery):
    """Show partner profiler menu"""
    menu_text = """
üë§ **–ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞** *(–ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è)*

–°–æ–∑–¥–∞–π—Ç–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—Ç—Ä–µ—Ç –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–Ω–æ—à–µ–Ω–∏–π:

üÜï **–ù–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å** - –ø—Ä–æ–π—Ç–∏ –∞–Ω–∫–µ—Ç—É (28 –≤–æ–ø—Ä–æ—Å–æ–≤)
üìã **–ú–æ–∏ –ø—Ä–æ—Ñ–∏–ª–∏** - –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π
üéØ **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏** - –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

üí° **–ù–∞—É—á–Ω–æ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω–∞—è –∞–Ω–∫–µ—Ç–∞ –≤–∫–ª—é—á–∞–µ—Ç:**
‚Ä¢ üß† –ù–∞—Ä—Ü–∏—Å—Å–∏–∑–º –∏ –≥—Ä–∞–Ω–¥–∏–æ–∑–Ω–æ—Å—Ç—å (6 –≤–æ–ø—Ä–æ—Å–æ–≤)
‚Ä¢ üéØ –ö–æ–Ω—Ç—Ä–æ–ª—å –∏ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–∏ (6 –≤–æ–ø—Ä–æ—Å–æ–≤)
‚Ä¢ üîÑ –ì–∞–∑–ª–∞–π—Ç–∏–Ω–≥ –∏ –∏—Å–∫–∞–∂–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ (5 –≤–æ–ø—Ä–æ—Å–æ–≤)
‚Ä¢ üí≠ –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ä–µ–≥—É–ª—è—Ü–∏—è (4 –≤–æ–ø—Ä–æ—Å–∞)
‚Ä¢ üíï –ò–Ω—Ç–∏–º–Ω–æ—Å—Ç—å –∏ –ø—Ä–∏–Ω—É–∂–¥–µ–Ω–∏–µ (3 –≤–æ–ø—Ä–æ—Å–∞)
‚Ä¢ üë• –°–æ—Ü–∏–∞–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ (4 –≤–æ–ø—Ä–æ—Å–∞)

üî¨ **–û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞:** Dark Triad, DSM-5, Duluth Model

–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?
"""
    
    await callback.message.edit_text(
        menu_text,
        reply_markup=profiler_menu_kb(),
        parse_mode="Markdown"
    )
    await callback.answer()

@router.callback_query(F.data == "create_profile")
@handle_errors
async def create_profile(callback: CallbackQuery, state: FSMContext):
    """Start profile creation"""
    await state.set_state(PartnerProfileStates.waiting_for_name)
    
    intro_text = """üÜï **–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞** *(–ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è)*

–î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—Ç—Ä–µ—Ç –≤–∞—à–µ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–Ω–æ—à–µ–Ω–∏–π.

üìã **–ü—Ä–æ—Ü–µ—Å—Å –≤–∫–ª—é—á–∞–µ—Ç:**
‚Ä¢ –ò–º—è –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
‚Ä¢ 28 –Ω–∞—É—á–Ω–æ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ 6 –±–ª–æ–∫–∞—Ö
‚Ä¢ AI-–∞–Ω–∞–ª–∏–∑ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤
‚Ä¢ –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
‚Ä¢ –ü—Ä–æ–≥–Ω–æ–∑ —Ä–∞–∑–≤–∏—Ç–∏—è –æ—Ç–Ω–æ—à–µ–Ω–∏–π

üî¨ **–ù–∞—É—á–Ω–∞—è –æ—Å–Ω–æ–≤–∞:** Dark Triad, DSM-5, Duluth Model

‚ö†Ô∏è **–í–∞–∂–Ω–æ:** –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã –∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.

üë§ **–ö–∞–∫ –∑–æ–≤—É—Ç –≤–∞—à–µ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞?**
*(–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–ª–∏ –ø—Å–µ–≤–¥–æ–Ω–∏–º)*"""

    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="profiler_menu")
    )
    
    await callback.message.edit_text(
        intro_text,
        reply_markup=builder.as_markup(),
        parse_mode="Markdown"
    )
    await callback.answer()

@router.message(PartnerProfileStates.waiting_for_name)
@handle_errors
async def process_partner_name(message: Message, state: FSMContext):
    """Process partner name input"""
    partner_name = message.text.strip()
    
    if len(partner_name) < 1 or len(partner_name) > 50:
        await message.answer(
            "‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 1 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:",
            parse_mode="Markdown"
        )
        return
    
    await state.update_data(partner_name=partner_name)
    await state.set_state(PartnerProfileStates.waiting_for_description)
    
    description_text = f"""‚úÖ **–ü–∞—Ä—Ç–Ω–µ—Ä:** {partner_name}

üìù **–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ**

–û–ø–∏—à–∏—Ç–µ –≤–∞—à–µ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è):
‚Ä¢ –û—Å–Ω–æ–≤–Ω—ã–µ —á–µ—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞
‚Ä¢ –ö–∞–∫ –æ–Ω/–æ–Ω–∞ –≤–µ–¥–µ—Ç —Å–µ–±—è –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö
‚Ä¢ –í–∞—à–∏ –æ–±—â–∏–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è

üí° *–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç AI –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞*

*(–ú–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤)*"""

    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_description"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="profiler_menu")
    )
    
    await message.answer(
        description_text,
        reply_markup=builder.as_markup(),
        parse_mode="Markdown"
    )

@router.message(PartnerProfileStates.waiting_for_description)
@handle_errors
async def process_partner_description(message: Message, state: FSMContext):
    """Process partner description"""
    description = message.text.strip()
    
    if len(description) > 500:
        await message.answer(
            "‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 500 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å:",
            parse_mode="Markdown"
        )
        return
    
    await state.update_data(partner_description=description)
    await start_questionnaire(message, state)

@router.callback_query(F.data == "skip_description", PartnerProfileStates.waiting_for_description)
@handle_errors
async def skip_description(callback: CallbackQuery, state: FSMContext):
    """Skip description and start questionnaire"""
    await state.update_data(partner_description="")
    await start_questionnaire(callback.message, state)
    await callback.answer()

async def start_questionnaire(message: Message, state: FSMContext):
    """Start the full questionnaire (28 questions)"""
    await state.set_state(PartnerProfileStates.narcissism_q1)
    await state.update_data(answers={})
    
    data = await state.get_data()
    partner_name = data.get("partner_name", "–ø–∞—Ä—Ç–Ω–µ—Ä")
    
    intro_text = f"""üìã **–ê–Ω–∫–µ—Ç–∞ –æ –ø–∞—Ä—Ç–Ω–µ—Ä–µ "{partner_name}"** *(–ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è)*

–¢–µ–ø–µ—Ä—å –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ 28 –Ω–∞—É—á–Ω–æ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –æ –ø–æ–≤–µ–¥–µ–Ω–∏–∏ –≤–∞—à–µ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞.

üéØ **6 –±–ª–æ–∫–æ–≤ –∞–Ω–∞–ª–∏–∑–∞:**
üß† –ù–∞—Ä—Ü–∏—Å—Å–∏–∑–º –∏ –≥—Ä–∞–Ω–¥–∏–æ–∑–Ω–æ—Å—Ç—å (6 –≤–æ–ø—Ä–æ—Å–æ–≤)
üéØ –ö–æ–Ω—Ç—Ä–æ–ª—å –∏ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–∏ (6 –≤–æ–ø—Ä–æ—Å–æ–≤)
üîÑ –ì–∞–∑–ª–∞–π—Ç–∏–Ω–≥ –∏ –∏—Å–∫–∞–∂–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ (5 –≤–æ–ø—Ä–æ—Å–æ–≤)
üí≠ –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ä–µ–≥—É–ª—è—Ü–∏—è (4 –≤–æ–ø—Ä–æ—Å–∞)
üíï –ò–Ω—Ç–∏–º–Ω–æ—Å—Ç—å –∏ –ø—Ä–∏–Ω—É–∂–¥–µ–Ω–∏–µ (3 –≤–æ–ø—Ä–æ—Å–∞)
üë• –°–æ—Ü–∏–∞–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ (4 –≤–æ–ø—Ä–æ—Å–∞)

üî¨ **–ù–∞—É—á–Ω–∞—è –æ—Å–Ω–æ–≤–∞:** Dark Triad, DSM-5, Duluth Model

üí° **–û—Ç–≤–µ—á–∞–π—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —á–µ—Å—Ç–Ω–æ - –∫–∞—á–µ—Å—Ç–≤–æ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–æ—á–Ω–æ—Å—Ç–∏ –≤–∞—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤.**

‚è±Ô∏è **–í—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è:** ~10-15 –º–∏–Ω—É—Ç

–ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:"""
    
    await message.answer(intro_text, parse_mode="Markdown")
    await show_question(message, state, "narcissism_q1")

async def show_question(message: Message, state: FSMContext, question_state: str):
    """Show a questionnaire question with enhanced UI"""
    question_data = get_question_by_state(question_state)
    if not question_data:
        logger.error(f"Question data not found for state: {question_state}")
        return
    
    current_num, total_questions = get_question_progress(question_state)
    block_name = get_block_by_question(question_state)
    
    # Enhanced question text with visual elements
    question_text = format_question_text(question_data, current_num, total_questions)
    
    # Visual progress bar
    progress_filled = int((current_num / total_questions) * 20)
    progress_bar = "‚ñà" * progress_filled + "‚ñë" * (20 - progress_filled)
    
    enhanced_text = f"""{question_text}

üìä **–ü—Ä–æ–≥—Ä–µ—Å—Å:** {progress_bar} {current_num}/{total_questions}
üè∑Ô∏è **–ë–ª–æ–∫:** {block_name}"""
    
    # Create answer buttons
    builder = InlineKeyboardBuilder()
    
    # Add answer options with enhanced formatting
    for i, option in enumerate(question_data['options']):
        # Smart truncation preserving meaning
        if len(option) > 45:
            # Find last space before limit
            truncate_pos = option.rfind(' ', 0, 42)
            button_text = option[:truncate_pos] + "..." if truncate_pos > 20 else option[:42] + "..."
        else:
            button_text = option
        
        # Add option indicators
        option_emoji = ["1Ô∏è‚É£", "2Ô∏è‚É£", "3Ô∏è‚É£", "4Ô∏è‚É£", "5Ô∏è‚É£"][i] if i < 5 else f"{i+1}Ô∏è‚É£"
        
        builder.row(
            InlineKeyboardButton(
                text=f"{option_emoji} {button_text}",
                callback_data=f"answer_{question_state}_{i}"
            )
        )
    
    # Enhanced navigation
    nav_buttons = []
    
    # Previous button with smart text
    if current_num > 1:
        nav_buttons.append(
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π", callback_data=f"prev_{question_state}")
        )
    
    # Progress button with percentage
    progress_percent = int((current_num / total_questions) * 100)
    nav_buttons.append(
        InlineKeyboardButton(
            text=f"üìä {progress_percent}% ({current_num}/{total_questions})", 
            callback_data="prof_progress_visual"
        )
    )
    
    # Skip button for non-critical questions
    if question_data.get('weight', 2) < 4:  # Not critical
        nav_buttons.append(
            InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=f"prof_skip_{question_state}")
        )
    
    if nav_buttons:
        builder.row(*nav_buttons)
    
    # Block info button
    block_emoji = {
        "–ù–∞—Ä—Ü–∏—Å—Å–∏–∑–º –∏ –≥—Ä–∞–Ω–¥–∏–æ–∑–Ω–æ—Å—Ç—å": "üß†",
        "–ö–æ–Ω—Ç—Ä–æ–ª—å –∏ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–∏": "üéØ", 
        "–ì–∞–∑–ª–∞–π—Ç–∏–Ω–≥ –∏ –∏—Å–∫–∞–∂–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏": "üîÑ",
        "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ä–µ–≥—É–ª—è—Ü–∏—è": "üí≠",
        "–ò–Ω—Ç–∏–º–Ω–æ—Å—Ç—å –∏ –ø—Ä–∏–Ω—É–∂–¥–µ–Ω–∏–µ": "üíï",
        "–°–æ—Ü–∏–∞–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ": "üë•"
    }.get(block_name, "üìã")
    
    builder.row(
        InlineKeyboardButton(
            text=f"{block_emoji} –û –±–ª–æ–∫–µ: {block_name}", 
            callback_data=f"prof_block_info_{question_state}"
        )
    )
    
    # Enhanced action buttons
    action_buttons = []
    action_buttons.append(
        InlineKeyboardButton(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data="prof_save_progress")
    )
    action_buttons.append(
        InlineKeyboardButton(text="‚ùå –í—ã–π—Ç–∏", callback_data="prof_exit_confirm")
    )
    
    builder.row(*action_buttons)
    
    await message.answer(
        enhanced_text,
        reply_markup=builder.as_markup(),
        parse_mode="Markdown"
    )

@router.callback_query(F.data.startswith("answer_"))
@handle_errors
async def process_answer(callback: CallbackQuery, state: FSMContext):
    """Process question answer"""
    # Parse callback data: answer_{question_state}_{answer_index}
    parts = callback.data.split("_", 2)
    if len(parts) != 3:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞")
        return
    
    question_state = parts[1] + "_" + parts[2].split("_")[0] + "_" + parts[2].split("_")[1]
    answer_index = int(parts[2].split("_")[2])
    
    # Save answer
    data = await state.get_data()
    answers = data.get("answers", {})
    answers[question_state] = answer_index
    await state.update_data(answers=answers)
    
    # Get next question
    next_state = get_next_question_state(question_state)
    
    if next_state == "reviewing_answers":
        await show_review(callback.message, state)
    else:
        # Set next state and show next question
        await state.set_state(getattr(PartnerProfileStates, next_state))
        await show_question(callback.message, state, next_state)
    
    await callback.answer()

@router.callback_query(F.data.startswith("prev_"))
@handle_errors
async def go_to_previous_question(callback: CallbackQuery, state: FSMContext):
    """Go to previous question"""
    current_state = callback.data.replace("prev_", "")
    prev_state = get_previous_question_state(current_state)
    
    if prev_state == "waiting_for_description":
        await state.set_state(PartnerProfileStates.waiting_for_description)
        await callback.message.edit_text(
            "üìù –í–µ—Ä–Ω—É–ª–∏—Å—å –∫ –æ–ø–∏—Å–∞–Ω–∏—é –ø–∞—Ä—Ç–Ω–µ—Ä–∞. –í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏.",
            parse_mode="Markdown"
        )
    else:
        await state.set_state(getattr(PartnerProfileStates, prev_state))
        await show_question(callback.message, state, prev_state)
    
    await callback.answer()

async def show_review(message: Message, state: FSMContext):
    """Show answers review before analysis"""
    await state.set_state(PartnerProfileStates.reviewing_answers)
    
    data = await state.get_data()
    partner_name = data.get("partner_name", "–ø–∞—Ä—Ç–Ω–µ—Ä")
    answers = data.get("answers", {})
    
    # Calculate preliminary risk scores with weighted scoring
    weighted_scores = calculate_weighted_scores(answers)
    safety_alerts = get_safety_alerts(answers)
    
    review_text = f"""üìã **–ê–Ω–∫–µ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**

üë§ **–ü–∞—Ä—Ç–Ω–µ—Ä:** {partner_name}
üìä **–û—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ:** {len(answers)}/28

**–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞:**
üß† –ù–∞—Ä—Ü–∏—Å—Å–∏–∑–º: {weighted_scores['block_scores'].get('narcissism', 0):.1f}/10
üéØ –ö–æ–Ω—Ç—Ä–æ–ª—å: {weighted_scores['block_scores'].get('control', 0):.1f}/10
üîÑ –ì–∞–∑–ª–∞–π—Ç–∏–Ω–≥: {weighted_scores['block_scores'].get('gaslighting', 0):.1f}/10
üí≠ –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ä–µ–≥—É–ª—è—Ü–∏—è: {weighted_scores['block_scores'].get('emotion', 0):.1f}/10
üíï –ò–Ω—Ç–∏–º–Ω–æ—Å—Ç—å: {weighted_scores['block_scores'].get('intimacy', 0):.1f}/10
üë• –°–æ—Ü–∏–∞–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ: {weighted_scores['block_scores'].get('social', 0):.1f}/10

**–û–±—â–∏–π —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞:** {weighted_scores['overall_risk_score']:.1f}%"""

    # Add safety alerts if any
    if safety_alerts:
        review_text += "\n\n‚ö†Ô∏è **–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò:**\n"
        for alert in safety_alerts:
            review_text += f"‚Ä¢ {alert}\n"
    
    review_text += """\n\nü§ñ **–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥:** –ó–∞–ø—É—Å—Ç–∏—Ç—å AI-–∞–Ω–∞–ª–∏–∑ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.

–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∞–Ω–∞–ª–∏–∑?"""

    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="ü§ñ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑", callback_data="start_analysis"),
        InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç—ã", callback_data="edit_answers")
    )
    builder.row(
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="profiler_menu")
    )
    
    await message.answer(
        review_text,
        reply_markup=builder.as_markup(),
        parse_mode="Markdown"
    )

@router.callback_query(F.data == "start_analysis", PartnerProfileStates.reviewing_answers)
@handle_errors
async def start_ai_analysis(callback: CallbackQuery, state: FSMContext):
    """Start AI analysis of the profile"""
    await callback.answer()
    
    data = await state.get_data()
    partner_name = data.get("partner_name", "–ø–∞—Ä—Ç–Ω–µ—Ä")
    partner_description = data.get("partner_description", "")
    answers = data.get("answers", {})
    
    # Validate answers
    is_valid, error_msg = validate_full_answers(answers)
    if not is_valid:
        await callback.message.edit_text(
            f"‚ùå **–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:**\n{error_msg}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.",
            reply_markup=back_to_main_kb(),
            parse_mode="Markdown"
        )
        await state.clear()
        return
    
    # Show processing message
    processing_text = f"""ü§ñ **–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è "{partner_name}"**

‚öôÔ∏è AI –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã...
üß† –°–æ–∑–¥–∞–µ—Ç—Å—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å...
üîç –í—ã—è–≤–ª—è—é—Ç—Å—è –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã...
‚ö†Ô∏è –û—Ü–µ–Ω–∏–≤–∞–µ—Ç—Å—è —É—Ä–æ–≤–µ–Ω—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...

–≠—Ç–æ –∑–∞–π–º–µ—Ç 15-30 —Å–µ–∫—É–Ω–¥."""

    await callback.message.edit_text(
        processing_text,
        parse_mode="Markdown"
    )
    
    try:
        # Get AI service and analyze        
        async with get_session() as session:
            user_service = UserService(session)
            user = await user_service.get_user_by_telegram_id(callback.from_user.id)
            
            if not user:
                await callback.message.edit_text(
                    "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
                    reply_markup=back_to_main_kb()
                )
                await state.clear()
                return
            
            # Call AI analysis with full profiler
            analysis_result = await ai_service.profile_partner(
                answers=answers,
                user_id=user.id,
                partner_name=partner_name,
                partner_description=partner_description
            )
            
            # Save results to state for display
            await state.update_data(analysis_result=analysis_result)
            await state.set_state(PartnerProfileStates.profile_complete)
            
            # Show results
            await show_analysis_results(callback.message, state)
            
    except Exception as e:
        logger.error(f"Error in AI analysis: {e}")
        await callback.message.edit_text(
            "‚ùå **–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞**\n\n"
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ—Ñ–∏–ª—è. "
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            reply_markup=back_to_main_kb(),
            parse_mode="Markdown"
        )
        await state.clear()

async def show_analysis_results(message: Message, state: FSMContext):
    """Show AI analysis results"""
    data = await state.get_data()
    partner_name = data.get("partner_name", "–ø–∞—Ä—Ç–Ω–µ—Ä")
    analysis = data.get("analysis_result", {})
    
    if not analysis:
        await message.edit_text(
            "‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã",
            reply_markup=back_to_main_kb()
        )
        return
    
    # Format results display
    overall_risk = analysis.get("overall_risk_score", 0)
    urgency = analysis.get("urgency_level", "LOW")
    
    # Risk level emoji and text
    risk_emoji = "üü¢" if overall_risk < 25 else "üü°" if overall_risk < 50 else "üü†" if overall_risk < 75 else "üî¥"
    urgency_text = {
        "LOW": "–ù–∏–∑–∫–∏–π", 
        "MEDIUM": "–°—Ä–µ–¥–Ω–∏–π", 
        "HIGH": "–í—ã—Å–æ–∫–∏–π", 
        "CRITICAL": "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π"
    }.get(urgency, urgency)
    
    results_text = f"""üéØ **–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è "{partner_name}"** *(–ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è)*

{risk_emoji} **–û–±—â–∏–π —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞:** {overall_risk:.1f}%
üìä **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {urgency_text}

üî¨ **–û—Ü–µ–Ω–∫–∞ –ø–æ –Ω–∞—É—á–Ω—ã–º –±–ª–æ–∫–∞–º:**"""
    
    # Add block scores with new structure
    block_scores = analysis.get("block_scores", {})
    block_emoji = {
        "narcissism": "üß†",
        "control": "üéØ", 
        "gaslighting": "üîÑ",
        "emotion": "üí≠",
        "intimacy": "üíï",
        "social": "üë•"
    }
    
    block_names = {
        "narcissism": "–ù–∞—Ä—Ü–∏—Å—Å–∏–∑–º –∏ –≥—Ä–∞–Ω–¥–∏–æ–∑–Ω–æ—Å—Ç—å",
        "control": "–ö–æ–Ω—Ç—Ä–æ–ª—å –∏ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–∏",
        "gaslighting": "–ì–∞–∑–ª–∞–π—Ç–∏–Ω–≥ –∏ –∏—Å–∫–∞–∂–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏",
        "emotion": "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ä–µ–≥—É–ª—è—Ü–∏—è",
        "intimacy": "–ò–Ω—Ç–∏–º–Ω–æ—Å—Ç—å –∏ –ø—Ä–∏–Ω—É–∂–¥–µ–Ω–∏–µ",
        "social": "–°–æ—Ü–∏–∞–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ"
    }
    
    for block_key, score in block_scores.items():
        emoji = block_emoji.get(block_key, "üìä")
        name = block_names.get(block_key, block_key)
        level = "–≤—ã—Å–æ–∫–∏–π" if score >= 7 else "—Å—Ä–µ–¥–Ω–∏–π" if score >= 4 else "–Ω–∏–∑–∫–∏–π"
        results_text += f"\n{emoji} {name}: {score:.1f}/10 ({level})"
    
    # Add safety alerts
    safety_alerts = analysis.get("safety_alerts", [])
    if safety_alerts:
        results_text += "\n\n‚ö†Ô∏è **–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò:**"
        for alert in safety_alerts[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
            results_text += f"\n‚Ä¢ {alert}"
    
    # Extract key insights from AI analysis text
    ai_analysis = analysis.get("analysis", "")
    if ai_analysis and len(ai_analysis) > 200:
        # Extract first paragraph as summary
        first_paragraph = ai_analysis.split('\n\n')[0] if '\n\n' in ai_analysis else ai_analysis[:300]
        if len(first_paragraph) > 200:
            first_paragraph = first_paragraph[:200] + "..."
        results_text += f"\n\nüí° **–ö—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑:**\n{first_paragraph}"
    
    results_text += "\n\nüìñ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:"

    # Use enhanced results navigation
    await message.edit_text(
        results_text,
        reply_markup=profiler_results_navigation_kb(
            urgency_level=urgency,
            has_safety_alerts=bool(safety_alerts),
            overall_risk=overall_risk
        ),
        parse_mode="Markdown"
    )

@router.callback_query(F.data == "detailed_analysis", PartnerProfileStates.profile_complete)
@handle_errors
async def show_detailed_analysis(callback: CallbackQuery, state: FSMContext):
    """Show detailed analysis results"""
    data = await state.get_data()
    analysis = data.get("analysis_result", {})
    partner_name = data.get("partner_name", "–ø–∞—Ä—Ç–Ω–µ—Ä")
    
    if not analysis:
        await callback.answer("‚ùå –î–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        return
    
    # Format detailed analysis
    block_analysis = analysis.get("block_analysis", {})
    
    detailed_text = f"""üìä **–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ "{partner_name}"**

üîç **–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å:**
{analysis.get("psychological_profile", "–î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")}

üìà **–ê–Ω–∞–ª–∏–∑ –ø–æ –±–ª–æ–∫–∞–º:**"""
    
    # Add detailed block analysis
    block_titles = {
        "narcissism": "üé≠ –ù–∞—Ä—Ü–∏—Å—Å–∏–∑–º",
        "control": "‚öñÔ∏è –ö–æ–Ω—Ç—Ä–æ–ª—å", 
        "gaslighting": "üåÄ –ì–∞–∑–ª–∞–π—Ç–∏–Ω–≥",
        "emotional_manipulation": "üé≠ –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–∏",
        "safety": "‚ö†Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å"
    }
    
    for block_key, block_data in block_analysis.items():
        if isinstance(block_data, dict):
            title = block_titles.get(block_key, block_key)
            score = block_data.get("score", 0)
            level = block_data.get("level", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            patterns = block_data.get("key_patterns", [])
            evidence = block_data.get("evidence", "")
            
            detailed_text += f"\n\n{title}: {score:.1f}/10 ({level})"
            if patterns:
                detailed_text += f"\n‚Ä¢ –ü–∞—Ç—Ç–µ—Ä–Ω—ã: {', '.join(patterns[:2])}"
            if evidence:
                detailed_text += f"\n‚Ä¢ {evidence[:100]}..."
    
    # Add risk factors
    risk_factors = analysis.get("risk_factors", [])
    if risk_factors:
        detailed_text += f"\n\n‚ö†Ô∏è **–§–∞–∫—Ç–æ—Ä—ã —Ä–∏—Å–∫–∞:**"
        for factor in risk_factors[:3]:
            detailed_text += f"\n‚Ä¢ {factor}"
    
    # Add protective factors
    protective_factors = analysis.get("protective_factors", [])
    if protective_factors:
        detailed_text += f"\n\n‚úÖ **–ó–∞—â–∏—Ç–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã:**"
        for factor in protective_factors[:3]:
            detailed_text += f"\n‚Ä¢ {factor}"
    
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º", callback_data="back_to_results"),
        InlineKeyboardButton(text="üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data="recommendations")
    )
    builder.row(
        InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    )
    
    await callback.message.edit_text(
        detailed_text,
        reply_markup=builder.as_markup(),
        parse_mode="Markdown"
    )
    await callback.answer()

@router.callback_query(F.data == "recommendations", PartnerProfileStates.profile_complete)
@handle_errors
async def show_recommendations(callback: CallbackQuery, state: FSMContext):
    """Show recommendations and advice"""
    data = await state.get_data()
    analysis = data.get("analysis_result", {})
    partner_name = data.get("partner_name", "–ø–∞—Ä—Ç–Ω–µ—Ä")
    
    if not analysis:
        await callback.answer("‚ùå –î–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        return
    
    urgency = analysis.get("urgency_level", "MEDIUM")
    
    recommendations_text = f"""üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–Ω–æ—à–µ–Ω–∏–π —Å "{partner_name}"**

üìä **–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞:** {urgency}

üéØ **–ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:**"""
    
    # Add immediate recommendations
    immediate_recs = analysis.get("immediate_recommendations", [])
    for rec in immediate_recs:
        recommendations_text += f"\n‚Ä¢ {rec}"
    
    # Add communication advice
    comm_advice = analysis.get("communication_advice", [])
    if comm_advice:
        recommendations_text += f"\n\nüí¨ **–°–æ–≤–µ—Ç—ã –ø–æ –æ–±—â–µ–Ω–∏—é:**"
        for advice in comm_advice:
            recommendations_text += f"\n‚Ä¢ {advice}"
    
    # Add long-term recommendations
    long_term_recs = analysis.get("long_term_recommendations", [])
    if long_term_recs:
        recommendations_text += f"\n\nüìÖ **–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**"
        for rec in long_term_recs:
            recommendations_text += f"\n‚Ä¢ {rec}"
    
    # Add support resources
    support_resources = analysis.get("support_resources", [])
    if support_resources:
        recommendations_text += f"\n\nüìû **–†–µ—Å—É—Ä—Å—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏:**"
        for resource in support_resources:
            recommendations_text += f"\n‚Ä¢ {resource}"
    
    # Add prognosis
    prognosis = analysis.get("relationship_prognosis", "")
    if prognosis:
        recommendations_text += f"\n\nüîÆ **–ü—Ä–æ–≥–Ω–æ–∑:** {prognosis}"
    
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º", callback_data="back_to_results"),
        InlineKeyboardButton(text="üìä –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑", callback_data="detailed_analysis")
    )
    
    if urgency in ["HIGH", "CRITICAL"]:
        builder.row(
            InlineKeyboardButton(text="üö® –ü–ª–∞–Ω –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", callback_data="safety_plan")
        )
    
    builder.row(
        InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    )
    
    await callback.message.edit_text(
        recommendations_text,
        reply_markup=builder.as_markup(),
        parse_mode="Markdown"
    )
    await callback.answer()

@router.callback_query(F.data == "safety_plan", PartnerProfileStates.profile_complete)
@handle_errors
async def show_safety_plan(callback: CallbackQuery, state: FSMContext):
    """Show safety plan for high-risk situations"""
    data = await state.get_data()
    analysis = data.get("analysis_result", {})
    partner_name = data.get("partner_name", "–ø–∞—Ä—Ç–Ω–µ—Ä")
    
    if not analysis:
        await callback.answer("‚ùå –î–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        return
    
    urgency = analysis.get("urgency_level", "MEDIUM")
    safety_alerts = analysis.get("safety_alerts", [])
    
    safety_text = f"""üö® **–ü–ª–∞–Ω –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏**

‚ö†Ô∏è **–£—Ä–æ–≤–µ–Ω—å —É–≥—Ä–æ–∑—ã:** {urgency}

üîç **–í—ã—è–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:**"""
    
    # Add safety alerts
    if safety_alerts:
        for alert in safety_alerts:
            safety_text += f"\n‚Ä¢ {alert}"
    else:
        safety_text += "\n‚Ä¢ –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
    
    safety_text += f"""

üÜò **–≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã:**
‚Ä¢ 112 - –°–ª—É–∂–±–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏—è
‚Ä¢ 8-800-7000-600 - –í—Å–µ—Ä–æ—Å—Å–∏–π—Å–∫–∞—è –≥–æ—Ä—è—á–∞—è –ª–∏–Ω–∏—è
‚Ä¢ 8-800-2000-122 - –î–µ—Ç—Å–∫–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω –¥–æ–≤–µ—Ä–∏—è

üìã **–ï—Å–ª–∏ —Å–∏—Ç—É–∞—Ü–∏—è —É—Ö—É–¥—à–∞–µ—Ç—Å—è:**
1. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –±–ª–∏–∑–∫–∏–º –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
2. –ó–∞—Ñ–∏–∫—Å–∏—Ä—É–π—Ç–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã (–¥–∞—Ç–∞, –≤—Ä–µ–º—è, –æ–ø–∏—Å–∞–Ω–∏–µ)
3. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É-–ø—Å–∏—Ö–æ–ª–æ–≥—É
4. –ü—Ä–∏ —É–≥—Ä–æ–∑–µ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞—Å–∏–ª–∏—è - –∑–≤–æ–Ω–∏—Ç–µ 112
5. –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –ø–ª–∞–Ω –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤—ã—Ö–æ–¥–∞

üíº **–î–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:**
‚Ä¢ –ü–∞—Å–ø–æ—Ä—Ç –∏ –≤–∞–∂–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
‚Ä¢ –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –∫–∞—Ä—Ç—ã –∏ –Ω–∞–ª–∏—á–Ω—ã–µ
‚Ä¢ –õ–µ–∫–∞—Ä—Å—Ç–≤–∞ –∏ –ø—Ä–µ–¥–º–µ—Ç—ã –ø–µ—Ä–≤–æ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
‚Ä¢ –ö–æ–Ω—Ç–∞–∫—Ç—ã –±–ª–∏–∑–∫–∏—Ö –ª—é–¥–µ–π

üè† **–ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –º–µ—Å—Ç–∞:**
‚Ä¢ –î–æ–º —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤ –∏–ª–∏ –¥—Ä—É–∑–µ–π
‚Ä¢ –ö—Ä–∏–∑–∏—Å–Ω—ã–µ —Ü–µ–Ω—Ç—Ä—ã –¥–ª—è –∂–µ–Ω—â–∏–Ω
‚Ä¢ –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É–∂–±—ã

‚ö†Ô∏è **–ü–æ–º–Ω–∏—Ç–µ:** –í–∞—à–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –≤–∞–∂–Ω–µ–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–π. –ù–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∑–∞ –ø–æ–º–æ—â—å—é."""
    
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º", callback_data="back_to_results"),
        InlineKeyboardButton(text="üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data="recommendations")
    )
    builder.row(
        InlineKeyboardButton(text="üìû –ì–æ—Ä—è—á–∏–µ –ª–∏–Ω–∏–∏", url="tel:88007000600"),
        InlineKeyboardButton(text="üÜò –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ —Å–ª—É–∂–±—ã", url="tel:112")
    )
    builder.row(
        InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    )
    
    await callback.message.edit_text(
        safety_text,
        reply_markup=builder.as_markup(),
        parse_mode="Markdown"
    )
    await callback.answer()

@router.callback_query(F.data == "back_to_results", PartnerProfileStates.profile_complete)
@handle_errors
async def back_to_results(callback: CallbackQuery, state: FSMContext):
    """Go back to analysis results"""
    await show_analysis_results(callback.message, state)
    await callback.answer()

@router.callback_query(F.data == "save_profile", PartnerProfileStates.profile_complete)
@handle_errors
async def save_profile(callback: CallbackQuery, state: FSMContext):
    """Save profile for future reference"""
    data = await state.get_data()
    partner_name = data.get("partner_name", "–ø–∞—Ä—Ç–Ω–µ—Ä")
    
    # TODO: Implement actual profile saving to database
    
    await callback.message.edit_text(
        f"üíæ **–ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω**\n\n"
        f"–ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ \"{partner_name}\" —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –≤–∞—à –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç.\n\n"
        f"–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–µ–º—É –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è —á–µ—Ä–µ–∑ "
        f"—Ä–∞–∑–¥–µ–ª \"üìã –ú–æ–∏ –ø—Ä–æ—Ñ–∏–ª–∏\".\n\n"
        f"üîî **–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:** –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ 3-6 –º–µ—Å—è—Ü–µ–≤ "
        f"–¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö.",
        reply_markup=back_to_main_kb(),
        parse_mode="Markdown"
    )
    await callback.answer("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
    await state.clear()

@router.callback_query(F.data == "edit_answers", PartnerProfileStates.reviewing_answers)
@handle_errors
async def edit_answers(callback: CallbackQuery, state: FSMContext):
    """Edit questionnaire answers"""
    # Go back to first question to allow editing
    await state.set_state(PartnerProfileStates.narcissism_q1)
    
    await callback.message.edit_text(
        "‚úèÔ∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤**\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã.\n\n"
        "–ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:",
        parse_mode="Markdown"
    )
    
    await show_question(callback.message, state, "narcissism_q1")
    await callback.answer()

@router.callback_query(F.data == "progress_info")
@handle_errors
async def show_progress_info(callback: CallbackQuery):
    """Show questionnaire progress information"""
    await callback.answer(
        "üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\n\n"
        "–ê–Ω–∫–µ—Ç–∞ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 28 –Ω–∞—É—á–Ω–æ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ 6 –±–ª–æ–∫–∞—Ö:\n"
        "üß† –ù–∞—Ä—Ü–∏—Å—Å–∏–∑–º –∏ –≥—Ä–∞–Ω–¥–∏–æ–∑–Ω–æ—Å—Ç—å (6 –≤–æ–ø—Ä–æ—Å–æ–≤)\n"
        "üéØ –ö–æ–Ω—Ç—Ä–æ–ª—å –∏ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–∏ (6 –≤–æ–ø—Ä–æ—Å–æ–≤)\n" 
        "üîÑ –ì–∞–∑–ª–∞–π—Ç–∏–Ω–≥ –∏ –∏—Å–∫–∞–∂–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ (5 –≤–æ–ø—Ä–æ—Å–æ–≤)\n"
        "üí≠ –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ä–µ–≥—É–ª—è—Ü–∏—è (4 –≤–æ–ø—Ä–æ—Å–∞)\n"
        "üíï –ò–Ω—Ç–∏–º–Ω–æ—Å—Ç—å –∏ –ø—Ä–∏–Ω—É–∂–¥–µ–Ω–∏–µ (3 –≤–æ–ø—Ä–æ—Å–∞)\n"
        "üë• –°–æ—Ü–∏–∞–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ (4 –≤–æ–ø—Ä–æ—Å–∞)",
        show_alert=True
    )

@router.callback_query(F.data == "my_profiles")
@handle_errors
async def my_profiles(callback: CallbackQuery):
    """Show user's profiles"""
    await callback.message.edit_text(
        "üìã **–ú–æ–∏ –ø—Ä–æ—Ñ–∏–ª–∏**\n\n"
        "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π.\n\n"
        "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è "
        "–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∏ –∞–Ω–∞–ª–∏–∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.",
        reply_markup=back_to_main_kb(),
        parse_mode="Markdown"
    )
    await callback.answer()

@router.callback_query(F.data == "profile_recommendations")
@handle_errors
async def profile_recommendations(callback: CallbackQuery):
    """Show profile recommendations"""
    await callback.message.edit_text(
        "üéØ **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—è–º**\n\n"
        "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π "
        "–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞.\n\n"
        "–ü–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:\n"
        "‚Ä¢ –û—Ü–µ–Ω–∫—É —Ä–∏—Å–∫–æ–≤ –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö\n"
        "‚Ä¢ –°–æ–≤–µ—Ç—ã –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º—É –æ–±—â–µ–Ω–∏—é\n" 
        "‚Ä¢ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ —Ç–æ–∫—Å–∏—á–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–∞—Ö\n"
        "‚Ä¢ –ü–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π –≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö",
        reply_markup=back_to_main_kb(),
        parse_mode="Markdown"
    )
    await callback.answer()

@router.message(Command("profile"))
async def create_partner_profile(message: Message):
    """Handle partner profile creation command"""
    await message.answer(
        "üë§ **–ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞**\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /menu –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª "
        "\"üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞\" –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞.",
        parse_mode="Markdown"
    ) 

# ========== ENHANCED UI HANDLERS ==========

@router.callback_query(F.data == "prof_progress_visual")
@handle_errors
async def show_visual_progress(callback: CallbackQuery, state: FSMContext):
    """Show detailed visual progress"""
    data = await state.get_data()
    answers = data.get("answers", {})
    partner_name = data.get("partner_name", "–ø–∞—Ä—Ç–Ω–µ—Ä")
    
    # Calculate block progress
    block_progress = {}
    block_questions = {
        "narcissism": 6, "control": 6, "gaslighting": 5,
        "emotion": 4, "intimacy": 3, "social": 4
    }
    
    for block, total in block_questions.items():
        completed = sum(1 for q in answers.keys() if block in q)
        block_progress[f"{block}_completed"] = completed
        block_progress[f"{block}_total"] = total
    
    current_num = len(answers) + 1
    total_questions = 28
    
    progress_text = f"""üìä **–î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä–æ—Ñ–∏–ª—è "{partner_name}"**

‚è±Ô∏è **–í—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è:** ~{len(answers) * 0.5:.1f} –º–∏–Ω—É—Ç
üéØ **–ó–∞–≤–µ—Ä—à–µ–Ω–æ:** {len(answers)}/{total_questions} –≤–æ–ø—Ä–æ—Å–æ–≤ ({int(len(answers)/28*100)}%)

**–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –±–ª–æ–∫–∞–º:**"""
    
    # Add detailed block progress
    block_names = {
        "narcissism": "üß† –ù–∞—Ä—Ü–∏—Å—Å–∏–∑–º –∏ –≥—Ä–∞–Ω–¥–∏–æ–∑–Ω–æ—Å—Ç—å",
        "control": "üéØ –ö–æ–Ω—Ç—Ä–æ–ª—å –∏ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–∏",
        "gaslighting": "üîÑ –ì–∞–∑–ª–∞–π—Ç–∏–Ω–≥ –∏ –∏—Å–∫–∞–∂–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏", 
        "emotion": "üí≠ –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ä–µ–≥—É–ª—è—Ü–∏—è",
        "intimacy": "üíï –ò–Ω—Ç–∏–º–Ω–æ—Å—Ç—å –∏ –ø—Ä–∏–Ω—É–∂–¥–µ–Ω–∏–µ",
        "social": "üë• –°–æ—Ü–∏–∞–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ"
    }
    
    for block, name in block_names.items():
        completed = block_progress.get(f"{block}_completed", 0)
        total = block_progress.get(f"{block}_total", 0)
        
        if total > 0:
            percent = int((completed / total) * 100)
            bar_length = 10
            filled = int((completed / total) * bar_length)
            bar = "‚ñà" * filled + "‚ñë" * (bar_length - filled)
            
            status = "‚úÖ" if completed == total else "‚è≥" if completed > 0 else "‚è∏Ô∏è"
            progress_text += f"\n{status} {name}: {bar} {percent}%"
    
    await callback.message.edit_text(
        progress_text,
        reply_markup=profiler_progress_visual_kb(current_num, total_questions, block_progress),
        parse_mode="Markdown"
    )
    await callback.answer()


@router.callback_query(F.data == "prof_back_to_question")
@handle_errors
async def back_to_current_question(callback: CallbackQuery, state: FSMContext):
    """Return to current question from progress view"""
    # Get current state and show appropriate question
    current_state = await state.get_state()
    if current_state:
        state_name = current_state.state.split(":")[-1]
        await show_question(callback.message, state, state_name)
    await callback.answer()


@router.callback_query(F.data == "prof_block_analysis")
@handle_errors
async def show_block_analysis_menu(callback: CallbackQuery, state: FSMContext):
    """Show block analysis navigation"""
    data = await state.get_data()
    analysis = data.get("analysis_result", {})
    
    if not analysis:
        await callback.answer("‚ùå –î–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        return
    
    block_scores = analysis.get("block_scores", {})
    
    analysis_text = f"""üîç **–ê–Ω–∞–ª–∏–∑ –ø–æ –±–ª–æ–∫–∞–º**

–í—ã–±–µ—Ä–∏—Ç–µ –±–ª–æ–∫ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∏–∑—É—á–µ–Ω–∏—è:

**–õ–µ–≥–µ–Ω–¥–∞ —Ä–∏—Å–∫–æ–≤:**
üü¢ –ù–∏–∑–∫–∏–π —Ä–∏—Å–∫ (0-3 –±–∞–ª–ª–∞)
üü° –°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫ (4-6 –±–∞–ª–ª–æ–≤)  
üî¥ –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ (7-10 –±–∞–ª–ª–æ–≤)

**–¢–µ–∫—É—â–∏–µ –æ—Ü–µ–Ω–∫–∏:**"""
    
    for block, score in block_scores.items():
        risk_level = "üî¥ –í—ã—Å–æ–∫–∏–π" if score >= 7 else "üü° –°—Ä–µ–¥–Ω–∏–π" if score >= 4 else "üü¢ –ù–∏–∑–∫–∏–π"
        block_names = {
            "narcissism": "üß† –ù–∞—Ä—Ü–∏—Å—Å–∏–∑–º",
            "control": "üéØ –ö–æ–Ω—Ç—Ä–æ–ª—å",
            "gaslighting": "üîÑ –ì–∞–∑–ª–∞–π—Ç–∏–Ω–≥",
            "emotion": "üí≠ –≠–º–æ—Ü–∏–∏", 
            "intimacy": "üíï –ò–Ω—Ç–∏–º–Ω–æ—Å—Ç—å",
            "social": "üë• –°–æ—Ü–∏–∞–ª—å–Ω–æ–µ"
        }
        name = block_names.get(block, block)
        analysis_text += f"\n{name}: {score:.1f}/10 ({risk_level})"
    
    await callback.message.edit_text(
        analysis_text,
        reply_markup=profiler_block_analysis_kb(block_scores),
        parse_mode="Markdown"
    )
    await callback.answer()


@router.callback_query(F.data.startswith("prof_view_block_"))
@handle_errors
async def show_detailed_block_analysis(callback: CallbackQuery, state: FSMContext):
    """Show detailed analysis for specific block"""
    block_key = callback.data.replace("prof_view_block_", "")
    
    data = await state.get_data()
    analysis = data.get("analysis_result", {})
    partner_name = data.get("partner_name", "–ø–∞—Ä—Ç–Ω–µ—Ä")
    
    if not analysis:
        await callback.answer("‚ùå –î–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        return
    
    block_analysis = analysis.get("block_analysis", {})
    block_data = block_analysis.get(block_key, {})
    block_scores = analysis.get("block_scores", {})
    
    block_names = {
        "narcissism": "üß† –ù–∞—Ä—Ü–∏—Å—Å–∏–∑–º –∏ –≥—Ä–∞–Ω–¥–∏–æ–∑–Ω–æ—Å—Ç—å",
        "control": "üéØ –ö–æ–Ω—Ç—Ä–æ–ª—å –∏ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–∏",
        "gaslighting": "üîÑ –ì–∞–∑–ª–∞–π—Ç–∏–Ω–≥ –∏ –∏—Å–∫–∞–∂–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏",
        "emotion": "üí≠ –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ä–µ–≥—É–ª—è—Ü–∏—è",
        "intimacy": "üíï –ò–Ω—Ç–∏–º–Ω–æ—Å—Ç—å –∏ –ø—Ä–∏–Ω—É–∂–¥–µ–Ω–∏–µ", 
        "social": "üë• –°–æ—Ü–∏–∞–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ"
    }
    
    block_name = block_names.get(block_key, block_key)
    score = block_scores.get(block_key, 0)
    
    risk_emoji = "üî¥" if score >= 7 else "üü°" if score >= 4 else "üü¢"
    risk_level = "–í—ã—Å–æ–∫–∏–π" if score >= 7 else "–°—Ä–µ–¥–Ω–∏–π" if score >= 4 else "–ù–∏–∑–∫–∏–π"
    
    detailed_text = f"""üìä **–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑: {block_name}**

**–ü–∞—Ä—Ç–Ω–µ—Ä:** {partner_name}
**–û—Ü–µ–Ω–∫–∞:** {score:.1f}/10 {risk_emoji}
**–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞:** {risk_level}

**üîç –ö–ª—é—á–µ–≤—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã:**"""
    
    patterns = block_data.get("key_patterns", [])
    if patterns:
        for pattern in patterns[:5]:  # Show first 5 patterns
            detailed_text += f"\n‚Ä¢ {pattern}"
    else:
        detailed_text += "\n‚Ä¢ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
    
    evidence = block_data.get("evidence", "")
    if evidence:
        detailed_text += f"\n\n**üìã –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ:**\n{evidence[:300]}..."
    
    # Add specific recommendations for this block
    if score >= 7:
        detailed_text += f"\n\n‚ö†Ô∏è **–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï:**\n–í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞ –≤ —ç—Ç–æ–π –æ–±–ª–∞—Å—Ç–∏ —Ç—Ä–µ–±—É–µ—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è."
    elif score >= 4:
        detailed_text += f"\n\nüü° **–í–ù–ò–ú–ê–ù–ò–ï:**\n–°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞ - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Ç—É–∞—Ü–∏–∏."
    
    await callback.message.edit_text(
        detailed_text,
        reply_markup=profiler_block_analysis_kb(block_scores, block_key),
        parse_mode="Markdown"
    )
    await callback.answer()


@router.callback_query(F.data == "prof_emergency_help")
@handle_errors
async def show_emergency_help(callback: CallbackQuery, state: FSMContext):
    """Show emergency help contacts and resources"""
    emergency_text = """üö® **–≠–ö–°–¢–†–ï–ù–ù–ê–Ø –ü–û–ú–û–©–¨**

**–ï—Å–ª–∏ –≤—ã –≤ –æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ü–†–Ø–ú–û –°–ï–ô–ß–ê–°:**
‚Ä¢ üìû **112** - –°–ª—É–∂–±–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏—è
‚Ä¢ üìû **102** - –ü–æ–ª–∏—Ü–∏—è –†–æ—Å—Å–∏–∏

**–ì–æ—Ä—è—á–∏–µ –ª–∏–Ω–∏–∏ –ø–æ–º–æ—â–∏ (24/7):**
‚Ä¢ üìû **8-800-7000-600** - –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –≥–æ—Ä—è—á–∞—è –ª–∏–Ω–∏—è
‚Ä¢ üìû **8-800-2000-122** - –î–µ—Ç—Å–∫–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω –¥–æ–≤–µ—Ä–∏—è
‚Ä¢ üí¨ **t.me/17000helpbot** - –ß–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏

**–ö—Ä–∏–∑–∏—Å–Ω—ã–µ —Ü–µ–Ω—Ç—Ä—ã:**
‚Ä¢ üè† –¶–µ–Ω—Ç—Ä "–°–µ—Å—Ç—Ä—ã" (–ú–æ—Å–∫–≤–∞): 8-495-901-02-01
‚Ä¢ üè† "–ê–ù–ù–ê" (–°–ü–±): 8-812-671-30-00
‚Ä¢ üè† "–ù–∞—Å–∏–ª–∏—é.–ù–µ—Ç": nasiliu.net

**–í –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏:**
1. –û–±–µ—Å–ø–µ—á—å—Ç–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
2. –ó–≤–æ–Ω–∏—Ç–µ –≤ —Å–ª—É–∂–±—ã —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏—è
3. –û–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –±–ª–∏–∑–∫–∏–º –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
4. –î–æ–∫—É–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã

**–ü–æ–º–Ω–∏—Ç–µ:** –í–∞—à–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å - –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç ‚Ññ1!"""

    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å 112", url="tel:112"),
        InlineKeyboardButton(text="‚òéÔ∏è –ì–æ—Ä—è—á–∞—è –ª–∏–Ω–∏—è", url="tel:88007000600")
    )
    builder.row(
        InlineKeyboardButton(text="üö® –ü–ª–∞–Ω –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", callback_data="safety_plan"),
        InlineKeyboardButton(text="üë• –ù–∞–π—Ç–∏ –ø–æ–º–æ—â—å", url="https://nasiliu.net")
    )
    builder.row(
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º", callback_data="back_to_results")
    )
    
    await callback.message.edit_text(
        emergency_text,
        reply_markup=builder.as_markup(),
        parse_mode="Markdown"
    )
    await callback.answer()


@router.callback_query(F.data == "prof_exit_confirm")
@handle_errors
async def confirm_exit(callback: CallbackQuery, state: FSMContext):
    """Confirm exit from questionnaire"""
    data = await state.get_data()
    answers_count = len(data.get("answers", {}))
    
    exit_text = f"""‚ùì **–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?**

üìä **–ü—Ä–æ–≥—Ä–µ—Å—Å:** –û—Ç–≤–µ—á–µ–Ω–æ –Ω–∞ {answers_count}/28 –≤–æ–ø—Ä–æ—Å–æ–≤
‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ:** –ü—Ä–∏ –≤—ã—Ö–æ–¥–µ –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å –±—É–¥–µ—Ç –ø–æ—Ç–µ—Ä—è–Ω

**–í–∞—Ä–∏–∞–Ω—Ç—ã –¥–µ–π—Å—Ç–≤–∏–π:**"""
    
    await callback.message.edit_text(
        exit_text,
        reply_markup=profiler_confirmation_kb("exit"),
        parse_mode="Markdown"
    )
    await callback.answer()


@router.callback_query(F.data == "prof_save_progress")
@handle_errors
async def save_questionnaire_progress(callback: CallbackQuery, state: FSMContext):
    """Save current questionnaire progress"""
    data = await state.get_data()
    answers_count = len(data.get("answers", {}))
    partner_name = data.get("partner_name", "–ø–∞—Ä—Ç–Ω–µ—Ä")
    
    # TODO: Implement actual saving to database
    
    await callback.answer(
        f"‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n"
        f"üìä {answers_count}/28 –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è \"{partner_name}\"\n"
        f"–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∑–∂–µ –∏–∑ –º–µ–Ω—é \"–ú–æ–∏ –ø—Ä–æ—Ñ–∏–ª–∏\"",
        show_alert=True
    )


@router.callback_query(F.data == "prof_save_and_exit")
@handle_errors
async def save_and_exit_questionnaire(callback: CallbackQuery, state: FSMContext):
    """Save progress and exit to main menu"""
    data = await state.get_data()
    answers_count = len(data.get("answers", {}))
    partner_name = data.get("partner_name", "–ø–∞—Ä—Ç–Ω–µ—Ä")
    
    # TODO: Implement actual saving
    
    await callback.message.edit_text(
        f"üíæ **–ü—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω**\n\n"
        f"–ü—Ä–æ—Ñ–∏–ª—å \"{partner_name}\" —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Å {answers_count}/28 –æ—Ç–≤–µ—Ç–∞–º–∏.\n\n"
        f"–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∞–Ω–∫–µ—Ç—É –ø–æ–∑–∂–µ —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª \"üìã –ú–æ–∏ –ø—Ä–æ—Ñ–∏–ª–∏\".",
        reply_markup=back_to_main_kb(),
        parse_mode="Markdown"
    )
    await state.clear()
    await callback.answer()


@router.callback_query(F.data == "prof_exit_no_save")
@handle_errors
async def exit_without_saving(callback: CallbackQuery, state: FSMContext):
    """Exit without saving progress"""
    await callback.message.edit_text(
        "‚ùå **–ü—Ä–æ–≥—Ä–µ—Å—Å –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω**\n\n"
        "–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–Ω–∫–µ—Ç—ã –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è. "
        "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –Ω–∞—á–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ.",
        reply_markup=back_to_main_kb(),
        parse_mode="Markdown"
    )
    await state.clear()
    await callback.answer()


@router.callback_query(F.data == "prof_continue")
@handle_errors
async def continue_questionnaire(callback: CallbackQuery, state: FSMContext):
    """Continue with questionnaire"""
    # Return to current question
    await back_to_current_question(callback, state)


@router.callback_query(F.data.startswith("prof_skip_"))
@handle_errors
async def skip_question(callback: CallbackQuery, state: FSMContext):
    """Skip current question (for non-critical questions only)"""
    question_state = callback.data.replace("prof_skip_", "")
    
    # Get next question
    next_state = get_next_question_state(question_state)
    
    if next_state == "reviewing_answers":
        await show_review(callback.message, state)
    else:
        await state.set_state(getattr(PartnerProfileStates, next_state))
        await show_question(callback.message, state, next_state)
    
    await callback.answer("‚è≠Ô∏è –í–æ–ø—Ä–æ—Å –ø—Ä–æ–ø—É—â–µ–Ω")


@router.callback_query(F.data.startswith("prof_block_info_"))
@handle_errors
async def show_block_info(callback: CallbackQuery):
    """Show information about current block"""
    question_state = callback.data.replace("prof_block_info_", "")
    block_name = get_block_by_question(question_state)
    
    block_descriptions = {
        "–ù–∞—Ä—Ü–∏—Å—Å–∏–∑–º –∏ –≥—Ä–∞–Ω–¥–∏–æ–∑–Ω–æ—Å—Ç—å": """üß† **–ù–∞—Ä—Ü–∏—Å—Å–∏–∑–º –∏ –≥—Ä–∞–Ω–¥–∏–æ–∑–Ω–æ—Å—Ç—å**

–≠—Ç–æ—Ç –±–ª–æ–∫ –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç –ø—Ä–∏–∑–Ω–∞–∫–∏ –Ω–∞—Ä—Ü–∏—Å—Å–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ª–∏—á–Ω–æ—Å—Ç–∏:
‚Ä¢ –ó–∞–≤—ã—à–µ–Ω–Ω–∞—è —Å–∞–º–æ–æ—Ü–µ–Ω–∫–∞ –∏ —á—É–≤—Å—Ç–≤–æ –ø—Ä–µ–≤–æ—Å—Ö–æ–¥—Å—Ç–≤–∞
‚Ä¢ –ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–º –≤–æ—Å—Ö–∏—â–µ–Ω–∏–∏
‚Ä¢ –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —ç–º–ø–∞—Ç–∏–∏ –∫ –¥—Ä—É–≥–∏–º
‚Ä¢ –ù–µ–∞–¥–µ–∫–≤–∞—Ç–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –∫—Ä–∏—Ç–∏–∫—É
‚Ä¢ –≠–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—è –¥—Ä—É–≥–∏—Ö –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–π

*–û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ –∫—Ä–∏—Ç–µ—Ä–∏—è—Ö DSM-5 –∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è—Ö Dark Triad*""",
        
        "–ö–æ–Ω—Ç—Ä–æ–ª—å –∏ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–∏": """üéØ **–ö–æ–Ω—Ç—Ä–æ–ª—å –∏ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–∏**

–û—Ü–µ–Ω–∫–∞ –ø–æ–ø—ã—Ç–æ–∫ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞:
‚Ä¢ –ö–æ–Ω—Ç—Ä–æ–ª—å –≤—Ä–µ–º–µ–Ω–∏, —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–≤—è–∑–µ–π, —Ñ–∏–Ω–∞–Ω—Å–æ–≤
‚Ä¢ –ò–∑–æ–ª—è—Ü–∏—è –æ—Ç –¥—Ä—É–∑–µ–π –∏ —Å–µ–º—å–∏
‚Ä¢ –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —à–∞–Ω—Ç–∞–∂ –∏ –ø—Ä–∏–Ω—É–∂–¥–µ–Ω–∏–µ
‚Ä¢ –ù–∞—Ä—É—à–µ–Ω–∏–µ –ª–∏—á–Ω—ã—Ö –≥—Ä–∞–Ω–∏—Ü
‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —É–≥—Ä–æ–∑ –∏ –∑–∞–ø—É–≥–∏–≤–∞–Ω–∏—è

*–ù–∞ –æ—Å–Ω–æ–≤–µ Duluth Model –∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π –∞–±—å—é–∑–∏–≤–Ω—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π*""",
        
        "–ì–∞–∑–ª–∞–π—Ç–∏–Ω–≥ –∏ –∏—Å–∫–∞–∂–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏": """üîÑ **–ì–∞–∑–ª–∞–π—Ç–∏–Ω–≥ –∏ –∏—Å–∫–∞–∂–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏**

–ê–Ω–∞–ª–∏–∑ –ø–æ–ø—ã—Ç–æ–∫ –∏—Å–∫–∞–∂–µ–Ω–∏—è –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏:
‚Ä¢ –û—Ç—Ä–∏—Ü–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–æ—à–µ–¥—à–∏—Ö —Å–æ–±—ã—Ç–∏–π
‚Ä¢ –û–±–µ—Å—Ü–µ–Ω–∏–≤–∞–Ω–∏–µ —á—É–≤—Å—Ç–≤ –∏ –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏–π
‚Ä¢ –ü–µ—Ä–µ–∫–ª–∞–¥—ã–≤–∞–Ω–∏–µ –≤–∏–Ω—ã –Ω–∞ –∂–µ—Ä—Ç–≤—É
‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ª–∏—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø—Ä–æ—Ç–∏–≤ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –¥–≤–æ–π–Ω—ã—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤

*–û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –≥–∞–∑–ª–∞–π—Ç–∏–Ω–≥–∞ –∏ –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã—Ö –∏—Å–∫–∞–∂–µ–Ω–∏–π*""",
        
        "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ä–µ–≥—É–ª—è—Ü–∏—è": """üí≠ **–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ä–µ–≥—É–ª—è—Ü–∏—è**

–û—Ü–µ–Ω–∫–∞ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —É–ø—Ä–∞–≤–ª—è—Ç—å —ç–º–æ—Ü–∏—è–º–∏:
‚Ä¢ –ö–æ–Ω—Ç—Ä–æ–ª—å –≥–Ω–µ–≤–∞ –∏ –∞–≥—Ä–µ—Å—Å–∏–∏
‚Ä¢ –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å
‚Ä¢ –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∫ –ø—Ä–æ—â–µ–Ω–∏—é
‚Ä¢ –°—Ç—Ä–µ—Å—Å–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å
‚Ä¢ –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞

*–ù–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–æ—Ä–∏–∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π —Ä–µ–≥—É–ª—è—Ü–∏–∏ –∏ attachment theory*""",
        
        "–ò–Ω—Ç–∏–º–Ω–æ—Å—Ç—å –∏ –ø—Ä–∏–Ω—É–∂–¥–µ–Ω–∏–µ": """üíï **–ò–Ω—Ç–∏–º–Ω–æ—Å—Ç—å –∏ –ø—Ä–∏–Ω—É–∂–¥–µ–Ω–∏–µ**

–ê–Ω–∞–ª–∏–∑ –ø–æ–≤–µ–¥–µ–Ω–∏—è –≤ –∏–Ω—Ç–∏–º–Ω–æ–π —Å—Ñ–µ—Ä–µ:
‚Ä¢ –£–≤–∞–∂–µ–Ω–∏–µ –∫ —Å–æ–≥–ª–∞—Å–∏—é –∏ –≥—Ä–∞–Ω–∏—Ü–∞–º
‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–∏–º–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è
‚Ä¢ –ü—Ä–∏–Ω—É–∂–¥–µ–Ω–∏–µ –∏ —Å–µ–∫—Å—É–∞–ª—å–Ω–∞—è –∞–≥—Ä–µ—Å—Å–∏—è
‚Ä¢ –ö–æ–Ω—Ç—Ä–æ–ª—å –≤–Ω–µ—à–Ω–æ—Å—Ç–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
‚Ä¢ –†–µ–≤–Ω–æ—Å—Ç—å –∫ –ø—Ä–æ—à–ª—ã–º –æ—Ç–Ω–æ—à–µ–Ω–∏—è–º

*–û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è—Ö —Å–µ–∫—Å—É–∞–ª—å–Ω–æ–≥–æ –ø—Ä–∏–Ω—É–∂–¥–µ–Ω–∏—è*""",
        
        "–°–æ—Ü–∏–∞–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ": """üë• **–°–æ—Ü–∏–∞–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ**

–û—Ü–µ–Ω–∫–∞ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:
‚Ä¢ –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–≤–µ–¥–µ–Ω–∏—è –≤ —Ä–∞–∑–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö
‚Ä¢ –û—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ –ª—é–¥—è–º —Ä–∞–∑–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
‚Ä¢ –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∫ –¥—Ä—É–∂–µ—Å–∫–∏–º –æ—Ç–Ω–æ—à–µ–Ω–∏—è–º
‚Ä¢ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –≤–∑–∞–∏–º–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è
‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ "–º–∞—Å–æ–∫" –∏ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π –º–∏–º–∏–∫—Ä–∏–∏

*–ù–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–æ—Ä–∏–∏ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏ –∏ –º–∞–∫–∏–∞–≤–µ–ª–ª–∏–∑–º–∞*"""
    }
    
    description = block_descriptions.get(block_name, f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–ª–æ–∫–µ '{block_name}' –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
    
    await callback.answer(description, show_alert=True)


@router.callback_query(F.data == "prof_my_profiles")
@handle_errors
async def show_my_profiles(callback: CallbackQuery):
    """Show user's saved profiles"""
    # TODO: Get actual profiles count from database
    profiles_count = 0
    
    await callback.message.edit_text(
        "üìã **–ú–æ–∏ –ø—Ä–æ—Ñ–∏–ª–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤**\n\n" + 
        ("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π.\n\n"
         "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è "
         "–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏–π." if profiles_count == 0 
         else f"–£ –≤–∞—Å {profiles_count} —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π."),
        reply_markup=profiler_my_profiles_kb(profiles_count),
        parse_mode="Markdown"
    )
    await callback.answer() 
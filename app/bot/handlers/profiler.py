"""Profiler handler for partner analysis"""

import asyncio
from typing import Dict, Any
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, BufferedInputFile
from aiogram.fsm.context import FSMContext
from loguru import logger

from app.bot.states import ProfilerStates
from app.bot.keyboards.inline import get_profiler_keyboard, get_profiler_navigation_keyboard
from app.bot.middlewares.dependencies import get_dependencies
from app.services.ai_service import AIService
from app.services.html_pdf_service import HTMLPDFService
from app.services.user_service import UserService
from app.services.profile_service import ProfileService
from app.utils.exceptions import ServiceError
from app.utils.enums import AnalysisType
from app.prompts.profiler_full_questions import get_all_questions


router = Router()


@router.callback_query(F.data == "profiler_full")
async def start_profiler(callback: CallbackQuery, state: FSMContext):
    """Start partner profiling process"""
    try:
        await callback.answer()
        
        # Get all questions
        questions = get_all_questions()
        
        # Initialize state
        await state.set_state(ProfilerStates.answering_questions)
        await state.update_data(
            questions=questions,
            current_question=0,
            answers=[]
        )
        
        # Send first question
        first_question = questions[0]
        await callback.message.edit_text(
            f"üîç <b>–ü—Ä–æ—Ñ–∞–π–ª–∏–Ω–≥ –ø–∞—Ä—Ç–Ω–µ—Ä–∞</b>\n\n"
            f"–í–æ–ø—Ä–æ—Å 1 –∏–∑ {len(questions)}:\n\n"
            f"<b>{first_question['question']}</b>\n\n"
            f"üí° {first_question['hint']}",
            parse_mode="HTML",
            reply_markup=get_profiler_navigation_keyboard(0, len(questions))
        )
        
    except Exception as e:
        logger.error(f"Error starting profiler: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ—Ñ–∞–π–ª–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_profiler_keyboard()
        )


@router.message(ProfilerStates.answering_questions)
async def handle_answer(message: Message, state: FSMContext):
    """Handle user answer to profiling question"""
    try:
        data = await state.get_data()
        questions = data.get('questions', [])
        current_question = data.get('current_question', 0)
        answers = data.get('answers', [])
        
        # Save answer
        answer_text = message.text
        answers.append({
            'question_id': current_question,
            'question': questions[current_question]['question'],
            'answer': answer_text
        })
        
        # Move to next question
        next_question = current_question + 1
        
        if next_question < len(questions):
            # Update state
            await state.update_data(
                current_question=next_question,
                answers=answers
            )
            
            # Send next question
            question = questions[next_question]
            await message.answer(
                f"üîç <b>–ü—Ä–æ—Ñ–∞–π–ª–∏–Ω–≥ –ø–∞—Ä—Ç–Ω–µ—Ä–∞</b>\n\n"
                f"–í–æ–ø—Ä–æ—Å {next_question + 1} –∏–∑ {len(questions)}:\n\n"
                f"<b>{question['question']}</b>\n\n"
                f"üí° {question['hint']}",
                parse_mode="HTML",
                reply_markup=get_profiler_navigation_keyboard(next_question, len(questions))
            )
        else:
            # All questions answered - start analysis
            await state.update_data(answers=answers)
            await start_analysis(message, state)
            
    except Exception as e:
        logger.error(f"Error handling answer: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )


async def start_analysis(message: Message, state: FSMContext):
    """Start AI analysis of answers"""
    try:
        # Get dependencies
        deps = get_dependencies()
        ai_service: AIService = deps['ai_service']
        html_pdf_service: HTMLPDFService = deps['html_pdf_service']
        user_service: UserService = deps['user_service']
        profile_service: ProfileService = deps['profile_service']
        
        # Get user data
        user_id = message.from_user.id
        data = await state.get_data()
        answers = data.get('answers', [])
        
        # Get partner name if available
        partner_name = "–ü–∞—Ä—Ç–Ω–µ—Ä"
        try:
            user_profile = await profile_service.get_profile(user_id)
            if user_profile and user_profile.partner_name:
                partner_name = user_profile.partner_name
        except:
            pass
        
        # Send analysis start message
        analysis_msg = await message.answer(
            "üîç <b>–ê–Ω–∞–ª–∏–∑ –Ω–∞—á–∞—Ç</b>\n\n"
            "‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã...\n"
            "üìä –ü—Ä–æ–≤–æ–∂—É –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑...\n"
            "üéØ –í—ã—è–≤–ª—è—é –∫—Ä–∞—Å–Ω—ã–µ —Ñ–ª–∞–≥–∏...\n\n"
            "<i>–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 2 –º–∏–Ω—É—Ç</i>",
            parse_mode="HTML"
        )
        
        # Perform AI analysis
        try:
            analysis_result = await ai_service.profile_partner(answers, user_id)
            
            # Update progress
            await analysis_msg.edit_text(
                "üîç <b>–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω</b>\n\n"
                "‚úÖ –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å –≥–æ—Ç–æ–≤\n"
                "üìã –ì–µ–Ω–µ—Ä–∏—Ä—É—é PDF –æ—Ç—á–µ—Ç...\n\n"
                "<i>–ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ!</i>",
                parse_mode="HTML"
            )
            
            # Generate PDF report
            pdf_bytes = await html_pdf_service.generate_partner_report_html(
                analysis_result,
                user_id,
                partner_name
            )
            
            # Save analysis to database
            try:
                await user_service.save_analysis(
                    user_id=user_id,
                    analysis_type=AnalysisType.PARTNER_PROFILE,
                    analysis_data=analysis_result,
                    questions=answers
                )
            except Exception as e:
                logger.warning(f"Failed to save analysis to DB: {e}")
            
            # Send results
            await send_analysis_results(message, analysis_result, pdf_bytes, partner_name)
            
        except Exception as e:
            logger.error(f"Analysis failed: {e}")
            await analysis_msg.edit_text(
                "‚ùå <b>–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞</b>\n\n"
                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.\n\n"
                f"–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {str(e)[:100]}",
                parse_mode="HTML",
                reply_markup=get_profiler_keyboard()
            )
            
    except Exception as e:
        logger.error(f"Error in start_analysis: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
            reply_markup=get_profiler_keyboard()
        )
    finally:
        # Clear state
        await state.clear()


async def send_analysis_results(
    message: Message,
    analysis_result: Dict[str, Any],
    pdf_bytes: bytes,
    partner_name: str
):
    """Send analysis results to user"""
    try:
        # Extract key metrics
        overall_risk = analysis_result.get('overall_risk_score', 0)
        urgency_level = analysis_result.get('urgency_level', 'UNKNOWN')
        block_scores = analysis_result.get('block_scores', {})
        
        # Determine risk emoji and message
        if overall_risk >= 80:
            risk_emoji = "üö®"
            risk_level = "–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô"
            risk_message = "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Å–µ—Ä—å–µ–∑–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ —Ç–æ–∫—Å–∏—á–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è!"
        elif overall_risk >= 60:
            risk_emoji = "‚ö†Ô∏è"
            risk_level = "–í–´–°–û–ö–ò–ô"
            risk_message = "–í—ã—è–≤–ª–µ–Ω—ã –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –≤ –ø–æ–≤–µ–¥–µ–Ω–∏–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞."
        elif overall_risk >= 40:
            risk_emoji = "üü°"
            risk_level = "–°–†–ï–î–ù–ò–ô"
            risk_message = "–ï—Å—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–µ–≤–æ–∂–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏."
        else:
            risk_emoji = "‚úÖ"
            risk_level = "–ù–ò–ó–ö–ò–ô"
            risk_message = "–°–µ—Ä—å–µ–∑–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ."
        
        # Format block scores
        block_names = {
            'narcissism': '–ù–∞—Ä—Ü–∏—Å—Å–∏–∑–º',
            'control': '–ö–æ–Ω—Ç—Ä–æ–ª—å',
            'gaslighting': '–ì–∞–∑–ª–∞–π—Ç–∏–Ω–≥',
            'emotion': '–≠–º–æ—Ü–∏–∏',
            'intimacy': '–ò–Ω—Ç–∏–º–Ω–æ—Å—Ç—å',
            'social': '–°–æ—Ü–∏–∞–ª—å–Ω–æ–µ'
        }
        
        scores_text = ""
        for block_key, score in block_scores.items():
            if block_key in block_names:
                scores_text += f"‚Ä¢ {block_names[block_key]}: {score:.1f}/10\n"
        
        # Create summary message
        summary_text = (
            f"üîç <b>–ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù</b>\n\n"
            f"üë§ <b>–ü–∞—Ä—Ç–Ω–µ—Ä:</b> {partner_name}\n"
            f"{risk_emoji} <b>–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞:</b> {overall_risk:.1f}% ({risk_level})\n\n"
            f"üìä <b>–î–µ—Ç–∞–ª—å–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏:</b>\n{scores_text}\n"
            f"üí≠ <b>–ó–∞–∫–ª—é—á–µ–Ω–∏–µ:</b> {risk_message}\n\n"
            f"üìÑ <b>–ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF</b>\n"
            f"–í –æ—Ç—á–µ—Ç–µ: –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑, –∫—Ä–∞—Å–Ω—ã–µ —Ñ–ª–∞–≥–∏, —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
        )
        
        # Send PDF file
        pdf_file = BufferedInputFile(
            pdf_bytes,
            filename=f"partner_analysis_{partner_name}_{overall_risk:.0f}%.pdf"
        )
        
        await message.answer_document(
            document=pdf_file,
            caption=summary_text,
            parse_mode="HTML",
            reply_markup=get_profiler_keyboard()
        )
        
        # Send additional safety message for high risk cases
        if overall_risk >= 60:
            safety_text = (
                "‚ö†Ô∏è <b>–í–ê–ñ–ù–û</b>\n\n"
                "–ê–Ω–∞–ª–∏–∑ –≤—ã—è–≤–∏–ª —Å–µ—Ä—å–µ–∑–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:\n"
                "‚Ä¢ üÜò –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –ø—Å–∏—Ö–æ–ª–æ–≥—É\n"
                "‚Ä¢ üõ°Ô∏è –°–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏\n"
                "‚Ä¢ üìû –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–º–µ—Ä–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö —Å–ª—É–∂–±\n"
                "‚Ä¢ üë• –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Å–≤—è–∑—å —Å –±–ª–∏–∑–∫–∏–º–∏\n\n"
                "–ü–æ–º–Ω–∏—Ç–µ: –≤–∞—à–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –≤–∞–∂–Ω–µ–µ –≤—Å–µ–≥–æ!"
            )
            await message.answer(safety_text, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"Error sending results: {e}")
        await message.answer(
            "‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. "
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_profiler_keyboard()
        )


@router.callback_query(F.data.startswith("profiler_nav_"))
async def handle_navigation(callback: CallbackQuery, state: FSMContext):
    """Handle navigation between questions"""
    try:
        await callback.answer()
        
        action = callback.data.split("_")[-1]
        data = await state.get_data()
        questions = data.get('questions', [])
        current_question = data.get('current_question', 0)
        
        if action == "back" and current_question > 0:
            new_question = current_question - 1
            await state.update_data(current_question=new_question)
            
            question = questions[new_question]
            await callback.message.edit_text(
                f"üîç <b>–ü—Ä–æ—Ñ–∞–π–ª–∏–Ω–≥ –ø–∞—Ä—Ç–Ω–µ—Ä–∞</b>\n\n"
                f"–í–æ–ø—Ä–æ—Å {new_question + 1} –∏–∑ {len(questions)}:\n\n"
                f"<b>{question['question']}</b>\n\n"
                f"üí° {question['hint']}",
                parse_mode="HTML",
                reply_markup=get_profiler_navigation_keyboard(new_question, len(questions))
            )
        
        elif action == "skip":
            # Skip current question
            answers = data.get('answers', [])
            answers.append({
                'question_id': current_question,
                'question': questions[current_question]['question'],
                'answer': "–ü—Ä–æ–ø—É—â–µ–Ω–æ"
            })
            
            next_question = current_question + 1
            if next_question < len(questions):
                await state.update_data(
                    current_question=next_question,
                    answers=answers
                )
                
                question = questions[next_question]
                await callback.message.edit_text(
                    f"üîç <b>–ü—Ä–æ—Ñ–∞–π–ª–∏–Ω–≥ –ø–∞—Ä—Ç–Ω–µ—Ä–∞</b>\n\n"
                    f"–í–æ–ø—Ä–æ—Å {next_question + 1} –∏–∑ {len(questions)}:\n\n"
                    f"<b>{question['question']}</b>\n\n"
                    f"üí° {question['hint']}",
                    parse_mode="HTML",
                    reply_markup=get_profiler_navigation_keyboard(next_question, len(questions))
                )
            else:
                # All questions done
                await state.update_data(answers=answers)
                await start_analysis(callback.message, state)
        
        elif action == "finish":
            # Finish early
            await start_analysis(callback.message, state)
            
    except Exception as e:
        logger.error(f"Error handling navigation: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_profiler_keyboard()
        )


@router.callback_query(F.data == "profiler_back")
async def back_to_profiler(callback: CallbackQuery, state: FSMContext):
    """Return to profiler menu"""
    await callback.answer()
    await state.clear()
    
    await callback.message.edit_text(
        "üîç <b>–ü—Ä–æ—Ñ–∞–π–ª–∏–Ω–≥ –ø–∞—Ä—Ç–Ω–µ—Ä–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞:",
        parse_mode="HTML",
        reply_markup=get_profiler_keyboard()
    )
"""Profiler handler for partner analysis"""

import asyncio
from typing import Dict, Any
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from loguru import logger

from app.bot.states import ProfilerStates
from app.bot.keyboards.inline import profiler_menu_kb, get_profiler_keyboard, get_profiler_navigation_keyboard
from app.services.ai_service import AIService
from app.services.html_pdf_service import HTMLPDFService
from app.services.user_service import UserService
from app.services.profile_service import ProfileService
from app.utils.exceptions import ServiceError
from app.utils.enums import AnalysisType
from app.prompts.profiler_full_questions import get_all_questions

router = Router()


@router.callback_query(F.data == "profiler_menu")
async def show_profiler_menu(callback: CallbackQuery, state: FSMContext):
    """Show profiler menu"""
    try:
        await state.clear()
        await callback.message.edit_text(
            "üîç <b>–ü—Ä–æ—Ñ–∞–π–ª–µ—Ä –ø–∞—Ä—Ç–Ω–µ—Ä–∞</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            parse_mode="HTML",
            reply_markup=profiler_menu_kb()
        )
    except Exception as e:
        logger.error(f"Error showing profiler menu: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.callback_query(F.data == "create_profile")
async def create_new_profile(callback: CallbackQuery, state: FSMContext):
    """Create new profile - show options"""
    try:
        await callback.message.edit_text(
            "üìù <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è:",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üéØ –ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å (28 –≤–æ–ø—Ä–æ—Å–æ–≤)", callback_data="start_profiler_full")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="profiler_menu")]
            ])
        )
    except Exception as e:
        logger.error(f"Error in create_new_profile: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.callback_query(F.data == "my_profiles")
async def show_my_profiles(callback: CallbackQuery, state: FSMContext):
    """Show user's existing profiles"""
    try:
        await callback.message.edit_text(
            "üìÇ <b>–ú–æ–∏ –ø—Ä–æ—Ñ–∏–ª–∏</b>\n\n"
            "üöß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n\n"
            "–ó–¥–µ—Å—å –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤–∞—à–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤.",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="profiler_menu")]
            ])
        )
    except Exception as e:
        logger.error(f"Error in show_my_profiles: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.callback_query(F.data == "profile_recommendations")
async def show_profile_recommendations(callback: CallbackQuery, state: FSMContext):
    """Show profile recommendations"""
    try:
        await callback.message.edit_text(
            "üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</b>\n\n"
            "üöß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n\n"
            "–ó–¥–µ—Å—å –±—É–¥—É—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π.",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="profiler_menu")]
            ])
        )
    except Exception as e:
        logger.error(f"Error in show_profile_recommendations: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.callback_query(F.data == "start_profiler_full")
async def start_profiler_full(callback: CallbackQuery, state: FSMContext):
    """Start full profiler process"""
    try:
        # Get all questions
        questions = get_all_questions()
        question_order = [
            "narcissism_q1", "narcissism_q2", "narcissism_q3", "narcissism_q4", "narcissism_q5", "narcissism_q6",
            "control_q1", "control_q2", "control_q3", "control_q4", "control_q5", "control_q6",
            "gaslighting_q1", "gaslighting_q2", "gaslighting_q3", "gaslighting_q4", "gaslighting_q5",
            "emotion_q1", "emotion_q2", "emotion_q3", "emotion_q4",
            "intimacy_q1", "intimacy_q2", "intimacy_q3",
            "social_q1", "social_q2", "social_q3", "social_q4"
        ]
        
        # Initialize state
        await state.set_state(ProfilerStates.answering_questions)
        await state.update_data(
            questions=questions,
            question_order=question_order,
            current_question=0,
            answers={}
        )
        
        # Send first question
        first_question_id = question_order[0]
        first_question = questions[first_question_id]
        
        # Format question text
        question_text = f"""üîç <b>–ü—Ä–æ—Ñ–∞–π–ª–∏–Ω–≥ –ø–∞—Ä—Ç–Ω–µ—Ä–∞</b>

üìã –í–æ–ø—Ä–æ—Å 1 –∏–∑ {len(question_order)}

üß† <b>–ë–ª–æ–∫:</b> –ù–∞—Ä—Ü–∏—Å—Å–∏–∑–º –∏ –≥—Ä–∞–Ω–¥–∏–æ–∑–Ω–æ—Å—Ç—å

<b>{first_question['text']}</b>

üí≠ <i>{first_question['context']}</i>

–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç:"""
        
        # Create options keyboard
        options = []
        for i, option in enumerate(first_question['options']):
            options.append([InlineKeyboardButton(text=f"{i+1}. {option[:50]}{'...' if len(option) > 50 else ''}", callback_data=f"answer_{i}")])
        
        options.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="profiler_menu")])
        
        await callback.message.edit_text(
            question_text,
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=options)
        )
        
    except Exception as e:
        logger.error(f"Error starting full profiler: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ—Ñ–∞–π–ª–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=profiler_menu_kb()
        )


@router.callback_query(F.data.startswith("answer_"))
async def handle_answer(callback: CallbackQuery, state: FSMContext, ai_service: AIService, html_pdf_service: HTMLPDFService, user_service: UserService, profile_service: ProfileService):
    """Handle user answer to profiling question"""
    try:
        # Get answer index
        answer_index = int(callback.data.split("_")[1])
        
        # Get state data
        data = await state.get_data()
        questions = data.get('questions', {})
        question_order = data.get('question_order', [])
        current_question = data.get('current_question', 0)
        answers = data.get('answers', {})
        
        # Save answer
        current_question_id = question_order[current_question]
        answers[current_question_id] = answer_index
        
        # Move to next question
        next_question = current_question + 1
        
        if next_question < len(question_order):
            # Update state
            await state.update_data(
                current_question=next_question,
                answers=answers
            )
            
            # Send next question
            next_question_id = question_order[next_question]
            question = questions[next_question_id]
            
            # Get block name
            block_names = {
                "narcissism": "–ù–∞—Ä—Ü–∏—Å—Å–∏–∑–º –∏ –≥—Ä–∞–Ω–¥–∏–æ–∑–Ω–æ—Å—Ç—å",
                "control": "–ö–æ–Ω—Ç—Ä–æ–ª—å –∏ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–∏",
                "gaslighting": "–ì–∞–∑–ª–∞–π—Ç–∏–Ω–≥ –∏ –∏—Å–∫–∞–∂–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏",
                "emotion": "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ä–µ–≥—É–ª—è—Ü–∏—è",
                "intimacy": "–ò–Ω—Ç–∏–º–Ω–æ—Å—Ç—å –∏ –ø—Ä–∏–Ω—É–∂–¥–µ–Ω–∏–µ",
                "social": "–°–æ—Ü–∏–∞–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ"
            }
            block_name = block_names.get(question['block'], question['block'])
            
            # Format question text
            question_text = f"""üîç <b>–ü—Ä–æ—Ñ–∞–π–ª–∏–Ω–≥ –ø–∞—Ä—Ç–Ω–µ—Ä–∞</b>

üìã –í–æ–ø—Ä–æ—Å {next_question + 1} –∏–∑ {len(question_order)}

{get_block_emoji(question['block'])} <b>–ë–ª–æ–∫:</b> {block_name}

<b>{question['text']}</b>

üí≠ <i>{question['context']}</i>

–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç:"""
            
            # Create options keyboard
            options = []
            for i, option in enumerate(question['options']):
                options.append([InlineKeyboardButton(text=f"{i+1}. {option[:50]}{'...' if len(option) > 50 else ''}", callback_data=f"answer_{i}")])
            
            options.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="profiler_menu")])
            
            await callback.message.edit_text(
                question_text,
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=options)
            )
        else:
            # All questions answered - start analysis
            await state.update_data(answers=answers)
            await start_analysis(callback.message, state, ai_service, html_pdf_service, user_service, profile_service)
            
    except Exception as e:
        logger.error(f"Error handling answer: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞")


def get_block_emoji(block: str) -> str:
    """Get emoji for block"""
    block_emoji = {
        "narcissism": "üß†",
        "control": "üéØ", 
        "gaslighting": "üîÑ",
        "emotion": "üí≠",
        "intimacy": "üíï",
        "social": "üë•"
    }
    return block_emoji.get(block, "‚ùì")


async def start_analysis(message: Message, state: FSMContext, ai_service: AIService, html_pdf_service: HTMLPDFService, user_service: UserService, profile_service: ProfileService):
    """Start AI analysis of answers"""
    try:
        # Get user data
        user_id = message.from_user.id
        data = await state.get_data()
        answers = data.get('answers', {})
        
        # Get partner name if available
        partner_name = "–ü–∞—Ä—Ç–Ω–µ—Ä"
        try:
            user_profile = await profile_service.get_profile(user_id)
            if user_profile and user_profile.partner_name:
                partner_name = user_profile.partner_name
        except:
            pass
        
        # Send analysis start message
        analysis_msg = await message.answer(
            "üîç <b>–ê–Ω–∞–ª–∏–∑ –Ω–∞—á–∞—Ç</b>\n\n"
            "‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã...\n"
            "üìä –ü—Ä–æ–≤–æ–∂—É –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑...\n"
            "üéØ –í—ã—è–≤–ª—è—é –∫—Ä–∞—Å–Ω—ã–µ —Ñ–ª–∞–≥–∏...\n\n"
            "<i>–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 2 –º–∏–Ω—É—Ç</i>",
            parse_mode="HTML"
        )
        
        # Convert answers to format expected by AI service
        formatted_answers = []
        questions = data.get('questions', {})
        for question_id, answer_index in answers.items():
            question = questions.get(question_id, {})
            options = question.get('options', [])
            if answer_index < len(options):
                formatted_answers.append({
                    'question_id': question_id,
                    'question': question.get('text', ''),
                    'answer': options[answer_index]
                })
        
        # Perform AI analysis
        try:
            analysis_result = await ai_service.profile_partner(formatted_answers, user_id)
            
            # Update progress
            await analysis_msg.edit_text(
                "üîç <b>–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω</b>\n\n"
                "‚úÖ –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å –≥–æ—Ç–æ–≤\n"
                "üìã –ì–µ–Ω–µ—Ä–∏—Ä—É—é PDF –æ—Ç—á–µ—Ç...\n\n"
                "<i>–ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ!</i>",
                parse_mode="HTML"
            )
            
            # Generate PDF report
            pdf_bytes = await html_pdf_service.generate_partner_report_html(
                analysis_result,
                user_id,
                partner_name
            )
            
            # Save analysis to database
            try:
                await user_service.save_analysis(
                    user_id=user_id,
                    analysis_type=AnalysisType.PARTNER_PROFILE,
                    analysis_data=analysis_result,
                    questions=formatted_answers
                )
            except Exception as e:
                logger.warning(f"Failed to save analysis to DB: {e}")
            
            # Send results
            await send_analysis_results(message, analysis_result, pdf_bytes, partner_name)
            
        except Exception as e:
            logger.error(f"Analysis failed: {e}")
            await analysis_msg.edit_text(
                "‚ùå <b>–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞</b>\n\n"
                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.\n\n"
                f"–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {str(e)[:100]}",
                parse_mode="HTML",
                reply_markup=get_profiler_keyboard()
            )
            
    except Exception as e:
        logger.error(f"Error in start_analysis: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
            reply_markup=get_profiler_keyboard()
        )
    finally:
        # Clear state
        await state.clear()


async def send_analysis_results(
    message: Message,
    analysis_result: Dict[str, Any],
    pdf_bytes: bytes,
    partner_name: str
):
    """Send analysis results to user"""
    try:
        # Extract key metrics
        overall_risk = analysis_result.get('overall_risk_score', 0)
        urgency_level = analysis_result.get('urgency_level', 'UNKNOWN')
        block_scores = analysis_result.get('block_scores', {})
        
        # Determine risk emoji and message
        if overall_risk >= 80:
            risk_emoji = "üö®"
            risk_level = "–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô"
            risk_message = "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Å–µ—Ä—å–µ–∑–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ —Ç–æ–∫—Å–∏—á–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è!"
        elif overall_risk >= 60:
            risk_emoji = "‚ö†Ô∏è"
            risk_level = "–í–´–°–û–ö–ò–ô"
            risk_message = "–í—ã—è–≤–ª–µ–Ω—ã –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –≤ –ø–æ–≤–µ–¥–µ–Ω–∏–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞."
        elif overall_risk >= 40:
            risk_emoji = "üü°"
            risk_level = "–°–†–ï–î–ù–ò–ô"
            risk_message = "–ï—Å—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–µ–≤–æ–∂–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏."
        else:
            risk_emoji = "‚úÖ"
            risk_level = "–ù–ò–ó–ö–ò–ô"
            risk_message = "–°–µ—Ä—å–µ–∑–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ."
        
        # Format block scores
        block_names = {
            'narcissism': '–ù–∞—Ä—Ü–∏—Å—Å–∏–∑–º',
            'control': '–ö–æ–Ω—Ç—Ä–æ–ª—å',
            'gaslighting': '–ì–∞–∑–ª–∞–π—Ç–∏–Ω–≥',
            'emotion': '–≠–º–æ—Ü–∏–∏',
            'intimacy': '–ò–Ω—Ç–∏–º–Ω–æ—Å—Ç—å',
            'social': '–°–æ—Ü–∏–∞–ª—å–Ω–æ–µ'
        }
        
        scores_text = ""
        for block, score in block_scores.items():
            block_name = block_names.get(block, block)
            scores_text += f"‚Ä¢ {block_name}: {score}/10\n"
        
        # Create summary message
        summary_text = f"""üìä <b>–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω</b>

üë§ <b>–ü–∞—Ä—Ç–Ω–µ—Ä:</b> {partner_name}

{risk_emoji} <b>–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞:</b> {risk_level} ({overall_risk}%)

{risk_message}

<b>–î–µ—Ç–∞–ª—å–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏:</b>
{scores_text}

üìÑ –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–¥–µ–ª—å–Ω—ã–º —Ñ–∞–π–ª–æ–º."""
        
        # Send summary
        await message.answer(
            summary_text,
            parse_mode="HTML",
            reply_markup=get_profiler_keyboard()
        )
        
        # Send PDF report
        from io import BytesIO
        pdf_file = BytesIO(pdf_bytes)
        pdf_file.name = f"profile_{partner_name}_{message.from_user.id}.pdf"
        
        await message.answer_document(
            document=pdf_file,
            caption=f"üìÑ –ü–æ–ª–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ {partner_name}",
            reply_markup=get_profiler_keyboard()
        )
        
    except Exception as e:
        logger.error(f"Error sending analysis results: {e}")
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞.",
            reply_markup=get_profiler_keyboard()
        )


@router.callback_query(F.data.startswith("profiler_nav_"))
async def handle_navigation(callback: CallbackQuery, state: FSMContext):
    """Handle profiler navigation"""
    try:
        action = callback.data.split("_")[2]
        
        if action == "back":
            await callback.message.edit_text(
                "üîç <b>–ü—Ä–æ—Ñ–∞–π–ª–µ—Ä –ø–∞—Ä—Ç–Ω–µ—Ä–∞</b>\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                parse_mode="HTML",
                reply_markup=profiler_menu_kb()
            )
        elif action == "skip":
            # Handle skip logic if needed
            await callback.answer("–ü—Ä–æ–ø—É—Å–∫ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
        else:
            await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
            
    except Exception as e:
        logger.error(f"Error in navigation: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.callback_query(F.data == "profiler_back")
async def back_to_profiler(callback: CallbackQuery, state: FSMContext):
    """Go back to profiler menu"""
    try:
        await state.clear()
        await callback.message.edit_text(
            "üîç <b>–ü—Ä–æ—Ñ–∞–π–ª–µ—Ä –ø–∞—Ä—Ç–Ω–µ—Ä–∞</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            parse_mode="HTML",
            reply_markup=profiler_menu_kb()
        )
    except Exception as e:
        logger.error(f"Error going back to profiler: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
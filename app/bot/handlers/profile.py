"""User profile handler"""

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from app.utils.decorators import handle_errors
from app.bot.keyboards.inline import (
    profile_menu_kb, subscription_menu_kb, back_to_main_kb, 
    profile_edit_kb, back_to_profile_kb, settings_menu_kb,
    notification_settings_detailed_kb, notification_time_kb,
    timezone_kb, confirm_clear_data_kb
)
from app.services.user_service import UserService
from app.core.logging import logger
from app.core.database import get_session
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardButton

router = Router()

@router.callback_query(F.data == "profile_menu")
@handle_errors
async def show_profile_menu(callback: CallbackQuery):
    """Show user profile menu"""
    menu_text = """
‚öôÔ∏è **–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å**

–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞—à–∏–º –ø—Ä–æ—Ñ–∏–ª–µ–º –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏:

üìù **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å** - –∏–∑–º–µ–Ω–∏—Ç—å –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
üìä **–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞** - –ø—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –∞–Ω–∞–ª–∏–∑–æ–≤
üèÜ **–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è** - –≤–∞—à–∏ —É—Å–ø–µ—Ö–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏** - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è

–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?
"""
    
    await callback.message.edit_text(
        menu_text,
        reply_markup=profile_menu_kb(),
        parse_mode="Markdown"
    )
    await callback.answer()

@router.callback_query(F.data == "edit_profile")
@handle_errors
async def edit_profile(callback: CallbackQuery) -> None:
    """Show profile editing menu"""
    try:
        async with get_session() as session:
            user_service = UserService(session)
            # Get user data from database
            user = await user_service.get_user_by_telegram_id(callback.from_user.id)
            
            if not user:
                await callback.message.edit_text(
                    "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
                    reply_markup=back_to_profile_kb()
                )
                return
            
            # Get subscription info
            subscription = None
            if user.subscriptions:
                subscription = user.subscriptions[0]  # Get the latest subscription
            
            # Format gender display
            gender_display = "–ù–µ —É–∫–∞–∑–∞–Ω"
            if user.gender == "male":
                gender_display = "–ú—É–∂—Å–∫–æ–π"
            elif user.gender == "female":
                gender_display = "–ñ–µ–Ω—Å–∫–∏–π"
            elif user.gender:
                gender_display = user.gender.capitalize()
            
            # Format age group display
            age_display = user.age_group or "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
            
            # Format interests
            interests_text = "–ù–µ —É–∫–∞–∑–∞–Ω—ã"
            if user.interests_list:
                interests_text = ", ".join(user.interests_list)
            
            # Format goals
            goals_text = "–ù–µ —É–∫–∞–∑–∞–Ω—ã"
            if user.goals_list:
                goals_text = ", ".join(user.goals_list)
            
            profile_text = f"""üìù **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è**

üë§ **–ò–º—è:** {user.display_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üöª **–ü–æ–ª:** {gender_display}
üéÇ **–í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞:** {age_display}
üí´ **–ò–Ω—Ç–µ—Ä–µ—Å—ã:** {interests_text}
üéØ **–¶–µ–ª–∏:** {goals_text}
üìã **–û —Å–µ–±–µ:** {user.bio or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}

üíé **–ü–æ–¥–ø–∏—Å–∫–∞:** {user.subscription_type}
üìä **–ê–Ω–∞–ª–∏–∑–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ:** {user.total_analyses}

–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start"""

            await callback.message.edit_text(
                profile_text,
                reply_markup=profile_edit_kb(),
                parse_mode="Markdown"
            )
            await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in edit_profile: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö.\n–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /start.",
            reply_markup=back_to_profile_kb()
        )

@router.callback_query(F.data == "my_stats")
@handle_errors
async def my_stats(callback: CallbackQuery):
    """Show user statistics"""
    await callback.message.edit_text(
        "üìä **–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n\n"
        "üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: –°–µ–≥–æ–¥–Ω—è\n"
        "üìù –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–Ω–∞–ª–∏–∑–æ–≤: 0\n"
        "üë§ –°–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π: 0\n"
        "üíï –¢–µ—Å—Ç–æ–≤ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏: 0\n"
        "‚≠ê –†–µ–π—Ç–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: –ù–æ–≤–∏—á–æ–∫\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ—Ç–∞ –±–æ–ª—å—à–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏!",
        reply_markup=back_to_main_kb(),
        parse_mode="Markdown"
    )
    await callback.answer()

@router.callback_query(F.data == "achievements")
@handle_errors
async def achievements(callback: CallbackQuery):
    """Show user achievements"""
    await callback.message.edit_text(
        "üèÜ **–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è**\n\n"
        "üéâ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!** ‚úÖ\n"
        "*–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –≤ PsychoDetective*\n\n"
        "üîí **–ü–µ—Ä–≤—ã–π –∞–Ω–∞–ª–∏–∑** ‚ùå\n"
        "*–ü—Ä–æ–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞*\n\n"
        "üîí **–ó–Ω–∞—Ç–æ–∫ –æ—Ç–Ω–æ—à–µ–Ω–∏–π** ‚ùå\n"
        "*–ü—Ä–æ–π–¥–∏—Ç–µ 5 —Ç–µ—Å—Ç–æ–≤ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏*\n\n"
        "üîí **–ú–∞—Å—Ç–µ—Ä –ø—Ä–æ—Ñ–∏–ª–µ–π** ‚ùå\n"
        "*–°–æ–∑–¥–∞–π—Ç–µ 3 –ø—Ä–æ—Ñ–∏–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤*",
        reply_markup=back_to_main_kb(),
        parse_mode="Markdown"
    )
    await callback.answer()

@router.callback_query(F.data == "settings")
@handle_errors
async def settings_menu(callback: CallbackQuery):
    """Show interactive settings menu"""
    async with get_session() as session:
        user_service = UserService(session)
        user = await user_service.get_user_by_telegram_id(callback.from_user.id)
        
        if not user:
            await callback.message.edit_text(
                "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
                reply_markup=back_to_main_kb()
            )
            return
        
        settings_text = f"""‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è**

üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {user.display_name}
üíé **–ü–æ–¥–ø–∏—Å–∫–∞:** {user.subscription_type}

üîî **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:** {"‚úÖ –í–∫–ª—é—á–µ–Ω—ã" if user.notifications_enabled else "‚ùå –í—ã–∫–ª—é—á–µ–Ω—ã"}
‚è∞ **–í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:** {user.notification_time}
üåç **–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å:** {user.timezone}

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–Ω–∞–ª–∏–∑–æ–≤:** {user.total_analyses}
üìÖ **–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:** {user.registration_date.strftime('%d.%m.%Y')}

–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:"""
        
        await callback.message.edit_text(
            settings_text,
            reply_markup=settings_menu_kb(),
            parse_mode="Markdown"
        )
        await callback.answer()

@router.callback_query(F.data == "subscription_menu")
@handle_errors
async def show_subscription_menu(callback: CallbackQuery):
    """Show subscription menu"""
    menu_text = """
üíé **–ü–æ–¥–ø–∏—Å–∫–∞**

–†–∞—Å—à–∏—Ä—å—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑–∞:

üíé **Premium** - –±–æ–ª—å—à–µ –∞–Ω–∞–ª–∏–∑–æ–≤ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
üëë **VIP** - –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –∞–Ω–∞–ª–∏–∑—ã –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
üí≥ **–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É** - –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–ª–∞–Ω
üìã **–ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞** - —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å

–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?
"""
    
    await callback.message.edit_text(
        menu_text,
        reply_markup=subscription_menu_kb(),
        parse_mode="Markdown"
    )
    await callback.answer()

@router.callback_query(F.data == "premium_info")
@handle_errors
async def premium_info(callback: CallbackQuery):
    """Show Premium subscription info"""
    await callback.message.edit_text(
        "üíé **Premium –ø–æ–¥–ø–∏—Å–∫–∞**\n\n"
        "üí∞ **–¶–µ–Ω–∞:** 299‚ÇΩ/–º–µ—Å—è—Ü\n\n"
        "‚ú® **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**\n"
        "‚Ä¢ 50 –∞–Ω–∞–ª–∏–∑–æ–≤ –≤ –º–µ—Å—è—Ü\n"
        "‚Ä¢ –î–µ—Ç–∞–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã\n"
        "‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤\n"
        "‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n"
        "‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã\n\n"
        "üéØ –ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è",
        reply_markup=back_to_main_kb(),
        parse_mode="Markdown"
    )
    await callback.answer()

@router.callback_query(F.data == "vip_info")
@handle_errors
async def vip_info(callback: CallbackQuery):
    """Show VIP subscription info"""
    await callback.message.edit_text(
        "üëë **VIP –ø–æ–¥–ø–∏—Å–∫–∞**\n\n"
        "üí∞ **–¶–µ–Ω–∞:** 599‚ÇΩ/–º–µ—Å—è—Ü\n\n"
        "üåü **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**\n"
        "‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –∞–Ω–∞–ª–∏–∑—ã\n"
        "‚Ä¢ AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏\n"
        "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n"
        "‚Ä¢ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç\n"
        "‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7\n"
        "‚Ä¢ –†–∞–Ω–Ω–∏–π –¥–æ—Å—Ç—É–ø –∫ –Ω–æ–≤—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º\n\n"
        "üëë –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Å–µ—Ä–≤–∏—Å–∞",
        reply_markup=back_to_main_kb(),
        parse_mode="Markdown"
    )
    await callback.answer()

@router.callback_query(F.data == "buy_subscription")
@handle_errors
async def buy_subscription(callback: CallbackQuery):
    """Handle subscription purchase"""
    await callback.message.edit_text(
        "üí≥ **–ü–æ–∫—É–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:\n\n"
        "üíé **Premium** - 299‚ÇΩ/–º–µ—Å—è—Ü\n"
        "üëë **VIP** - 599‚ÇΩ/–º–µ—Å—è—Ü\n\n"
        "üí≥ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:\n"
        "‚Ä¢ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞\n"
        "‚Ä¢ –ÆMoney\n"
        "‚Ä¢ –°–ë–ü\n\n"
        "–§—É–Ω–∫—Ü–∏—è –æ–ø–ª–∞—Ç—ã –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
        reply_markup=back_to_main_kb(),
        parse_mode="Markdown"
    )
    await callback.answer()

@router.callback_query(F.data == "my_subscription")
@handle_errors
async def my_subscription(callback: CallbackQuery):
    """Show current subscription"""
    await callback.message.edit_text(
        "üìã **–ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞**\n\n"
        "üìä **–¢–µ–∫—É—â–∏–π –ø–ª–∞–Ω:** Free\n"
        "üìÖ **–î–∞—Ç–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:** -\n"
        "‚è∞ **–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:** -\n"
        "üìà **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∞–Ω–∞–ª–∏–∑–æ–≤:** 0/3\n\n"
        "üí° –û–±–Ω–æ–≤–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π!",
        reply_markup=back_to_main_kb(),
        parse_mode="Markdown"
    )
    await callback.answer()

@router.message(Command("myprofile"))
async def my_profile(message: Message):
    """Handle user profile command"""
    await message.answer("üë§ –§—É–Ω–∫—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–º –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")


# === Settings Handlers ===

@router.callback_query(F.data == "settings_menu")
@handle_errors
async def back_to_settings_menu(callback: CallbackQuery):
    """Return to settings menu"""
    await settings_menu(callback)


@router.callback_query(F.data == "settings_notifications")
@handle_errors
async def notification_settings(callback: CallbackQuery):
    """Show detailed notification settings"""
    async with get_session() as session:
        user_service = UserService(session)
        user = await user_service.get_user_by_telegram_id(callback.from_user.id)
        
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        settings_text = f"""üîî **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π**

üì± **–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**

‚úÖ **–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Å–æ–≤–µ—Ç—ã:** {"–í–∫–ª—é—á–µ–Ω—ã" if user.daily_tips_enabled else "–í—ã–∫–ª—é—á–µ–Ω—ã"}
üìù **–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –∞–Ω–∞–ª–∏–∑–∞—Ö:** {"–í–∫–ª—é—á–µ–Ω—ã" if user.analysis_reminders_enabled else "–í—ã–∫–ª—é—á–µ–Ω—ã"}  
üìä **–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:** {"–í–∫–ª—é—á–µ–Ω–∞" if user.weekly_stats_enabled else "–í—ã–∫–ª—é—á–µ–Ω–∞"}

üîî **–í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:** {"–í–∫–ª—é—á–µ–Ω—ã" if user.notifications_enabled else "–í—ã–∫–ª—é—á–µ–Ω—ã"}

‚è∞ **–í—Ä–µ–º—è:** {user.notification_time}
üåç **–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å:** {user.timezone}

–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:"""
        
        await callback.message.edit_text(
            settings_text,
            reply_markup=notification_settings_detailed_kb(user),
            parse_mode="Markdown"
        )
        await callback.answer()


@router.callback_query(F.data == "toggle_daily_tips")
@handle_errors
async def toggle_daily_tips(callback: CallbackQuery):
    """Toggle daily tips setting"""
    async with get_session() as session:
        user_service = UserService(session)
        user = await user_service.get_user_by_telegram_id(callback.from_user.id)
        
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # Toggle setting
        user.daily_tips_enabled = not user.daily_tips_enabled
        await session.commit()
        
        status = "–≤–∫–ª—é—á–µ–Ω—ã" if user.daily_tips_enabled else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
        await callback.answer(f"üîî –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Å–æ–≤–µ—Ç—ã {status}", show_alert=True)
        
        # Refresh the settings page
        await notification_settings(callback)


@router.callback_query(F.data == "toggle_analysis_reminders")
@handle_errors
async def toggle_analysis_reminders(callback: CallbackQuery):
    """Toggle analysis reminders setting"""
    async with get_session() as session:
        user_service = UserService(session)
        user = await user_service.get_user_by_telegram_id(callback.from_user.id)
        
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # Toggle setting
        user.analysis_reminders_enabled = not user.analysis_reminders_enabled
        await session.commit()
        
        status = "–≤–∫–ª—é—á–µ–Ω—ã" if user.analysis_reminders_enabled else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
        await callback.answer(f"üìù –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –∞–Ω–∞–ª–∏–∑–∞—Ö {status}", show_alert=True)
        
        # Refresh the settings page
        await notification_settings(callback)


@router.callback_query(F.data == "toggle_weekly_stats")
@handle_errors
async def toggle_weekly_stats(callback: CallbackQuery):
    """Toggle weekly stats setting"""
    async with get_session() as session:
        user_service = UserService(session)
        user = await user_service.get_user_by_telegram_id(callback.from_user.id)
        
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # Toggle setting
        user.weekly_stats_enabled = not user.weekly_stats_enabled
        await session.commit()
        
        status = "–≤–∫–ª—é—á–µ–Ω–∞" if user.weekly_stats_enabled else "–≤—ã–∫–ª—é—á–µ–Ω–∞"
        await callback.answer(f"üìä –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {status}", show_alert=True)
        
        # Refresh the settings page
        await notification_settings(callback)


@router.callback_query(F.data == "toggle_all_notifications")
@handle_errors
async def toggle_all_notifications(callback: CallbackQuery):
    """Toggle all notifications setting"""
    async with get_session() as session:
        user_service = UserService(session)
        user = await user_service.get_user_by_telegram_id(callback.from_user.id)
        
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # Toggle setting
        user.notifications_enabled = not user.notifications_enabled
        await session.commit()
        
        status = "–≤–∫–ª—é—á–µ–Ω—ã" if user.notifications_enabled else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
        await callback.answer(f"üîî –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {status}", show_alert=True)
        
        # Refresh the settings page
        await notification_settings(callback)


@router.callback_query(F.data == "settings_time")
@handle_errors
async def notification_time_settings(callback: CallbackQuery):
    """Show notification time settings"""
    async with get_session() as session:
        user_service = UserService(session)
        user = await user_service.get_user_by_telegram_id(callback.from_user.id)
        
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        time_text = f"""‚è∞ **–í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π**

üïò **–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è:** {user.notification_time}
üåç **–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å:** {user.timezone}

üì± –í —ç—Ç–æ –≤—Ä–µ–º—è –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å:
‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Å–æ–≤–µ—Ç—ã
‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–æ–≤
‚Ä¢ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É

–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è:"""
        
        await callback.message.edit_text(
            time_text,
            reply_markup=notification_time_kb(user.notification_time),
            parse_mode="Markdown"
        )
        await callback.answer()


@router.callback_query(F.data.startswith("set_time_"))
@handle_errors
async def set_notification_time(callback: CallbackQuery):
    """Set notification time"""
    time_str = callback.data.replace("set_time_", "").replace("_", ":")
    
    async with get_session() as session:
        user_service = UserService(session)
        user = await user_service.get_user_by_telegram_id(callback.from_user.id)
        
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # Update time
        user.notification_time = time_str
        await session.commit()
        
        await callback.answer(f"‚è∞ –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {time_str}", show_alert=True)
        
        # Refresh the time settings page
        await notification_time_settings(callback)


@router.callback_query(F.data == "settings_timezone")
@handle_errors
async def timezone_settings(callback: CallbackQuery):
    """Show timezone settings"""
    async with get_session() as session:
        user_service = UserService(session)
        user = await user_service.get_user_by_telegram_id(callback.from_user.id)
        
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        timezone_text = f"""üåç **–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å**

üïò **–¢–µ–∫—É—â–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å:** {user.timezone}
‚è∞ **–í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:** {user.notification_time}

üìç –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:"""
        
        await callback.message.edit_text(
            timezone_text,
            reply_markup=timezone_kb(user.timezone),
            parse_mode="Markdown"
        )
        await callback.answer()


@router.callback_query(F.data.startswith("set_timezone_"))
@handle_errors
async def set_timezone(callback: CallbackQuery):
    """Set user timezone"""
    timezone_str = callback.data.replace("set_timezone_", "").replace("_", "/")
    
    async with get_session() as session:
        user_service = UserService(session)
        user = await user_service.get_user_by_telegram_id(callback.from_user.id)
        
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # Update timezone
        user.timezone = timezone_str
        await session.commit()
        
        await callback.answer(f"üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {timezone_str}", show_alert=True)
        
        # Refresh the timezone settings page
        await timezone_settings(callback)


@router.callback_query(F.data == "settings_weekly_stats")
@handle_errors
async def weekly_stats_settings(callback: CallbackQuery):
    """Show weekly stats settings"""
    async with get_session() as session:
        user_service = UserService(session)
        user = await user_service.get_user_by_telegram_id(callback.from_user.id)
        
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        status = "–≤–∫–ª—é—á–µ–Ω–∞" if user.weekly_stats_enabled else "–≤—ã–∫–ª—é—á–µ–Ω–∞"
        
        stats_text = f"""üìä **–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**

üìà **–°—Ç–∞—Ç—É—Å:** {status.capitalize()}

üìÖ **–ß—Ç–æ –≤–∫–ª—é—á–∞–µ—Ç –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≤–µ–¥—ë–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤
‚Ä¢ –ù–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç—ã–µ —Ç–µ–º—ã –∞–Ω–∞–ª–∏–∑–∞
‚Ä¢ –î–∏–Ω–∞–º–∏–∫–∞ –≤–∞—à–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

üì® –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ {user.notification_time}"""
        
        toggle_status = "‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å" if user.weekly_stats_enabled else "‚úÖ –í–∫–ª—é—á–∏—Ç—å"
        
        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(text=toggle_status, callback_data="toggle_weekly_stats")
        )
        builder.row(
            InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="settings_menu"),
            InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        )
        
        await callback.message.edit_text(
            stats_text,
            reply_markup=builder.as_markup(),
            parse_mode="Markdown"
        )
        await callback.answer()


@router.callback_query(F.data == "settings_clear_data")
@handle_errors
async def clear_data_warning(callback: CallbackQuery):
    """Show data clearing warning"""
    warning_text = """üóëÔ∏è **–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö**

‚ö†Ô∏è **–í–ù–ò–ú–ê–ù–ò–ï!** –≠—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏—è –Ω–µ–æ–±—Ä–∞—Ç–∏–º–∞.

üóÇÔ∏è **–ë—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã:**
‚Ä¢ –í—Å–µ –≤–∞—à–∏ –∞–Ω–∞–ª–∏–∑—ã —Ç–µ–∫—Å—Ç–æ–≤
‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤
‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (–∫—Ä–æ–º–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö)

üíæ **–ù–ï –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã:**
‚Ä¢ –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ñ–∏–ª—å (–∏–º—è, –≤–æ–∑—Ä–∞—Å—Ç, –ø–æ–ª)
‚Ä¢ –¢–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏
‚Ä¢ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏

‚ùì **–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ?**"""
    
    await callback.message.edit_text(
        warning_text,
        reply_markup=confirm_clear_data_kb(),
        parse_mode="Markdown"
    )
    await callback.answer()


@router.callback_query(F.data == "confirm_clear_data")
@handle_errors
async def confirm_clear_data(callback: CallbackQuery):
    """Clear user data"""
    async with get_session() as session:
        user_service = UserService(session)
        user = await user_service.get_user_by_telegram_id(callback.from_user.id)
        
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        try:
            # Clear user data but keep basic profile
            user.analyses_count = 0
            user.total_analyses = 0
            user.last_analysis_date = None
            user.notes = None
            
            # Reset notification settings to defaults
            user.notifications_enabled = True
            user.daily_tips_enabled = True
            user.analysis_reminders_enabled = True
            user.weekly_stats_enabled = False
            user.notification_time = "09:00"
            user.timezone = "Europe/Moscow"
            
            await session.commit()
            
            success_text = """‚úÖ **–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã**

üóÇÔ∏è **–£–¥–∞–ª–µ–Ω–æ:**
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–Ω–∞–ª–∏–∑–æ–≤
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∑–∞–º–µ—Ç–∫–∏
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–±—Ä–æ—à–µ–Ω—ã

üë§ **–í–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω**

–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞."""
            
            await callback.message.edit_text(
                success_text,
                reply_markup=back_to_main_kb(),
                parse_mode="Markdown"
            )
            await callback.answer("üóëÔ∏è –î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã", show_alert=True)
            
        except Exception as e:
            logger.error(f"Error clearing user data: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)


@router.callback_query(F.data == "settings_export_data")
@handle_errors
async def export_data(callback: CallbackQuery):
    """Export user data"""
    async with get_session() as session:
        user_service = UserService(session)
        user = await user_service.get_user_by_telegram_id(callback.from_user.id)
        
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # Generate data export
        export_data = f"""üì§ **–≠–∫—Å–ø–æ—Ä—Ç –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö**

üë§ **–ü—Ä–æ—Ñ–∏–ª—å:**
‚Ä¢ –ò–º—è: {user.display_name}
‚Ä¢ –ü–æ–ª: {user.gender or '–ù–µ —É–∫–∞–∑–∞–Ω'}
‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞: {user.age_group or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
‚Ä¢ –¢–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏: {user.subscription_type}

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.registration_date.strftime('%d.%m.%Y %H:%M')}
‚Ä¢ –í—Å–µ–≥–æ –∞–Ω–∞–ª–∏–∑–æ–≤: {user.total_analyses}
‚Ä¢ –ê–Ω–∞–ª–∏–∑–æ–≤ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ: {user.analyses_count}
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–π –∞–Ω–∞–ª–∏–∑: {user.last_analysis_date.strftime('%d.%m.%Y %H:%M') if user.last_analysis_date else '–ù–µ—Ç'}

‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏:**
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'–í–∫–ª—é—á–µ–Ω—ã' if user.notifications_enabled else '–í—ã–∫–ª—é—á–µ–Ω—ã'}
‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Å–æ–≤–µ—Ç—ã: {'–í–∫–ª—é—á–µ–Ω—ã' if user.daily_tips_enabled else '–í—ã–∫–ª—é—á–µ–Ω—ã'}
‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {'–í–∫–ª—é—á–µ–Ω—ã' if user.analysis_reminders_enabled else '–í—ã–∫–ª—é—á–µ–Ω—ã'}
‚Ä¢ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {'–í–∫–ª—é—á–µ–Ω–∞' if user.weekly_stats_enabled else '–í—ã–∫–ª—é—á–µ–Ω–∞'}
‚Ä¢ –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {user.notification_time}
‚Ä¢ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {user.timezone}

üìã –ü–æ–ª–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª–µ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω."""
        
        await callback.message.edit_text(
            export_data,
            reply_markup=back_to_main_kb(),
            parse_mode="Markdown"
        )
        await callback.answer() 
"""Text analysis handler"""

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from app.utils.decorators import handle_errors
from app.bot.keyboards.inline import analysis_menu_kb, back_to_main_kb

router = Router()

@router.callback_query(F.data == "analysis_menu")
@handle_errors
async def show_analysis_menu(callback: CallbackQuery):
    """Show analysis menu"""
    menu_text = """
üìù **–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞**

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞:

üì± **–ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–µ–ø–∏—Å–∫–∏** - –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –¥–∏–∞–ª–æ–≥–æ–º
üí¨ **–ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è** - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
üìä **–ò—Å—Ç–æ—Ä–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤** - –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã

–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?
"""
    
    await callback.message.edit_text(
        menu_text,
        reply_markup=analysis_menu_kb(),
        parse_mode="Markdown"
    )
    await callback.answer()

@router.callback_query(F.data == "analyze_chat")
@handle_errors 
async def analyze_chat(callback: CallbackQuery):
    """Handle chat analysis"""
    await callback.message.edit_text(
        "üì± **–ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–µ–ø–∏—Å–∫–∏**\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å –≤–∞—à–µ–π –ø–µ—Ä–µ–ø–∏—Å–∫–æ–π (txt, json) –∏–ª–∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞.\n\n"
        "üìã –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
        "‚Ä¢ –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç\n"
        "‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –∏–∑ WhatsApp\n"
        "‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –∏–∑ Telegram\n\n"
        "üîí –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ.",
        reply_markup=back_to_main_kb(),
        parse_mode="Markdown"
    )
    await callback.answer()

@router.callback_query(F.data == "analyze_message")
@handle_errors
async def analyze_message(callback: CallbackQuery):
    """Handle message analysis"""
    await callback.message.edit_text(
        "üí¨ **–ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è**\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.\n\n"
        "üéØ –Ø –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é:\n"
        "‚Ä¢ –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–Ω\n"
        "‚Ä¢ –°–∫—Ä—ã—Ç—ã–µ –º–æ—Ç–∏–≤—ã\n"
        "‚Ä¢ –ü—Ä–∏–∑–Ω–∞–∫–∏ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–π\n"
        "‚Ä¢ –£—Ä–æ–≤–µ–Ω—å –∏—Å–∫—Ä–µ–Ω–Ω–æ—Å—Ç–∏\n\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–∏–º —Ç–µ–∫—Å—Ç–æ–º.",
        reply_markup=back_to_main_kb(),
        parse_mode="Markdown"
    )
    await callback.answer()

@router.callback_query(F.data == "analysis_history")
@handle_errors
async def analysis_history(callback: CallbackQuery):
    """Show analysis history"""
    await callback.message.edit_text(
        "üìä **–ò—Å—Ç–æ—Ä–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤**\n\n"
        "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤.\n\n"
        "–ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –∑–¥–µ—Å—å.",
        reply_markup=back_to_main_kb(),
        parse_mode="Markdown"
    )
    await callback.answer()

@router.message(Command("analyze"))
async def analyze_text(message: Message):
    """Handle text analysis command"""
    await message.answer("üìù –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...") 
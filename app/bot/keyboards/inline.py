"""Inline keyboards for bot interface"""

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from typing import List, Optional


def build_inline_kb(rows: List[List[tuple]]) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    for row in rows:
        builder.row(*[InlineKeyboardButton(text=btn[0], callback_data=btn[1]) for btn in row])
    return builder.as_markup()


def main_menu_kb() -> InlineKeyboardMarkup:
    """Main menu keyboard"""
    return build_inline_kb([
        [("üìù –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞", "analysis_menu"), ("üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞", "profiler_menu")],
        [("üíï –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å", "compatibility_menu"), ("üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Å–æ–≤–µ—Ç—ã", "daily_menu")],
        [("‚öôÔ∏è –ü—Ä–æ—Ñ–∏–ª—å", "profile_menu"), ("üíé –ü–æ–¥–ø–∏—Å–∫–∞", "subscription_menu")],
    ])


def analysis_menu_kb() -> InlineKeyboardMarkup:
    """Text analysis menu keyboard"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(text="üì± –ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–µ–ø–∏—Å–∫–∏", callback_data="analyze_chat"),
        InlineKeyboardButton(text="üí¨ –ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è", callback_data="analyze_message")
    )
    builder.row(
        InlineKeyboardButton(text="üìä –ò—Å—Ç–æ—Ä–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤", callback_data="analysis_history")
    )
    builder.row(
        InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    )
    
    return builder.as_markup()


def profiler_menu_kb() -> InlineKeyboardMarkup:
    """Partner profiler menu keyboard"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(text="–ù–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="create_profile"),
        InlineKeyboardButton(text="–ú–æ–∏ –ø—Ä–æ—Ñ–∏–ª–∏", callback_data="my_profiles")
    )
    builder.row(
        InlineKeyboardButton(text="–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data="profile_recommendations")
    )
    builder.row(
        InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    )
    
    return builder.as_markup()


def compatibility_menu_kb() -> InlineKeyboardMarkup:
    """Compatibility test menu keyboard"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(text="üß™ –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç", callback_data="start_compatibility"),
        InlineKeyboardButton(text="üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤", callback_data="compatibility_results")
    )
    builder.row(
        InlineKeyboardButton(text="üíë –°—Ä–∞–≤–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª–∏", callback_data="compare_profiles")
    )
    builder.row(
        InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    )
    
    return builder.as_markup()


def daily_menu_kb() -> InlineKeyboardMarkup:
    """Daily content menu keyboard"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(text="üìñ –°–æ–≤–µ—Ç –¥–Ω—è", callback_data="daily_tip"),
        InlineKeyboardButton(text="üéì –£—Ä–æ–∫ –¥–Ω—è", callback_data="daily_lesson")
    )
    builder.row(
        InlineKeyboardButton(text="üí° –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–Ω—è", callback_data="daily_exercise")
    )
    builder.row(
        InlineKeyboardButton(text="üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", callback_data="notification_settings")
    )
    builder.row(
        InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    )
    
    return builder.as_markup()


def profile_menu_kb() -> InlineKeyboardMarkup:
    """User profile menu keyboard"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(text="üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="edit_profile"),
        InlineKeyboardButton(text="üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="my_stats")
    )
    builder.row(
        InlineKeyboardButton(text="üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è", callback_data="achievements"),
        InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")
    )
    builder.row(
        InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    )
    
    return builder.as_markup()


def subscription_menu_kb() -> InlineKeyboardMarkup:
    """Subscription menu keyboard"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(text="üíé Premium", callback_data="premium_info"),
        InlineKeyboardButton(text="üëë VIP", callback_data="vip_info")
    )
    builder.row(
        InlineKeyboardButton(text="üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="buy_subscription")
    )
    builder.row(
        InlineKeyboardButton(text="üìã –ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞", callback_data="my_subscription")
    )
    builder.row(
        InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    )
    
    return builder.as_markup()


def admin_menu_kb() -> InlineKeyboardMarkup:
    """Admin menu keyboard"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
        InlineKeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users")
    )
    builder.row(
        InlineKeyboardButton(text="üìù –ö–æ–Ω—Ç–µ–Ω—Ç", callback_data="admin_content"),
        InlineKeyboardButton(text="üí∞ –ü–ª–∞—Ç–µ–∂–∏", callback_data="admin_payments")
    )
    builder.row(
        InlineKeyboardButton(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")
    )
    builder.row(
        InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    )
    
    return builder.as_markup()


def confirmation_kb(action: str, data: str = "") -> InlineKeyboardMarkup:
    """Confirmation keyboard"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(text="‚úÖ –î–∞", callback_data=f"confirm_{action}_{data}"),
        InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data=f"cancel_{action}")
    )
    
    return builder.as_markup()


def back_to_main_kb() -> InlineKeyboardMarkup:
    """Back to main menu keyboard"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    )
    
    return builder.as_markup()


def back_to_profile_kb() -> InlineKeyboardMarkup:
    """Back to profile menu keyboard"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile_menu")
    )
    
    return builder.as_markup()


def profile_edit_kb() -> InlineKeyboardMarkup:
    """Profile editing menu keyboard"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="start_profile_edit")
    )
    builder.row(
        InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile_menu"),
        InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    )
    
    return builder.as_markup()


def skip_kb(callback_data: str) -> InlineKeyboardMarkup:
    """Skip button keyboard"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=f"skip_{callback_data}")
    )
    
    return builder.as_markup()


def gender_kb() -> InlineKeyboardMarkup:
    """Gender selection keyboard"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(text="üë® –ú—É–∂—Å–∫–æ–π", callback_data="gender_male"),
        InlineKeyboardButton(text="üë© –ñ–µ–Ω—Å–∫–∏–π", callback_data="gender_female")
    )
    builder.row(
        InlineKeyboardButton(text="üö´ –ù–µ —É–∫–∞–∑—ã–≤–∞—Ç—å", callback_data="gender_skip")
    )
    
    return builder.as_markup()


def age_group_kb() -> InlineKeyboardMarkup:
    """Age group selection keyboard"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(text="18-25", callback_data="age_18_25"),
        InlineKeyboardButton(text="26-35", callback_data="age_26_35")
    )
    builder.row(
        InlineKeyboardButton(text="36-45", callback_data="age_36_45"),
        InlineKeyboardButton(text="46+", callback_data="age_46_plus")
    )
    builder.row(
        InlineKeyboardButton(text="üö´ –ù–µ —É–∫–∞–∑—ã–≤–∞—Ç—å", callback_data="age_skip")
    )
    
    return builder.as_markup()


def relationship_status_kb() -> InlineKeyboardMarkup:
    """Relationship status keyboard"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(text="üíë –í –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö", callback_data="status_relationship"),
        InlineKeyboardButton(text="üíî –ù–µ –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö", callback_data="status_single")
    )
    builder.row(
        InlineKeyboardButton(text="üíç –ñ–µ–Ω–∞—Ç/–∑–∞–º—É–∂–µ–º", callback_data="status_married"),
        InlineKeyboardButton(text="ü§î –°–ª–æ–∂–Ω–æ", callback_data="status_complicated")
    )
    builder.row(
        InlineKeyboardButton(text="üö´ –ù–µ —É–∫–∞–∑—ã–≤–∞—Ç—å", callback_data="status_skip")
    )
    
    return builder.as_markup()


def notification_settings_kb(notifications_enabled: bool = True) -> InlineKeyboardMarkup:
    """Notification settings keyboard"""
    builder = InlineKeyboardBuilder()
    
    status = "‚úÖ –í–∫–ª—é—á–µ–Ω—ã" if notifications_enabled else "‚ùå –í—ã–∫–ª—é—á–µ–Ω—ã"
    action = "disable" if notifications_enabled else "enable"
    
    builder.row(
        InlineKeyboardButton(text=f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {status}", callback_data=f"notifications_{action}")
    )
    builder.row(
        InlineKeyboardButton(text="‚è∞ –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", callback_data="notification_time")
    )
    builder.row(
        InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    )
    
    return builder.as_markup()


def questionnaire_navigation_kb(current_step: int, total_steps: int, 
                               has_prev: bool = True, has_next: bool = True) -> InlineKeyboardMarkup:
    """Questionnaire navigation keyboard"""
    builder = InlineKeyboardBuilder()
    
    nav_buttons = []
    
    if has_prev and current_step > 1:
        nav_buttons.append(
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"quest_prev_{current_step}")
        )
    
    if has_next and current_step < total_steps:
        nav_buttons.append(
            InlineKeyboardButton(text="–î–∞–ª–µ–µ ‚û°Ô∏è", callback_data=f"quest_next_{current_step}")
        )
    
    if nav_buttons:
        builder.row(*nav_buttons)
    
    # Progress and menu buttons
    builder.row(
        InlineKeyboardButton(
            text=f"üìä {current_step}/{total_steps}",
            callback_data="quest_progress"
        )
    )
    
    builder.row(
        InlineKeyboardButton(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –≤—ã–π—Ç–∏", callback_data="quest_save"),
        InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    )
    
    return builder.as_markup()


def rating_kb(rating_type: str = "general") -> InlineKeyboardMarkup:
    """Rating keyboard (1-5 stars)"""
    builder = InlineKeyboardBuilder()
    
    stars = []
    for i in range(1, 6):
        stars.append(
            InlineKeyboardButton(
                text="‚≠ê" * i,
                callback_data=f"rate_{rating_type}_{i}"
            )
        )
    
    # Split into rows of 2-3 buttons
    builder.row(stars[0], stars[1])
    builder.row(stars[2], stars[3])
    builder.row(stars[4])
    
    return builder.as_markup()


def subscription_plans_kb() -> InlineKeyboardMarkup:
    """Subscription plans keyboard"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(text="üíé Premium - 1 –º–µ—Å—è—Ü", callback_data="buy_premium_1"),
        InlineKeyboardButton(text="üíé Premium - 3 –º–µ—Å—è—Ü–∞", callback_data="buy_premium_3")
    )
    builder.row(
        InlineKeyboardButton(text="üëë VIP - 1 –º–µ—Å—è—Ü", callback_data="buy_vip_1"),
        InlineKeyboardButton(text="üëë VIP - 3 –º–µ—Å—è—Ü–∞", callback_data="buy_vip_3")
    )
    builder.row(
        InlineKeyboardButton(text="üéÅ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ", callback_data="trial_subscription")
    )
    builder.row(
        InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    )
    
    return builder.as_markup()


def pagination_kb(current_page: int, total_pages: int, prefix: str) -> InlineKeyboardMarkup:
    """Pagination keyboard"""
    builder = InlineKeyboardBuilder()
    
    buttons = []
    
    # Previous page
    if current_page > 1:
        buttons.append(
            InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"{prefix}_page_{current_page - 1}")
        )
    
    # Page info
    buttons.append(
        InlineKeyboardButton(
            text=f"{current_page}/{total_pages}",
            callback_data="page_info"
        )
    )
    
    # Next page
    if current_page < total_pages:
        buttons.append(
            InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"{prefix}_page_{current_page + 1}")
        )
    
    if buttons:
        builder.row(*buttons)
    
    return builder.as_markup()


def settings_menu_kb() -> InlineKeyboardMarkup:
    """Settings menu keyboard"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(text="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="settings_notifications"),
        InlineKeyboardButton(text="‚è∞ –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", callback_data="settings_time")
    )
    builder.row(
        InlineKeyboardButton(text="üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å", callback_data="settings_timezone"),
        InlineKeyboardButton(text="üìä –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="settings_weekly_stats")
    )
    builder.row(
        InlineKeyboardButton(text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="settings_clear_data"),
        InlineKeyboardButton(text="üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", callback_data="settings_export_data")
    )
    builder.row(
        InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile_menu"),
        InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    )
    
    return builder.as_markup()


def notification_settings_detailed_kb(user) -> InlineKeyboardMarkup:
    """Detailed notification settings keyboard"""
    builder = InlineKeyboardBuilder()
    
    # Daily tips
    daily_status = "‚úÖ" if user.daily_tips_enabled else "‚ùå"
    builder.row(
        InlineKeyboardButton(
            text=f"{daily_status} –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Å–æ–≤–µ—Ç—ã", 
            callback_data="toggle_daily_tips"
        )
    )
    
    # Analysis reminders  
    reminders_status = "‚úÖ" if user.analysis_reminders_enabled else "‚ùå"
    builder.row(
        InlineKeyboardButton(
            text=f"{reminders_status} –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –∞–Ω–∞–ª–∏–∑–∞—Ö", 
            callback_data="toggle_analysis_reminders"
        )
    )
    
    # Weekly stats
    weekly_status = "‚úÖ" if user.weekly_stats_enabled else "‚ùå"
    builder.row(
        InlineKeyboardButton(
            text=f"{weekly_status} –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", 
            callback_data="toggle_weekly_stats"
        )
    )
    
    # All notifications toggle
    all_status = "‚úÖ" if user.notifications_enabled else "‚ùå"
    builder.row(
        InlineKeyboardButton(
            text=f"{all_status} –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", 
            callback_data="toggle_all_notifications"
        )
    )
    
    builder.row(
        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="settings_menu"),
        InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    )
    
    return builder.as_markup()


def notification_time_kb(current_time: str = "09:00") -> InlineKeyboardMarkup:
    """Notification time selection keyboard"""
    builder = InlineKeyboardBuilder()
    
    times = ["07:00", "08:00", "09:00", "10:00", "11:00", "12:00", 
             "13:00", "14:00", "15:00", "16:00", "17:00", "18:00",
             "19:00", "20:00", "21:00", "22:00"]
    
    # Show times in rows of 4
    for i in range(0, len(times), 4):
        row_times = times[i:i+4]
        buttons = []
        for time in row_times:
            emoji = "üî•" if time == current_time else "‚è∞"
            buttons.append(
                InlineKeyboardButton(
                    text=f"{emoji} {time}", 
                    callback_data=f"set_time_{time.replace(':', '_')}"
                )
            )
        builder.row(*buttons)
    
    builder.row(
        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="settings_menu"),
        InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    )
    
    return builder.as_markup()


def timezone_kb(current_timezone: str = "Europe/Moscow") -> InlineKeyboardMarkup:
    """Timezone selection keyboard"""
    builder = InlineKeyboardBuilder()
    
    timezones = [
        ("üá∑üá∫ –ú–æ—Å–∫–≤–∞ (UTC+3)", "Europe/Moscow"),
        ("üá∑üá∫ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥ (UTC+5)", "Asia/Yekaterinburg"),
        ("üá∑üá∫ –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫ (UTC+7)", "Asia/Novosibirsk"),
        ("üá∑üá∫ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫ (UTC+10)", "Asia/Vladivostok"),
        ("üá∫üá¶ –ö–∏–µ–≤ (UTC+2)", "Europe/Kiev"),
        ("üá∞üáø –ê–ª–º–∞—Ç—ã (UTC+6)", "Asia/Almaty"),
        ("üá∫üá∏ –ù—å—é-–ô–æ—Ä–∫ (UTC-5)", "America/New_York"),
        ("üá¨üáß –õ–æ–Ω–¥–æ–Ω (UTC+0)", "Europe/London"),
    ]
    
    for name, tz in timezones:
        emoji = "üî•" if tz == current_timezone else ""
        builder.row(
            InlineKeyboardButton(
                text=f"{emoji} {name}", 
                callback_data=f"set_timezone_{tz.replace('/', '_')}"
            )
        )
    
    builder.row(
        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="settings_menu"),
        InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    )
    
    return builder.as_markup()


def confirm_clear_data_kb() -> InlineKeyboardMarkup:
    """Confirm data clearing keyboard"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(text="üóëÔ∏è –î–∞, –æ—á–∏—Å—Ç–∏—Ç—å", callback_data="confirm_clear_data"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="settings_menu")
    )
    
    return builder.as_markup()


def profile_edit_fields_kb() -> InlineKeyboardMarkup:
    """Profile editing fields selection keyboard"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(text="üë§ –ò–º—è", callback_data="edit_field_name"),
        InlineKeyboardButton(text="üéÇ –í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞", callback_data="edit_field_age")
    )
    builder.row(
        InlineKeyboardButton(text="üí´ –ò–Ω—Ç–µ—Ä–µ—Å—ã", callback_data="edit_field_interests"),
        InlineKeyboardButton(text="üéØ –¶–µ–ª–∏", callback_data="edit_field_goals")
    )
    builder.row(
        InlineKeyboardButton(text="üìã –û —Å–µ–±–µ", callback_data="edit_field_bio")
    )
    builder.row(
        InlineKeyboardButton(text="‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è", callback_data="confirm_profile_save")
    )
    builder.row(
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_profile_edit"),
        InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    )
    
    return builder.as_markup()


def confirm_profile_changes_kb() -> InlineKeyboardMarkup:
    """Confirm profile changes keyboard"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(text="‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è", callback_data="confirm_profile_changes"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_profile_edit")
    )
    
    return builder.as_markup()


def profile_edit_navigation_kb(can_edit: bool, days_until_edit: int = 0) -> InlineKeyboardMarkup:
    """Profile edit navigation with restriction info"""
    builder = InlineKeyboardBuilder()
    
    if can_edit:
        builder.row(
            InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="start_profile_edit")
        )
    else:
        remaining_text = f"üîí –°–ª–µ–¥—É—é—â–µ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ {days_until_edit} –¥–Ω."
        builder.row(
            InlineKeyboardButton(text=remaining_text, callback_data="edit_restriction_info")
        )
    
    builder.row(
        InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile_menu"),
        InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    )
    
    return builder.as_markup() 


def profiler_full_navigation_kb(
    current_state: str, 
    current_num: int, 
    total_questions: int,
    block_name: str = "",
    can_skip: bool = False
) -> InlineKeyboardMarkup:
    """Advanced navigation for full profiler questionnaire"""
    builder = InlineKeyboardBuilder()
    
    # Visual progress bar
    progress_filled = int((current_num / total_questions) * 10)
    progress_bar = "‚ñà" * progress_filled + "‚ñë" * (10 - progress_filled)
    
    # Answer buttons will be added in the handler, this is just navigation
    
    # Navigation row
    nav_buttons = []
    
    # Previous button (except for first question)
    if current_num > 1:
        nav_buttons.append(
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"prof_prev_{current_state}")
        )
    
    # Progress indicator with visual bar
    nav_buttons.append(
        InlineKeyboardButton(
            text=f"üìä {current_num}/{total_questions}", 
            callback_data="prof_progress_info"
        )
    )
    
    # Skip button for non-critical questions
    if can_skip:
        nav_buttons.append(
            InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=f"prof_skip_{current_state}")
        )
    
    if nav_buttons:
        builder.row(*nav_buttons)
    
    # Block progress info
    if block_name:
        builder.row(
            InlineKeyboardButton(
                text=f"üìã –ë–ª–æ–∫: {block_name}", 
                callback_data="prof_block_info"
            )
        )
    
    # Quick actions
    actions_row = []
    actions_row.append(
        InlineKeyboardButton(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="prof_save_progress")
    )
    actions_row.append(
        InlineKeyboardButton(text="‚ùå –í—ã—Ö–æ–¥", callback_data="prof_exit_confirm")
    )
    
    builder.row(*actions_row)
    
    return builder.as_markup()


def profiler_results_navigation_kb(
    urgency_level: str,
    has_safety_alerts: bool = False,
    overall_risk: float = 0.0
) -> InlineKeyboardMarkup:
    """Advanced results navigation with risk-based options"""
    builder = InlineKeyboardBuilder()
    
    # Main analysis options
    builder.row(
        InlineKeyboardButton(text="üìä –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑", callback_data="prof_detailed_analysis"),
        InlineKeyboardButton(text="üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data="prof_recommendations")
    )
    
    # Risk-specific options
    if urgency_level in ["HIGH", "CRITICAL"] or has_safety_alerts:
        builder.row(
            InlineKeyboardButton(text="üö® –ü–ª–∞–Ω –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", callback_data="prof_safety_plan"),
            InlineKeyboardButton(text="üìû –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø–æ–º–æ—â—å", callback_data="prof_emergency_help")
        )
    
    # Additional analysis
    builder.row(
        InlineKeyboardButton(text="üîç –ê–Ω–∞–ª–∏–∑ –ø–æ –±–ª–æ–∫–∞–º", callback_data="prof_block_analysis"),
        InlineKeyboardButton(text="üìà –î–∏–Ω–∞–º–∏–∫–∞ —Ä–∏—Å–∫–æ–≤", callback_data="prof_risk_trends")
    )
    
    # Export and sharing
    builder.row(
        InlineKeyboardButton(text="üìÑ PDF –æ—Ç—á–µ—Ç", callback_data="prof_generate_pdf"),
        InlineKeyboardButton(text="üìã –ö—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç", callback_data="prof_brief_report")
    )
    
    if overall_risk < 70:  # Only for lower risk profiles
        builder.row(
            InlineKeyboardButton(text="üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è", callback_data="prof_share_results")
        )
    
    # Profile management
    builder.row(
        InlineKeyboardButton(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="prof_save_profile"),
        InlineKeyboardButton(text="üîÑ –ü—Ä–æ–π—Ç–∏ –∑–∞–Ω–æ–≤–æ", callback_data="prof_restart")
    )
    
    # Navigation
    builder.row(
        InlineKeyboardButton(text="üìã –ú–æ–∏ –ø—Ä–æ—Ñ–∏–ª–∏", callback_data="prof_my_profiles"),
        InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    )
    
    return builder.as_markup()


def profiler_block_analysis_kb(
    block_scores: dict,
    current_block: str = ""
) -> InlineKeyboardMarkup:
    """Navigation for detailed block analysis"""
    builder = InlineKeyboardBuilder()
    
    # Block navigation buttons with risk indicators
    block_info = {
        "narcissism": {"name": "üß† –ù–∞—Ä—Ü–∏—Å—Å–∏–∑–º", "emoji": "üß†"},
        "control": {"name": "üéØ –ö–æ–Ω—Ç—Ä–æ–ª—å", "emoji": "üéØ"},
        "gaslighting": {"name": "üîÑ –ì–∞–∑–ª–∞–π—Ç–∏–Ω–≥", "emoji": "üîÑ"},
        "emotion": {"name": "üí≠ –≠–º–æ—Ü–∏–∏", "emoji": "üí≠"},
        "intimacy": {"name": "üíï –ò–Ω—Ç–∏–º–Ω–æ—Å—Ç—å", "emoji": "üíï"},
        "social": {"name": "üë• –°–æ—Ü–∏–∞–ª—å–Ω–æ–µ", "emoji": "üë•"}
    }
    
    # Create rows of block buttons
    block_buttons = []
    for block_key, info in block_info.items():
        score = block_scores.get(block_key, 0)
        risk_indicator = "üî¥" if score >= 7 else "üü°" if score >= 4 else "üü¢"
        
        # Highlight current block
        if block_key == current_block:
            text = f"‚ñ∂Ô∏è {info['name']} {risk_indicator}"
        else:
            text = f"{info['emoji']} {info['name']} {risk_indicator}"
        
        block_buttons.append(
            InlineKeyboardButton(
                text=text,
                callback_data=f"prof_view_block_{block_key}"
            )
        )
    
    # Arrange in rows of 2
    for i in range(0, len(block_buttons), 2):
        row_buttons = block_buttons[i:i+2]
        builder.row(*row_buttons)
    
    # Summary and comparison
    builder.row(
        InlineKeyboardButton(text="üìä –û–±—â–∞—è —Å–≤–æ–¥–∫–∞", callback_data="prof_blocks_summary"),
        InlineKeyboardButton(text="‚öñÔ∏è –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –±–ª–æ–∫–æ–≤", callback_data="prof_blocks_compare")
    )
    
    # Navigation
    builder.row(
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º", callback_data="prof_back_to_results"),
        InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    )
    
    return builder.as_markup()


def profiler_safety_plan_kb(urgency_level: str) -> InlineKeyboardMarkup:
    """Safety plan navigation based on urgency level"""
    builder = InlineKeyboardBuilder()
    
    # Emergency contacts (always visible)
    builder.row(
        InlineKeyboardButton(text="üö® –°–ª—É–∂–±–∞ 112", url="tel:112"),
        InlineKeyboardButton(text="‚òéÔ∏è –ì–æ—Ä—è—á–∞—è –ª–∏–Ω–∏—è", url="tel:88007000600")
    )
    
    if urgency_level == "CRITICAL":
        # Critical situation options
        builder.row(
            InlineKeyboardButton(text="üèÉ‚Äç‚ôÄÔ∏è –ü–ª–∞–Ω —ç–≤–∞–∫—É–∞—Ü–∏–∏", callback_data="prof_evacuation_plan"),
            InlineKeyboardButton(text="üìã –î–æ–∫—É–º–µ–Ω—Ç—ã", callback_data="prof_emergency_docs")
        )
        builder.row(
            InlineKeyboardButton(text="üè† –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –º–µ—Å—Ç–∞", callback_data="prof_safe_places"),
            InlineKeyboardButton(text="üë• –°–µ—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫–∏", callback_data="prof_support_network")
        )
    
    elif urgency_level == "HIGH":
        # High risk options
        builder.row(
            InlineKeyboardButton(text="üõ°Ô∏è –ì—Ä–∞–Ω–∏—Ü—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", callback_data="prof_safety_boundaries"),
            InlineKeyboardButton(text="üì± –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ–º–æ—â–∏", callback_data="prof_safety_apps")
        )
        builder.row(
            InlineKeyboardButton(text="üí¨ –ö–æ–¥—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", callback_data="prof_safety_codes"),
            InlineKeyboardButton(text="üóÇÔ∏è –î–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="prof_incident_docs")
        )
    
    # Professional help
    builder.row(
        InlineKeyboardButton(text="üë®‚Äç‚öïÔ∏è –ü—Å–∏—Ö–æ–ª–æ–≥", callback_data="prof_find_therapist"),
        InlineKeyboardButton(text="‚öñÔ∏è –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –ø–æ–º–æ—â—å", callback_data="prof_legal_help")
    )
    
    # Self-care and resources
    builder.row(
        InlineKeyboardButton(text="üßò‚Äç‚ôÄÔ∏è –¢–µ—Ö–Ω–∏–∫–∏ –≤—ã–∂–∏–≤–∞–Ω–∏—è", callback_data="prof_coping_techniques"),
        InlineKeyboardButton(text="üìö –†–µ—Å—É—Ä—Å—ã", callback_data="prof_safety_resources")
    )
    
    # Navigation
    builder.row(
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º", callback_data="prof_back_to_results"),
        InlineKeyboardButton(text="üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data="prof_recommendations")
    )
    
    return builder.as_markup()


def profiler_my_profiles_kb(profiles_count: int = 0) -> InlineKeyboardMarkup:
    """My profiles management keyboard"""
    builder = InlineKeyboardBuilder()
    
    if profiles_count > 0:
        # Profile management options
        builder.row(
            InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ—Ñ–∏–ª–µ–π", callback_data="prof_list_profiles"),
            InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –ø—Ä–æ—Ñ–∏–ª—è", callback_data="prof_search_profiles")
        )
        builder.row(
            InlineKeyboardButton(text="üìä –°—Ä–∞–≤–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª–∏", callback_data="prof_compare_profiles"),
            InlineKeyboardButton(text="üìà –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π", callback_data="prof_profile_history")
        )
        builder.row(
            InlineKeyboardButton(text="üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", callback_data="prof_export_profiles"),
            InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="prof_delete_profile")
        )
    else:
        # No profiles yet
        builder.row(
            InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="create_profile")
        )
    
    # Always available options
    builder.row(
        InlineKeyboardButton(text="‚ûï –ù–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="create_profile"),
        InlineKeyboardButton(text="üìö –ì–∞–π–¥ –ø–æ –ø—Ä–æ—Ñ–∏–ª—è–º", callback_data="prof_profile_guide")
    )
    
    builder.row(
        InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∞–π–ª–µ—Ä", callback_data="profiler_menu"),
        InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    )
    
    return builder.as_markup()


def profiler_confirmation_kb(action: str, data: str = "") -> InlineKeyboardMarkup:
    """Confirmation dialogs for profiler actions"""
    builder = InlineKeyboardBuilder()
    
    if action == "exit":
        builder.row(
            InlineKeyboardButton(text="‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –≤—ã–π—Ç–∏", callback_data="prof_save_and_exit"),
            InlineKeyboardButton(text="‚ùå –í—ã–π—Ç–∏ –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", callback_data="prof_exit_no_save")
        )
        builder.row(
            InlineKeyboardButton(text="‚Ü©Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∞–Ω–∫–µ—Ç—É", callback_data="prof_continue")
        )
    
    elif action == "restart":
        builder.row(
            InlineKeyboardButton(text="üîÑ –î–∞, –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="prof_confirm_restart"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="prof_back_to_results")
        )
    
    elif action == "delete_profile":
        builder.row(
            InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –Ω–∞–≤—Å–µ–≥–¥–∞", callback_data=f"prof_confirm_delete_{data}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="prof_my_profiles")
        )
    
    elif action == "share":
        builder.row(
            InlineKeyboardButton(text="üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∞–Ω–æ–Ω–∏–º–Ω–æ", callback_data="prof_share_anonymous"),
            InlineKeyboardButton(text="üìß –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ email", callback_data="prof_share_email")
        )
        builder.row(
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="prof_back_to_results")
        )
    
    return builder.as_markup()


def profiler_progress_visual_kb(
    current_num: int,
    total_questions: int,
    block_progress: dict
) -> InlineKeyboardMarkup:
    """Visual progress display with block breakdown"""
    builder = InlineKeyboardBuilder()
    
    # Overall progress
    overall_percent = int((current_num / total_questions) * 100)
    builder.row(
        InlineKeyboardButton(
            text=f"üìä –û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {overall_percent}% ({current_num}/{total_questions})",
            callback_data="prof_progress_details"
        )
    )
    
    # Block progress indicators
    block_names = {
        "narcissism": "üß† –ù–∞—Ä—Ü–∏—Å—Å–∏–∑–º",
        "control": "üéØ –ö–æ–Ω—Ç—Ä–æ–ª—å", 
        "gaslighting": "üîÑ –ì–∞–∑–ª–∞–π—Ç–∏–Ω–≥",
        "emotion": "üí≠ –≠–º–æ—Ü–∏–∏",
        "intimacy": "üíï –ò–Ω—Ç–∏–º–Ω–æ—Å—Ç—å",
        "social": "üë• –°–æ—Ü–∏–∞–ª—å–Ω–æ–µ"
    }
    
    for block_key, name in block_names.items():
        completed = block_progress.get(f"{block_key}_completed", 0)
        total = block_progress.get(f"{block_key}_total", 0)
        
        if total > 0:
            percent = int((completed / total) * 100)
            status = "‚úÖ" if completed == total else "‚è≥" if completed > 0 else "‚è∏Ô∏è"
            
            builder.row(
                InlineKeyboardButton(
                    text=f"{status} {name}: {percent}% ({completed}/{total})",
                    callback_data=f"prof_block_progress_{block_key}"
                )
            )
    
    # Time estimate
    questions_left = total_questions - current_num
    time_estimate = questions_left * 30  # 30 seconds per question
    
    if time_estimate > 60:
        time_text = f"‚è±Ô∏è –û—Å—Ç–∞–ª–æ—Å—å: ~{time_estimate//60} –º–∏–Ω"
    else:
        time_text = f"‚è±Ô∏è –û—Å—Ç–∞–ª–æ—Å—å: ~{time_estimate} —Å–µ–∫"
    
    builder.row(
        InlineKeyboardButton(text=time_text, callback_data="prof_time_info")
    )
    
    builder.row(
        InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –≤–æ–ø—Ä–æ—Å—É", callback_data="prof_back_to_question")
    )
    
    return builder.as_markup() 


def get_profiler_keyboard() -> InlineKeyboardMarkup:
    """Get profiler main keyboard"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(text="üÜï –ù–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="create_profile"),
        InlineKeyboardButton(text="üìã –ú–æ–∏ –ø—Ä–æ—Ñ–∏–ª–∏", callback_data="my_profiles")
    )
    builder.row(
        InlineKeyboardButton(text="üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data="profile_recommendations")
    )
    builder.row(
        InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    )
    
    return builder.as_markup()


def get_profiler_navigation_keyboard(current_step: int, total_steps: int) -> InlineKeyboardMarkup:
    """Get profiler navigation keyboard"""
    builder = InlineKeyboardBuilder()
    
    # Previous button
    if current_step > 1:
        builder.row(
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"profiler_prev_{current_step}")
        )
    
    # Next button
    if current_step < total_steps:
        builder.row(
            InlineKeyboardButton(text="‚û°Ô∏è –î–∞–ª–µ–µ", callback_data=f"profiler_next_{current_step}")
        )
    
    # Finish button
    if current_step == total_steps:
        builder.row(
            InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="profiler_finish")
        )
    
    # Cancel button
    builder.row(
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="profiler_cancel")
    )
    
    return builder.as_markup()


def get_profiler_question_keyboard(question_id: str, options: List[str]) -> InlineKeyboardMarkup:
    """Create keyboard with answer options for profiler questions"""
    builder = InlineKeyboardBuilder()
    
    # Add answer options
    for i, option in enumerate(options):
        builder.row(
            InlineKeyboardButton(
                text=f"{i+1}. {option}",
                callback_data=f"answer_{question_id}_{i}"
            )
        )
    
    # Add navigation buttons
    builder.row(
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="profiler_back"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="profiler_cancel")
    )
    
    return builder.as_markup() 
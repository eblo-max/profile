#!/usr/bin/env python3
"""
–¢–µ—Å—Ç Claude –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø—Ä–æ–±–ª–µ–º—ã "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ AI –º–æ–¥–µ–ª–µ–π: 0"
"""
import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

from src.ai.scientific_research_engine import PersonData
from src.ai.multi_ai_research_analyzer import MultiAIResearchAnalyzer, AIAnalysisResult
from src.config.settings import settings

async def test_claude_direct():
    """–ü—Ä—è–º–æ–π —Ç–µ—Å—Ç Claude API"""
    print("üß™ –¢–µ—Å—Ç Claude –∞–Ω–∞–ª–∏–∑–∞")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    person_data = PersonData(
        name="–ê–ª–µ–∫—Å–µ–π",
        age=28,
        occupation="IT-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫",
        behavior_description="–û—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω—ã–π, –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π, –∏–Ω—Ç—Ä–æ–≤–µ—Ä—Ç",
        country="Russia"
    )
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    from src.ai.scientific_research_engine import ScientificSource
    
    test_sources = [
        ScientificSource(
            title="Personality Traits in Software Developers",
            authors=["Smith J.", "Doe A."],
            publication="Journal of Applied Psychology",
            year=2024,
            abstract="This study examines personality traits common among software developers...",
            quality_score=85.0,
            source_type="academic"
        )
    ]
    
    print(f"üìä –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:")
    print(f"   –ß–µ–ª–æ–≤–µ–∫: {person_data.name}, {person_data.age}, {person_data.occupation}")
    print(f"   –ò—Å—Ç–æ—á–Ω–∏–∫–∏: {len(test_sources)}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
    analyzer = MultiAIResearchAnalyzer(settings)
    
    print(f"\nüîë –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞:")
    print(f"   Claude –∫–ª–∏–µ–Ω—Ç: {'‚úÖ –ï—Å—Ç—å' if analyzer.claude_client else '‚ùå –ù–µ—Ç'}")
    
    if not analyzer.claude_client:
        print("‚ùå Claude –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ ANTHROPIC_API_KEY")
        return
    
    try:
        print("\nüöÄ –ó–∞–ø—É—Å–∫–∞—é Claude –∞–Ω–∞–ª–∏–∑...")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ Claude –∞–Ω–∞–ª–∏–∑–∞
        result = await analyzer._claude_general_analysis(person_data, test_sources)
        
        print(f"‚úÖ Claude –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        print(f"   –ú–æ–¥–µ–ª—å: {result.ai_model}")
        print(f"   –¢–∏–ø: {result.analysis_type}")
        print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result.confidence_score}")
        print(f"   –°—Ç–∞—Ç—É—Å: {'‚úÖ –£—Å–ø–µ—Ö' if result.findings.get('status') != 'failed' else '‚ùå –û—à–∏–±–∫–∞'}")
        
        if result.findings.get('status') == 'failed':
            print(f"   –û—à–∏–±–∫–∞: {result.findings.get('error', 'Unknown error')}")
        else:
            print(f"   –ö–ª—é—á–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {list(result.findings.keys())[:5]}")
        
        return result
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Claude –∞–Ω–∞–ª–∏–∑–∞: {e}")
        import traceback
        traceback.print_exc()
        return None

async def test_comprehensive_analysis():
    """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    print("\nüß™ –¢–µ—Å—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
    
    person_data = PersonData(
        name="–ê–ª–µ–∫—Å–µ–π",
        age=28,
        occupation="IT-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫",
        behavior_description="–û—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω—ã–π, –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π, –∏–Ω—Ç—Ä–æ–≤–µ—Ä—Ç",
        country="Russia"
    )
    
    from src.ai.scientific_research_engine import ScientificSource
    test_sources = [
        ScientificSource(
            title="IT Professional Personality Research",
            authors=["Research Team"],
            publication="Tech Psychology Journal",
            year=2024,
            abstract="Research on IT professional personality traits...",
            quality_score=75.0,
            source_type="academic"
        )
    ]
    
    analyzer = MultiAIResearchAnalyzer(settings)
    
    try:
        print("üöÄ –ó–∞–ø—É—Å–∫–∞—é –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑...")
        
        result = await analyzer.comprehensive_research_analysis(person_data, test_sources)
        
        print(f"‚úÖ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        print(f"   AI –º–æ–¥–µ–ª–µ–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {result['analysis_metadata']['total_ai_models']}")
        print(f"   –ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {result['analysis_metadata']['research_sources_used']}")
        print(f"   –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤: {len(result['individual_analyses'])}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
        if result.get('comprehensive_profile'):
            profile_length = len(result['comprehensive_profile'])
            print(f"   –ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω: {profile_length} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"   –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ñ–∏–ª—è: {result['comprehensive_profile'][:100]}...")
        else:
            print(f"   ‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ —Å–æ–∑–¥–∞–Ω")
        
        return result
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        import traceback
        traceback.print_exc()
        return None

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–µ—Å—Ç Claude AI –∞–Ω–∞–ª–∏–∑–∞\n")
    
    # –¢–µ—Å—Ç 1: –ü—Ä—è–º–æ–π Claude –∞–Ω–∞–ª–∏–∑
    claude_result = await test_claude_direct()
    
    # –¢–µ—Å—Ç 2: –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (–∫–∞–∫ –≤ –±–æ—Ç–µ)
    comprehensive_result = await test_comprehensive_analysis()
    
    print("\nüîç –ò–¢–û–ì–û–í–´–ô –ê–ù–ê–õ–ò–ó:")
    
    if claude_result and claude_result.findings.get('status') != 'failed':
        print("‚úÖ Claude –∞–Ω–∞–ª–∏–∑ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    else:
        print("‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å Claude –∞–Ω–∞–ª–∏–∑–æ–º")
    
    if comprehensive_result and comprehensive_result['analysis_metadata']['total_ai_models'] > 0:
        print("‚úÖ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    else:
        print("‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º")

if __name__ == "__main__":
    asyncio.run(main()) 